{"version":3,"file":"static/js/14.7f0a3014.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","components/content-components/graphs/FunctionGraph.js","topics/limits/evaluating-limits-using-graphs/generate-question.js"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst FunctionGraph = ({ functions, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","import Latex from \"../../../components/latex/Latex\";\r\nimport { getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport { fitPointsToQuadratic, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from 'mathjs'\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\";\r\nimport { COLORS, GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\n\r\n/**\r\n * generates random question that shows a graph with asymptote(s) and asks users to find the limit at an asymptotic point\r\n * @returns question, answer, text next to input, hints\r\n */\r\nfunction asymptoticGraphQuestion() {\r\n  const randomNumbers = getRandomNumber(1, 2); // number of asymptotes\r\n  const xValues = []; // values at which there will be an asymptote\r\n  let f = `(${getRandomNumber(0, 1) === 0 ? \"-\" : \"\"}1/`; // function\r\n\r\n  // get random x values and build function\r\n  for (let i = 0; i < randomNumbers; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [-1, 0, 1, ...xValues]);\r\n    xValues[i] = num;\r\n    f = f + `(x ${num < 0 ? '+' : '-'} ${Math.abs(num)})`;\r\n  }\r\n  const verticalShift = getRandomNumber(-5, 5)\r\n  f = f + `) ${verticalShift > 0 ? '+' : '-'} ${Math.abs(verticalShift)}`\r\n\r\n  // sort x values in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n  const node = math.parse(f);\r\n\r\n  // generate functions array\r\n  // this generates an array that doesn't include the x values as the function is undefined at those points\r\n  const functions = [];\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    let curr = {\r\n      f: x => node.evaluate({ x }),\r\n      min: i === 0 ? -11 : xValues[i - 1],\r\n      max: i === xValues.length ? 11 : xValues[i],\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    }\r\n\r\n    functions[i] = curr;\r\n  }\r\n\r\n  // set all other question stuff\r\n  const ans = \"dne\";\r\n  const type = 'frq';\r\n\r\n  // random x value to ask about\r\n  const val = xValues[getRandomNumber(0, xValues.length - 1)];\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <AsymptoticGraph functions={functions} size={GRAPH_SIZE} x={xValues} y={[verticalShift]} />\r\n  </div>\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${val}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {val} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit at a point where the function appears to be boundless?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of multiple functions, potentially with a jump.\r\n * Asks users to find limit from left, right, or both sides of a random point in graph\r\n * @returns question, answer, text next to input, hints\r\n */\r\nfunction jumpGraphQuestion() {\r\n  const numFunctions = getRandomNumber(2, 3); // number of functions in graph\r\n  const xValues = []; // xvalues where there is a potential jump\r\n  const exclusions = []; // xvalues that should not be a jump\r\n\r\n  // generate random xvalues\r\n  for (let i = 1; i < numFunctions; i++) {\r\n    const num = getRandomWithExclusions(-8, 8, exclusions);\r\n    xValues[i - 1] = num;\r\n    exclusions.push(num - 2, num - 1, num, num + 1, num + 2) // exclude xvalue and +- 2\r\n  }\r\n\r\n  // sort xvalues in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n\r\n  const possibleXs = [...xValues]; // possiblexs that can be asked about\r\n\r\n  const functions = [];\r\n\r\n  // min/max variables of each function in function array\r\n  let min = -11;\r\n  let max = xValues[0] ? xValues[0] : 11;\r\n\r\n  // generate functions array\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    let x = null;\r\n    let node;\r\n \r\n    if (i === 0) {\r\n      // left most function\r\n      x = xValues[i] !== undefined ? xValues[i] : getRandomNumber(-8, 8);\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at right x value\r\n    } else if (i === numFunctions - 1) {\r\n      // right most function\r\n      x = xValues[i - 1]\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at left x value\r\n    } else {\r\n      // middle graph\r\n      x = xValues[i];\r\n      const midx = Math.round((xValues[i - 1] + xValues[i]) / 2) // midpoint of function domain\r\n\r\n      // points that should be in graph\r\n      const points = [\r\n        { x: xValues[i - 1], y: getRandomNumber(-7, 7) },\r\n        { x: midx, y: getRandomNumber(-7, 7) },\r\n        { x: xValues[i], y: getRandomNumber(-7, 7) }\r\n      ]\r\n      possibleXs.push(midx); // add midx as a potential xvalue to ask about\r\n      node = fitPointsToQuadratic(points) // generate graph that fits to points\r\n    }\r\n\r\n    max = xValues[i] !== undefined ? xValues[i] : 11; // update max\r\n    let curr = {\r\n      f: x => node.evaluate({ x }),\r\n      min,\r\n      max,\r\n      includeLeft: i !== 0 ? !functions[i - 1].includeRight : false, // opposite of prev f right\r\n      includeRight: getRandomNumber(0, 1) === 0, // randomly decide\r\n      leftArrow: i === 0, // arrows on first and last graphs\r\n      rightArrow: i === numFunctions - 1,\r\n      classes: 'f',\r\n      leftCircle: i !== 0, // circle on both sides except first/last graphs which have arrows\r\n      rightCircle: i !== numFunctions - 1\r\n    }\r\n\r\n    min = xValues[i]; // update min\r\n    functions[i] = curr;\r\n  }\r\n\r\n  const qX = possibleXs[getRandomNumber(0, possibleXs.length - 1)]; // x to ask about\r\n  let ans;\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // get correct answer based on xvalue/sign\r\n  for (let i = 0; i < functions.length; i++) {\r\n    if (qX === functions[i].min) {\r\n      // qX on left side of graph, limit from right\r\n      if (sign === 1) {\r\n        ans = Math.round(functions[i].f(functions[i].min));\r\n      }\r\n    } else if (qX === functions[i].max) {\r\n      // qX on right side of graph\r\n      if (sign === 0) {\r\n        // limit from left\r\n        ans = functions[i].f(qX);\r\n      } else if (sign === 2) {\r\n        // limit from both sides\r\n        const currVal = Math.round(functions[i].f(qX));\r\n        const nextVal = Math.round(functions[i + 1].f(qX));\r\n        ans = currVal === nextVal ? currVal : 'dne';\r\n      }\r\n    } else if (qX > functions[i].min && qX < functions[i].max) {\r\n      // qX in the middle\r\n      ans = Math.round(functions[i].f(qX));\r\n    }\r\n  }\r\n\r\n  // set all other question stuff\r\n  const type = 'frq'\r\n  ans = String(ans);\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const signText = sign === 0 ? `^{-}` : sign === 1 ? `^{+}` : ``;\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${qX + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {qX} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      Are we interested in the limit from the left, right, or both directions?\r\n    </div>,\r\n    <div>\r\n      {ans === 'dne' ? \"What do we know about limits at point where there is a jump in the graph?\" :\r\n        sign === 2 ? `Looking at the graph, what do we know about the asked limit?` :\r\n          \"Which sub-function graph should we look at to get our answer?\"}\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of an oscillating function\r\n * asks users to find limit where graph is oscillating\r\n * @returns question, answer, text next to input, hints\r\n */\r\nfunction oscillatingGraphQuestion() {\r\n  // transformation variables\r\n  const horizShift = getRandomNumber(-8, 8);\r\n  const verticalShift = getRandomNumber(-7, 7)\r\n  const f = `(${getRandomWithExclusions(-3, 3, [0])}/${getRandomWithExclusions(-2, 2, [0])})sin(1/(x - ${horizShift})) + ${verticalShift}`\r\n\r\n  // set function\r\n  const node = math.parse(f);\r\n  const functions = [{\r\n    f: x => node.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // set all other question stuff\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const ans = 'dne'\r\n  const type = 'frq'\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${horizShift}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {horizShift} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit of a function at a point where the function is oscillating?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\nfunction generateRandomQuestion() {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 2) {\r\n    q = oscillatingGraphQuestion();\r\n  } else if (rand <= 5) {\r\n    q = asymptoticGraphQuestion();\r\n  } else {\r\n    q = jumpGraphQuestion();\r\n  }\r\n\r\n  // set title since it's the same for everything\r\n  q.title = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","rand","getRandomNumber","q","horizShift","verticalShift","f","concat","getRandomWithExclusions","node","math","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","question","_jsxs","className","children","Latex","expression","inline","FunctionGraph","GRAPH_SIZE","nextToInput","ans","type","hints","oscillatingGraphQuestion","randomNumbers","xValues","num","Math","abs","sort","a","b","curr","val","AsymptoticGraph","asymptoticGraphQuestion","numFunctions","exclusions","push","possibleXs","_loop","undefined","generateRandomPolynomialWithPoint","midx","round","points","fitPointsToQuadratic","qX","sign","currVal","String","signText","jumpGraphQuestion","title","document","documentElement","setProperty","COLORS"],"sourceRoot":""}