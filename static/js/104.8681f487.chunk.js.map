{"version":3,"file":"static/js/104.8681f487.chunk.js","mappings":"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","sources":["helpers/functions.ts","topics/01-limits/13-infinite-limits-and-vertical-asymptotes/generate-question.tsx"],"sourcesContent":["import * as math from \"mathjs\"\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * Shuffles an array\r\n * @param {array} array array to be shuffled\r\n * @returns shuffled array\r\n */\r\nconst shuffleArray =  (array: Array<any>): Array<any> => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1)); // Generate a random index from 0 to i\r\n\r\n    // Swap elements at i and j\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * generates a random number\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @returns random number in the range [min, max]\r\n */\r\nconst getRandomNumber = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * generates a random number with exclusions\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @param {array} exclusions numbers to be excluded from generation\r\n * @returns random number in the range [min, max] excluding exclusions\r\n */\r\nconst getRandomWithExclusions = \r\n  (min: number, max: number, exclusions: Array<number>): number => {\r\n  const validValues = [];\r\n  for (let i = min; i <= max; i++) {\r\n    if (!exclusions.includes(i)) {\r\n      validValues.push(i);\r\n    }\r\n  }\r\n\r\n  if (validValues.length === 0) {\r\n    return max;\r\n  }\r\n\r\n  const randomIndex = getRandomNumber(0, validValues.length - 1);\r\n  return validValues[randomIndex];\r\n}\r\n\r\n/**\r\n * @param {Number} n number of values to generate\r\n * @param {boolean} increasing true if values should be increasing, false if decreasing\r\n * @returns array of n ordered numbers \r\n */\r\nconst generateOrderedValues = \r\n  (n: number, increasing: boolean, extreme: number = 10, \r\n    increment: number = 4): Array<number> => {\r\n  if (n <= 0) {\r\n    return [];\r\n  }\r\n\r\n  const values = [Math.floor(Math.random() * extreme) + 1]; // Initialize with a random value\r\n\r\n  while (values.length < n) {\r\n    // generate a value greater than the last one\r\n    const nextDiff = getRandomNumber(1, increment) * (increasing ? 1 : -1);\r\n    const nextValue = values[values.length - 1] + nextDiff;\r\n    values.push(nextValue);\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} polynomial string with a polynomial\r\n * @returns polynomial sorted in order of degree\r\n */\r\nconst sortPolynomialByDegree = (polynomial: string): string => {\r\n  // get coefficients with nerdamer\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  let ans = \"\";\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(nerdamer(e).toString());\r\n  })\r\n\r\n  // build expression\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Returns polynomial expression given coefficients of polynomial\r\n * @param coeffs to use in building polynomial\r\n * @returns expression\r\n */\r\nconst buildPolynomialFromCoeffs = (coeffs: any[]): string => {\r\n  for (let i = 0; i < coeffs.length; i++) {\r\n    coeffs[i] = String(coeffs[i])\r\n  }\r\n  \r\n  let ans = ''\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number.isNaN(Number(coeffs[i])) || Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Extracts coefficients of polynomial in increasing order of degree\r\n * @param polynomial string with polynomial expression\r\n * @returns Coefficients of polynomial in increasing order of degree\r\n */\r\nconst getCoeffsOfPolynomial = (polynomial: string): number[] => {\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(Number(nerdamer(e).toString()));\r\n  })\r\n\r\n  return coeffs\r\n}\r\n\r\n/**\r\n * Finds roots of given polynomial expression (works only with polynomials of degree 2)\r\n * @param polynomial string wth polynomial expression to find roots\r\n * @returns vector of roots of polynomial as decimals\r\n * if there is only 1 root, it will return a vector of length 2 with both values the same root\r\n */\r\nconst getRootsOfPolynomial = (polynomial: string): string[] => {\r\n  const roots = nerdamer(`roots(${polynomial})`)\r\n  const elements = roots.symbol.elements\r\n  const r1 = convertToDecimal(elements[0].toString())\r\n  const r2 = elements[1] === undefined ? r1 : convertToDecimal(elements[1].toString())\r\n  return [r1, r2]\r\n}\r\n\r\n/**\r\n * converts provided number (potentially a fraction) to a decimal\r\n * @param number string of number to convert to decimal\r\n * @returns decimal equivalent of number\r\n */\r\nconst convertToDecimal = (number: string): string => {\r\n  return nerdamer(number).text(`decimals`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} xval xvalue from which to create factor\r\n * @returns String in form (x - p), where p is the xval\r\n */\r\nconst getStringFactorFromXval = (xval: number): string => {\r\n  if (xval < 0) {\r\n    return `(x + ${Math.abs(xval)})`\r\n  } else if (xval > 0) {\r\n    return `(x - ${xval})`\r\n  } else {\r\n    return `(x)`\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array where each element is in the form {f: String, value: Number}\r\n * @returns object with keys as all the f Strings, values as the value of that String\r\n */\r\nconst convertArrayToObject = (array: Array<any>): any => {\r\n  const obj = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    const currentObj = array[i];\r\n    if (currentObj.hasOwnProperty('f')) {\r\n      const key = currentObj['f'];\r\n      obj[key] = currentObj['value'];\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * @param {Number} a \r\n * @param {Number} b \r\n * @returns least common multiple of a and b\r\n */\r\nconst findLCM = (a: number, b: number): number => {\r\n  // Calculate the greatest common divisor (GCD) using Euclidean algorithm\r\n  function findGCD(x, y) {\r\n    if (y === 0) {\r\n      return x;\r\n    }\r\n    return findGCD(y, x % y);\r\n  }\r\n\r\n  // LCM is the product of the two numbers divided by their GCD\r\n  return (a * b) / findGCD(a, b);\r\n}\r\n\r\n/**\r\n * @param {Number} xVal at which table will \"zoom in\"\r\n * @param {Array} values to use as yvalues in table\r\n * @param {Number} start of xs in table\r\n * @param {Number} end of xs in table\r\n * @returns data array containing x, y pairs for points that could be used in a limit table\r\n */\r\nconst generateLimitTableData = \r\n  (xVal: number, values: Array<number>, start: number, end: number): any => {\r\n  const increasing = values[1] - values[0] >= 0;\r\n  const data = [];\r\n  // build table data\r\n  for (let i = start; i <= end; i++) {\r\n    const val = values[i - start];\r\n\r\n    // zooming in to the left of xVal\r\n    if (i === xVal && xVal !== start) {\r\n      data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n      data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n    }\r\n\r\n    data.push({ x: i, y: val });  // other xvalues\r\n\r\n    // zooming in to the right of xval\r\n    if (i === xVal && xVal !== end) {\r\n      data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n      data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n    }\r\n  }\r\n\r\n  return {data}\r\n}\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with mathjs\r\n */\r\nconst formatPolynomialToLatex = (polynomial: string): any => {\r\n  const str: String = math.simplifyCore(polynomial).toTex()\r\n  return str.replaceAll('\\\\cdot', '').replaceAll('~', '');\r\n}\r\n\r\n/**\r\n * @param {String} expression to format\r\n * @returns formatted latex polynomial formatted with nerdamer\r\n */\r\nconst nerdamerFormatToLatex = (expression: string): string => {\r\n  return nerdamer(expression).toTeX().replaceAll('\\\\cdot', '').replaceAll('~', '')\r\n}\r\n\r\nexport { getRandomNumber, getRandomWithExclusions, generateOrderedValues, shuffleArray, sortPolynomialByDegree, getStringFactorFromXval, convertArrayToObject, findLCM, generateLimitTableData, formatPolynomialToLatex, nerdamerFormatToLatex, getCoeffsOfPolynomial, getRootsOfPolynomial, convertToDecimal, buildPolynomialFromCoeffs }","import Latex from \"../../../components/latex/Latex\"\r\nimport { getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, sortPolynomialByDegree } from \"../../../helpers/functions\"\r\nimport React from \"react\"\r\nimport * as math from \"mathjs\"\r\nimport { Option } from \"../../../@types/Option\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst asymptoticLimitQuestion = () => {\r\n  const bottomFactors = getRandomNumber(1, 2)\r\n  const topFactors = getRandomNumber(1, 2)\r\n  const bottomXs = []\r\n  const topXs = []\r\n  let denominator = \"\"\r\n  let numerator = \"\"\r\n\r\n  // get x values for denominator\r\n  for (let i = 0; i < bottomFactors; i++) {\r\n    const num = getRandomNumber(-7, 7)\r\n    bottomXs.push(num)\r\n    denominator += getStringFactorFromXval(num)\r\n  }\r\n\r\n  bottomXs.sort((a, b) => a - b);\r\n  const xIndex = getRandomNumber(0, bottomXs.length - 1)\r\n  const x = bottomXs[xIndex] // x to ask about\r\n\r\n  // get x values for denominator\r\n  // exclude asymptotic x to ask about so factors can't cancel\r\n  for (let i = 0; i < topFactors; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [x])\r\n    topXs.push(num)\r\n    numerator += getStringFactorFromXval(num)\r\n  }\r\n\r\n  // add coeffs to top and bottom\r\n  const top = Boolean(getRandomNumber(0, 1)) // false: top coeff negative, true: positive\r\n  const bottom = Boolean(getRandomNumber(0, 1)) // false: bottom coeff negative, true: positive\r\n  const topCoeff = top ? getRandomNumber(1, 7) : getRandomNumber(-7, -1)\r\n  const bottomCoeff = bottom ? getRandomNumber(1, 7) : getRandomNumber(-7, -1)\r\n  const factoredTop = `${topCoeff}${numerator}`\r\n  const factoredBottom = `${bottomCoeff}${denominator}`\r\n\r\n  // create numerator/denominator\r\n  numerator = sortPolynomialByDegree(nerdamer(`${factoredTop}`).expand())\r\n  denominator = sortPolynomialByDegree(nerdamer(`${factoredBottom}`).expand())\r\n\r\n  const expression = `f(x) = \\\\frac{${numerator}}{${denominator}}`\r\n  const leftLimit = `\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{-}}} f(x)`\r\n  const rightLimit = `\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{+}}} f(x)`\r\n\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>Which of the following statements is true about <Latex expression=\"f(x)\" />?</h3>\r\n    <Latex expression={expression} display={true} />\r\n  </>\r\n\r\n  const leftAns = Number(math.evaluate(`(${numerator})/(${denominator})`, { x: x - 0.1 }).toString())\r\n  const rightAns = Number(math.evaluate(`(${numerator})/(${denominator})`, { x: x + 0.1 }).toString())\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = \\\\infty`} /> and <Latex expression={`${rightLimit} = \\\\infty`} />\r\n      </>,\r\n      correct: leftAns > 0 && rightAns > 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = \\\\infty`} /> and <Latex expression={`${rightLimit} = -\\\\infty`} />\r\n      </>,\r\n      correct: leftAns > 0 && rightAns < 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = -\\\\infty`} /> and <Latex expression={`${rightLimit} = \\\\infty`} />\r\n      </>,\r\n      correct: leftAns < 0 && rightAns > 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = -\\\\infty`} /> and <Latex expression={`${rightLimit} = -\\\\infty`} />\r\n      </>,\r\n      correct: leftAns < 0 && rightAns < 0\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        <div>\r\n          We need to find <Latex expression={leftLimit} /> and <Latex expression={rightLimit} />\r\n        </div>\r\n        <div>\r\n          <Latex expression={expression} display={true} />\r\n        </div>\r\n        <div>\r\n          Plugging in <Latex expression={`x = ${x}`} />, you should get a denominator of 0, which means there's an asymptote at <Latex expression={`x = ${x}`} />\r\n        </div>\r\n      </div>\r\n    </>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        Since there's an asymptote, the limits must be either <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} />.\r\n      </div>\r\n      <div>\r\n        The first step to figuring out whether it's <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} /> is to factor <Latex expression=\"f(x)\" />.\r\n      </div>\r\n    </div>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        This should give you: \r\n      </div>\r\n        <Latex expression={`f(x) = \\\\frac{${factoredTop}}{${factoredBottom}}`} display={true} />\r\n      <div>\r\n        Now, remember that \"as <Latex expression=\"x\" /> approaches {x} from the left\" is another way of saying <Latex expression=\"x\" /> is extremely close to {x} on the left side. What is an <Latex expression=\"x\" /> value you could use to represent this?\r\n      </div>\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Using this <Latex expression=\"x\" /> value, plug this into the factored <Latex expression=\"f(x)\" /> equation. Remember that you don't have to find the actual value - you just need to find the <strong>sign</strong> of <Latex expression=\"f(x)\" /> at your <Latex expression=\"x\" /> value.\r\n      </div>\r\n    </>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        If your sign is negative, you know the answer is <Latex expression={`-\\\\infty`} />. If it's positive the answer is <Latex expression={`\\\\infty`} /> for <Latex expression={leftLimit} />.\r\n      </div>\r\n      <div>\r\n        Repeat this process for the right-sided limit, and that should bring you to the correct answer!\r\n      </div>\r\n    </div>\r\n  ]\r\n\r\n  return { type: 'mc', title, question, input: options, hints }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  return asymptoticLimitQuestion()\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["nerdamer","require","shuffleArray","array","i","length","j","Math","floor","random","_ref","getRandomNumber","min","max","getRandomWithExclusions","exclusions","validValues","includes","push","generateOrderedValues","n","increasing","extreme","arguments","undefined","increment","values","nextDiff","nextValue","sortPolynomialByDegree","polynomial","coefficients","coeffs","ans","each","e","toString","Number","concat","buildPolynomialFromCoeffs","String","isNaN","getCoeffsOfPolynomial","getRootsOfPolynomial","elements","symbol","r1","convertToDecimal","number","text","getStringFactorFromXval","xval","abs","convertArrayToObject","obj","currentObj","hasOwnProperty","findLCM","a","b","findGCD","x","y","generateLimitTableData","xVal","start","end","data","val","formatPolynomialToLatex","math","toTex","replaceAll","nerdamerFormatToLatex","expression","toTeX","bottomFactors","topFactors","bottomXs","topXs","denominator","numerator","num","sort","top","Boolean","bottom","topCoeff","bottomCoeff","factoredTop","factoredBottom","expand","leftLimit","rightLimit","title","_jsx","_Fragment","question","_jsxs","children","Latex","display","leftAns","rightAns","type","input","component","correct","hints","className","asymptoticLimitQuestion"],"sourceRoot":""}