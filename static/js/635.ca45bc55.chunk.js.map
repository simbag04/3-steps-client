{"version":3,"file":"static/js/635.ca45bc55.chunk.js","mappings":"4LAiMA,IA9K0B,SAAHA,GAAsD,IAAhDC,EAACD,EAADC,EAAGC,EAAIF,EAAJE,KAAMC,EAACH,EAADG,EAAGC,EAAMJ,EAANI,OAAQC,EAAML,EAANK,OAAQC,EAAMN,EAANM,OAAQC,EAAIP,EAAJO,KACzDC,GAASC,EAAAA,EAAAA,QAAO,MAyDtB,OAvDAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAOG,QAAS,CAClB,IACMC,EAAYL,EAClBM,GACEC,EAAAA,EAAAA,GAAkBF,EAAWA,EAAWJ,EAHzB,IAETO,EAAMF,EAANE,OAAQC,EAAKH,EAALG,MAAOC,EAAMJ,EAANI,OAAQC,EAAML,EAANK,OAGzBC,EAAMC,EAAAA,GAAUZ,EAAOG,SACvBU,EAAOpB,EAAEC,GAEToB,EAAOF,EAAAA,MACVG,GAAE,SAAAC,GAAC,OAAIP,EAAOO,EAAED,EAAE,IAClBpB,GAAE,SAAAqB,GAAC,OAAIN,EAAOM,EAAErB,EAAE,IAGrBgB,EAAIM,OAAO,QACRC,MAAM,CAAC,CAAEH,EAAG,EAAGpB,EAAGkB,GAAQ,CAAEE,EAAGrB,EAAMC,EAAGkB,KACxCM,KAAK,QAAS,UAAYrB,GAC1BqB,KAAK,eAAgB,GACrBC,MAAM,mBAAoB,GAC1BD,KAAK,IAAKL,GAEbH,EAAIM,OAAO,QACRC,MAAM,CAAC,CAAEH,EAAGrB,EAAMC,EAAGkB,GAAQ,CAAEE,EAAGrB,EAAMC,EAAG,KAC3CwB,KAAK,QAAS,UAAYtB,GAC1BsB,KAAK,eAAgB,GACrBC,MAAM,mBAAoB,GAC1BD,KAAK,IAAKL,GAEb,IAAAO,GAAqBC,EAAAA,EAAAA,IAAoBX,EAAKlB,EAAGe,EAAOD,EAAQ,KAAME,EAAQC,EAAQd,GAAS,GAAI,IAAI,GAAM,GAArG2B,EAAIF,EAAJE,KAAMC,EAAEH,EAAFG,IA8CpB,SAA6Bb,EAAKG,EAAMpB,EAAMmB,EAC5ChB,EAAQC,EAAQF,EAChBa,EAAQC,EAAQa,EAAMC,EAAIC,IAG1BC,EAAAA,EAAAA,IAAgBf,EAAKG,EAAMpB,EAAOiC,EAAAA,GAChCjC,EAAOkC,EAAAA,GACPC,EAAAA,GAAaA,EAAAA,GAAa,WAAYhC,IACxC6B,EAAAA,EAAAA,IAAgBf,EAAKG,EAAMpB,EAAOiC,EAAAA,GAChCjC,EAAOkC,EAAAA,GACPC,EAAAA,GAAaA,EAAAA,GAAa,WAAYhC,GAExCc,EAAIM,OAAO,UACRE,KAAK,QAAS,eAAiBtB,GAC/BsB,KAAK,KAAMV,EAAOf,IAClByB,KAAK,KAAMT,EAAO,IAClBS,KAAK,IAAK,IAEbO,EAAAA,EAAAA,IAAgBf,EAAKG,EAAMe,EAAAA,GACzBA,EAAAA,GACAhB,EAAOc,EAAAA,GAAUd,EAAOe,EAAAA,GAAY,WAAY9B,IAClD4B,EAAAA,EAAAA,IAAgBf,EAAKG,EAAMe,EAAAA,GACzBA,EAAAA,GACAhB,EAAOc,EAAAA,GAAUd,EAAOe,EAAAA,GAAY,WAAY9B,GAElDa,EAAIM,OAAO,UACRE,KAAK,QAAS,eAAiBrB,GAC/BqB,KAAK,KAAMV,EAAO,IAClBU,KAAK,KAAMT,EAAOG,IAClBM,KAAK,IAAK,GAGb,IAAMW,EAAgBP,EAAKQ,QAAO,SAACf,GAAC,OAAKA,EAAED,EAAIrB,CAAI,IAG7CsC,GAAUC,EAAAA,EAAAA,KAChBtB,EAAIM,OAAO,QACRC,MAAMY,GACNX,KAAK,YAAaa,GAClBb,KAAK,OAAQ,QACbA,KAAK,IAAKL,GAGb,IAAMoB,EAAetB,EAAAA,GAAU,eAADuB,OAAgBX,EAAE,OAAMY,OAChDC,EAAazB,EAAAA,GAAU,eAADuB,OAAgBH,EAAO,OAAMI,OAAOE,iBAE1DC,GAAWC,EAAAA,EAAAA,IACf7B,EAAKuB,EAAcG,EAAY5B,EAAQC,EAAQI,EAAMlB,GAAQ,GACzD6C,GAAYD,EAAAA,EAAAA,IAChB7B,EAAKuB,EAAcG,EAAY5B,EAAQC,EAAQI,EAAMlB,GAAQ,GAEzD8C,EAAcH,EAASI,SACvBC,EAAcH,EAAUE,SAKxBE,GAAaC,EAAAA,EAAAA,IAAaJ,EAAaE,EAAanC,EAAQC,GAC5DqC,GAAcC,EAAAA,EAAAA,IAAYH,EAAY,EAAIhB,EAAAA,IAGhDkB,EAAYpD,EAAIsD,MAAMF,EAAYpD,GAAK,GAAMoD,EAAYpD,EACrDoD,EAAYpD,GAAK,EACnBoD,EAAYpD,EAAIuD,KAAKC,KAAK,GAAKJ,EAAYpD,GAE3CoD,EAAYpD,EAAIuD,KAAKE,IAAI,GAAKL,EAAYpD,GAGxCoD,EAAYhC,GAAK,EACnBgC,EAAYhC,EAAImC,KAAKC,KAAK,IAAKJ,EAAYhC,GAE3CgC,EAAYhC,EAAImC,KAAKE,IAAI,IAAKL,EAAYhC,GAIvCrB,GAAQ,GAAKA,GAAQ,GAAMqD,EAAYhC,EAAI,IAC9CgC,EAAYhC,GAAsB,EAAjBgC,EAAYhC,EAC7BgC,EAAYpD,GAAqB,EAAjBoD,EAAYpD,GAG1BD,IAAS,GAAKA,EAAO,GAAKqD,EAAYhC,EAAI,IAC5CgC,EAAYhC,GAAsB,EAAjBgC,EAAYhC,EAC7BgC,EAAYpD,GAAqB,EAAjBoD,EAAYpD,GAI9BgB,EAAIM,OAAO,QACRE,KAAK,IAAKV,EAAOf,EAAOqD,EAAYhC,IACpCI,KAAK,IAAKT,EAAOG,EAAOkC,EAAYpD,IACpCwB,KAAK,cAAe,UACpBA,KAAK,qBAAsB,UAC3BA,KAAK,QAAS,QACdC,MAAM,YAAaK,GACnB4B,KAAK,IAADlB,OAAKzC,EAAI,MAAAyC,OAAKe,KAAKI,MAAMzC,GAAK,KACvC,CA3IM0C,CAAoB5C,EAAKG,EAAMpB,EAAMmB,EACnChB,EAAQC,EAAQF,EAChBa,EAAQC,EAAQa,EAAMC,EA9BP,IAiCjBb,EACGM,OAAO,UACPE,KAAK,QAAS,oBAAsBvB,GACpCuB,KAAK,KAAMV,EAAOf,IAClByB,KAAK,KAAMT,EAAOG,IAClBM,KAAK,IAAK,GAGH,OAANxB,GACFgB,EACGM,OAAO,UACPE,KAAK,QAAS,eAAiBvB,GAC/BuB,KAAK,KAAMV,EAAOf,IAClByB,KAAK,KAAMT,EAAOf,IAClBwB,KAAK,IAAK,EAEjB,CAEF,GAAG,CAACnB,EAAQP,EAAGG,EAAQC,EAAQH,EAAMC,EAAGG,EAAQC,KAG9CyD,EAAAA,EAAAA,KAAA,OAAKC,IAAKzD,GAEd,C,kGCrEa0D,EAAsC,SAAHlE,GAAgD,IAA1CmE,EAAKnE,EAALmE,MAAOC,EAASpE,EAAToE,UAAWC,EAAOrE,EAAPqE,QAASC,EAAOtE,EAAPsE,QAC/EC,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAgBhC,OAfA/D,EAAAA,EAAAA,YAAU,WACR,GAAI0D,EAAW,CAEb,IADA,IAAIS,EAAC,iBACIC,EAAI,EAAGA,EAAIV,EAAUW,OAAQD,IACpCD,EAAIA,EAAIT,EAAUU,GAAG7E,EAAI,IACzB4E,GAAQT,EAAUU,GAAGE,OACjBF,IAAMV,EAAUW,OAAS,IAC3BF,GAAQ,YAIZD,EADAC,GAAQ,eAEV,CACF,GAAE,CAACT,KAGDJ,EAAAA,EAAAA,KAAAiB,EAAAA,SAAA,CAAAC,UACElB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAASA,GAAoB,GAAIK,WAAU,GAAAhC,OAAKwB,EAAK,GAAAxB,OAAMwB,EAAK,OAAQ,GAAE,KAAAxB,OAAIgC,GAAcN,QAASA,KAGlH,C,wJCjCA,IAAMlC,EAAWiD,OAAOC,WAAa,IAAM,IAAM,EAC3CjD,EAAagD,OAAOC,WAAa,IAAM,GAAM,GAC7ChD,EAAc+C,OAAOC,WAAa,IAAM,GAAM,GAC9CC,EAAaF,OAAOC,WAAa,IAAM,IAAM,IAC7CE,EAAS,CAAC,MAAO,QAAS,OAAQ,SAAU,S,yRCQ5CC,EAAuB,SAACvF,EAAG0D,EAAKC,GAGpC,IAH6D,IAApB6B,EAAOC,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAC/C3D,EAAO,GAEF+C,EAAInB,EAAKmB,GAAKlB,EAAKkB,GAAKW,EAAS,CACxC,IAAMlE,EAAIuD,EACJ3E,EAAIF,EAAE6E,GACZ/C,EAAK6D,KAAK,CAAErE,EAAAA,EAAGpB,EAAAA,GACjB,CAEA,OAAO4B,CACT,EAoBMD,EAAsB,SAACX,EAAKlB,EAAGe,EAAOD,EAAQ8E,EAAO5E,EAAQC,EAAQoD,EAASX,EAAKC,EAAKkC,EAAWC,EAAYC,EAAMP,GACzH,IAAI1D,EAAOyD,EAAqBvF,EAAG0D,EAAKC,EAAK6B,GAQ7C,GALA1D,EAAOA,EAAKQ,QAAO,SAACf,GAAC,OAAKA,EAAED,EAAImC,KAAKC,IAAI1C,EAAOgF,OAAO,GAAIrC,IACzDpC,EAAED,EAAImC,KAAKE,IAAI3C,EAAOgF,OAAOjF,GAAQ2C,IACrCnC,EAAErB,EAAIe,EAAO+E,OAAOlF,IACpBS,EAAErB,EAAIe,EAAO+E,OAAO,EAAE,IAEX,eAATD,EAAuB,CAEzB,GAAIrC,EAAM1C,EAAOgF,OAAO,GAAI,CAE1B,IACIzE,EAAI0E,EAAkBjG,EADhB8B,EAAK,GAAG5B,EAAI,EAAIe,EAAO+E,OAAO,GAAK/E,EAAO+E,OAAOlF,GAC3B4C,EAAM,KAAS5B,EAAK,GAAGR,EAAG,KACtDC,GAAGO,EAAKoE,QAAQ,CAAE5E,EAAGC,EAAGrB,EAAGF,EAAEuB,IACnC,CAGA,GAAIoC,EAAM3C,EAAOgF,OAAOjF,GAAQ,CAE9B,IACIQ,EAAI0E,EAAkBjG,EADhB8B,EAAKA,EAAKgD,OAAS,GAAG5E,EAAI,EAAIe,EAAO+E,OAAO,GAAK/E,EAAO+E,OAAOlF,GACzCgB,EAAKA,EAAKgD,OAAS,GAAGxD,EAAGqC,EAAM,KAAS,KACpEpC,GAAGO,EAAK6D,KAAK,CAAErE,EAAGC,EAAGrB,EAAGF,EAAEuB,IAChC,CACF,CAEA,IAAMF,EAAOF,EAAAA,MACVG,GAAE,SAAAC,GAAC,OAAIP,EAAOO,EAAED,EAAE,IAClBpB,GAAE,SAAAqB,GAAC,OAAIN,EAAOM,EAAErB,EAAE,IAIfiG,EAAI,GAAAzD,QAAMF,EAAAA,EAAAA,KAAQ,kBACxB4D,EAAkBD,EAAMjF,EAFL,EAEsB0E,EAAOvB,GAGhD,IAAMtC,GAAKS,EAAAA,EAAAA,KAeX,OAdAtB,EAAIM,OAAO,QACRC,MAAMK,GACNJ,KAAK,YAAaK,GAClBL,KAAK,QAAS,UAAY2C,GAC1B3C,KAAK,OAAQ,QACbA,KAAK,SAAUkE,GACflE,KAAK,eAAgB,GACrBA,KAAK,aAAcoE,EAAU,QAAApD,OAAWyD,EAAI,KAAM,MAClDzE,KAAK,eAAgBmE,EAAS,QAAAnD,OAAWyD,EAAI,KAAM,MACnDzE,KAAK,IAAKL,GAEbH,EAAImF,OAAO,cAAcC,QACzBpF,EAAImF,OAAO,eAAeC,QAEnB,CAAExE,KAAAA,EAAMC,GAAAA,EACjB,EAWA,SAASkE,EAAkBM,EAAMrG,EAAGsG,EAAMC,EAAMC,GAK9C,IAJA,IAAIC,EAAIH,EACJI,EAAIH,EAGDG,EAAID,EAAI,MAAS,CACtB,IAAIE,GAAQF,EAAIC,GAAK,EACjBE,EAAOP,EAAKM,GAEhB,GAAI3G,EAAI,GAAK4G,GAAQ5G,GAAKA,EAAI4G,EAAOJ,EACnC,OAAOG,EAET,GAAI3G,EAAI,GAAK4G,GAAQ5G,GAAK4G,EAAO5G,EAAIwG,EACnC,OAAOG,EAILN,EAAKC,GAAQD,EAAKE,IAASK,EAAO5G,EAEpCyG,EAAIE,EACKN,EAAKC,GAAQD,EAAKE,IAGlBF,EAAKC,GAAQD,EAAKE,IAASK,EAAO5G,EAD3C0G,EAAIC,EAIKN,EAAKC,GAAQD,EAAKE,KAE3BE,EAAIE,EAER,CAEA,OAAQF,EAAIC,GAAK,CACnB,CAYA,IAAMG,EAA+B,SAAC7F,EAAKiD,EAAWpD,EAAOD,EAAQE,EAAQC,GAG3E,IAFA,IAAM+F,EAAY,GAETnC,EAAI,EAAGA,EAAIV,EAAUW,OAAQD,IAAK,CAEzC,IAAM0B,EAAOpC,EAAUU,GACvBjD,EAAqBC,EAAoBX,EAAKqF,EAAKvG,EAAGe,EAAOD,EAAQ,KAAME,EAAQC,EAAQsF,EAAKlC,QAASkC,EAAK7C,IAAK6C,EAAK5C,IAAK4C,EAAKV,UAAWU,EAAKT,WAAYS,EAAKR,KAAMQ,EAAKf,SAAtK1D,EAAIF,EAAJE,KAAMC,EAAEH,EAAFG,GAEdiF,EAAUA,EAAUlC,QAAU,CAAEhD,KAAAA,EAAMC,GAAAA,GAGlCwE,EAAKU,YACP/F,EACGM,OAAO,UACPE,KAAK,QAAS,gBAAkB6E,EAAKW,YAAc,GAAK,SAAWX,EAAKlC,SACxE3C,KAAK,KAAMV,EAAOuF,EAAK7C,MACvBhC,KAAK,KAAMT,EAAOsF,EAAKvG,EAAEuG,EAAK7C,OAC9BhC,KAAK,IAAK,GAGX6E,EAAKY,aACPjG,EACGM,OAAO,UACPE,KAAK,QAAS,gBAAkB6E,EAAKa,aAAe,GAAK,SAAWb,EAAKlC,SACzE3C,KAAK,KAAMV,EAAOuF,EAAK5C,MACvBjC,KAAK,KAAMT,EAAOsF,EAAKvG,EAAEuG,EAAK5C,OAC9BjC,KAAK,IAAK,EAEjB,CAEA,MAAO,CAAEsF,UAAAA,EACX,EASMK,EAAmB,SAACnG,EAAKoG,EAAQtG,EAAQC,GAC7C,IAAK,IAAI4D,EAAI,EAAGA,EAAIyC,EAAOxC,OAAQD,IACjC3D,EACCM,OAAO,UACPE,KAAK,QAAS,eAAiB4F,EAAOzC,GAAGR,SACzC3C,KAAK,KAAMV,EAAOsG,EAAOzC,GAAGvD,IAC5BI,KAAK,KAAMT,EAAOqG,EAAOzC,GAAG3E,IAC5BwB,KAAK,IAAK,EAGf,EAcMb,EAAoB,SAACE,EAAOD,EAAQP,EAAQyB,GAA4D,IAAlDuF,EAAI9B,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,IAAI,GAAI+B,EAAI/B,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAIgC,EAAIhC,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,IAAI,GAAIiC,EAAIjC,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAE9FkC,EAAQ5G,EAAQ,EADL,GAEX6E,EAAQ,UAGR1E,EAAMC,EAAAA,GAAUZ,EAAOG,SAC7BQ,EAAI0G,UAAU,KAAKC,SAEnB3G,EACGQ,KAAK,QAASX,GACdW,KAAK,SAAUZ,GAGlB,IAAME,EAASG,EAAAA,MACZ4D,OAAO,CAACwC,EAAMC,IACdM,MAAM,CAACH,EAAM5G,EAAQ4G,IAElB1G,EAASE,EAAAA,MACZ4D,OAAO,CAAC0C,EAAMC,IACdI,MAAM,EAAE,EAAIH,EAAO7G,EAAQ6G,IAGxBI,EAAY7G,EAAIM,OAAO,KAC1BE,KAAK,QAAS,cAEXsG,EAAW9G,EAAIM,OAAO,KACzBE,KAAK,QAAS,aAEXuG,EAAQ/G,EAAIM,OAAO,KACtBE,KAAK,QAAS,eAEXwG,EAAQhH,EAAIM,OAAO,KACtBE,KAAK,QAAS,eAMXyG,EAAQhH,EAAAA,IAASiH,IAAeC,KAAI,SAAC9G,EAAGsD,GAAC,OAAK0C,EAAQ1C,IAAM2C,EAAOD,GAHvD,GAG0E,IACtFe,EAASnH,EAAAA,IAASoH,IAAgBF,KAAI,SAAC9G,EAAGsD,GAAC,OAAK0C,EAAQ1C,IAAM2C,EAAOD,GAHxDa,GAG4E,IAE/FD,EAAMK,SAAQ,SAAAC,GACZR,EAAMzG,OAAO,QACVE,KAAK,KAAMV,EAAOyH,IAClB/G,KAAK,KAAMV,EAAOyH,IAClB/G,KAAK,KAAM,GACXA,KAAK,KAAMZ,GACXY,KAAK,SAAU,YACpB,IAGA4G,EAAOE,SAAQ,SAAAC,GACbV,EAAUvG,OAAO,QACdE,KAAK,KAAMV,EAAOyH,IAClB/G,KAAK,KAAMV,EAAOyH,IAClB/G,KAAK,KAAMT,EAAO,GAAK,GACvBS,KAAK,KAAMT,EAAO,GAAK,GACvBS,KAAK,SAAmB,IAAT+G,EAAa,OAAS7C,GACrClE,KAAK,eAAgB,GAExBsG,EAASxG,OAAO,QACbE,KAAK,IAAKV,EAAOyH,IAASA,EAAO,EAAI,KAAO,MAC5C/G,KAAK,IAAKT,EAAO,GAAK,GACtBS,KAAK,qBAAsB,WAC3BA,KAAK,cAAe+G,EAAO,EAAI,QAAU,OACzC9G,MAAM,QAAS,SACfA,MAAM,YAAsB,IAAT8G,EAAa,EAAIzG,EAAW,GAC/CN,KAAK,cAAe,QACpBkC,KAAKH,KAAKI,MAAa,IAAP4E,GAAc,IACnC,IAEAN,EAAMK,SAAQ,SAAAC,GACZP,EAAM1G,OAAO,QACVE,KAAK,QAAS,eACdA,KAAK,KAAM,GACXA,KAAK,KAAMX,GACXW,KAAK,KAAMT,EAAOwH,IAClB/G,KAAK,KAAMT,EAAOwH,IAClB/G,KAAK,SAAU,YACpB,IAGA4G,EAAOE,SAAQ,SAAAC,GACbV,EAAUvG,OAAO,QACdE,KAAK,KAAMV,EAAO,GAAK,GACvBU,KAAK,KAAMV,EAAO,GAAK,GACvBU,KAAK,KAAMT,EAAOwH,IAClB/G,KAAK,KAAMT,EAAOwH,IAClB/G,KAAK,SAAmB,IAAT+G,EAAa,OAAS7C,GACrClE,KAAK,eAAgB,GAExBsG,EAASxG,OAAO,QACbE,KAAK,IAAKV,EAAO,GAAK,GACtBU,KAAK,IAAKT,EAAOwH,IAASA,EAAO,GAAK,IAAM,MAC5C/G,KAAK,qBAAsB+G,EAAO,EAAI,WAAa,WACnD/G,KAAK,cAAe,OACpBC,MAAM,QAAS,SACfA,MAAM,YAAsB,IAAT8G,EAAa,EAAIzG,EAAW,GAC/CN,KAAK,cAAe,QACpBkC,KAAKH,KAAKI,MAAa,IAAP4E,GAAc,IACnC,IAGA,IAAMtC,EAAO,aAuBb,OAtBAC,EAAkBD,EAAMjF,EArGX,EAqGsB0E,GAEnC1E,EAAIM,OAAO,QACRE,KAAK,KAAM,GACXA,KAAK,KAAMX,GACXW,KAAK,KAAMT,EAAO,IAClBS,KAAK,KAAMT,EAAO,IAClBS,KAAK,SAAUkE,GACflE,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADgB,OAAUyD,EAAI,MAC/BzE,KAAK,eAAe,QAADgB,OAAUyD,EAAI,MAEpCjF,EAAIM,OAAO,QACRE,KAAK,KAAMV,EAAO,IAClBU,KAAK,KAAMV,EAAO,IAClBU,KAAK,KAAMZ,GACXY,KAAK,KAAM,GACXA,KAAK,SAAUkE,GACflE,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADgB,OAAUyD,EAAI,MAC/BzE,KAAK,eAAe,QAADgB,OAAUyD,EAAI,MAE7B,CAAEpF,MAAAA,EAAOD,OAAAA,EAAQE,OAAAA,EAAQC,OAAAA,EAClC,EAUA,SAASmF,EAAkBD,EAAMjF,EAAKZ,EAAMsF,EAAOvB,GACjDnD,EAAIM,OAAO,QAAQA,OAAO,UACvBE,KAAK,KAAMyE,GACXzE,KAAK,QAAS,QAAU2C,GACxB3C,KAAK,OAAQpB,GACboB,KAAK,OAAQpB,EAAO,GACpBoB,KAAK,cAAepB,GACpBoB,KAAK,eAAgBpB,GACrBoB,KAAK,SAAU,sBACfA,KAAK,OAAQkE,GACbpE,OAAO,QACPE,KAAK,IAAI,SAADgB,OAAWpC,EAAI,MAAAoC,OAAY,EAAPpC,EAAQ,KAAAoC,OAAIpC,EAAO,EAAC,QACrD,CAaA,SAAS2B,EAAgBf,EAAKG,EAAMqH,EAAIC,EAAIC,EAAIC,EAAI1C,EAAM9B,GAEpDlD,EAAAA,GAAU,IAADuB,OAAKyD,IAAQ2C,SACxB1C,EAAkBD,EAAMjF,EAAK,EAAG,KAAMmD,GAIxCnD,EAAIM,OAAO,QACRC,MAAM,CAAC,CAAEH,EAAGoH,EAAIxI,EAAG0I,GAAM,CAAEtH,EAAGqH,EAAIzI,EAAG2I,KACrCnH,KAAK,QAAS,UAAY2C,GAC1B3C,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADgB,OAAUyD,EAAI,MAC/BzE,KAAK,IAAKL,EACf,CAoBA,SAASgC,EAAa0F,EAAKC,EAAOhI,EAAQC,GAKxC,MAAO,CAAEgI,KAJIjI,EAAOgF,OAAO+C,EAAIzH,GAIhB4H,OAHAlI,EAAOgF,OAAOgD,EAAM1H,GAGZ6H,KAFVlI,EAAO+E,OAAO+C,EAAI7I,GAEFkJ,OADdnI,EAAO+E,OAAOgD,EAAM9I,GAErC,CAkBA,SAASqD,EAAY+D,EAAQ+B,GAC3B,IAAIC,EAZN,SAAmBhC,GAEjB,OADY,GAAKA,EAAO2B,KAAO3B,EAAO4B,SAAY5B,EAAO6B,KAAO7B,EAAO8B,OAEzE,CAScG,CAAUjC,GAChBkC,EAtCR,SAAiClI,EAAGpB,GAClC,OAAOuD,KAAKgG,KAAKhG,KAAAiG,IAAEpI,EAAM,GAACmC,KAAAiG,IAAMxJ,EAAM,GACxC,CAoCcyJ,CAAwB,EAAGL,GACnCM,GAAS,EAAIP,EAAaG,EAK9B,OAJIF,EAAQ,IAAGM,IAAU,GAIlB,CAAEtI,EAHCsI,EAGE1J,EAFD0J,EAASN,EAGtB,CAiBA,SAASvG,EAAwB7B,EAAKuB,EAAcG,EAAY5B,EAAQC,EAAQI,EAAMlB,EAAQ0J,EAAOC,GAGnG,IAAIC,EAAgB/I,EAAOkB,EAAAA,IAAYlB,EAAO,GAC9C+I,EAAgBF,EAAQE,GAAkB,EAAIA,EAC9C,IAAIC,EAAkBhJ,EAAOmB,EAAAA,IAAcnB,EAAO,GAClDgJ,EAAkBH,EAAQG,GAAoB,EAAIA,EAGlD,IAAM9G,EAAWT,EAAawH,iBAAiBrH,EAAamH,GACtDG,EAAazH,EAAawH,iBAAiBrH,EAAaoH,GACxDG,EAAY9G,EAAaH,EAAUgH,EAAYlJ,EAAQC,GACvDmJ,EAAa7G,EAAY4G,EAAW/H,EAAAA,IAW1C,OATIoB,MAAM4G,EAAWlK,KAAIkK,EAAWlK,EAAIkC,EAAAA,IAExCH,EAAgBf,EAAKG,EACnB8I,EAAUlB,KAAOmB,EAAW9I,EAC5B6I,EAAUjB,OAASkB,EAAW9I,EAC9B6I,EAAUhB,KAAOiB,EAAWlK,EAC5BiK,EAAUf,OAASgB,EAAWlK,EAC9B4J,GAA0B,WAAY3J,GAEjC,CAAE+J,WAAAA,EAAYhH,SAAAA,EACvB,C,6ICzdMmH,EAAW,WACf,OACEC,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,0DACmDlB,EAAAA,EAAAA,KAAA,UAAAkB,SAAQ,SAAa,yBAAqBlB,EAAAA,EAAAA,KAAA,UAAAkB,SAAQ,OAAW,iBAGzH,EAEMsF,EAAW,WACf,OACED,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,0BACmBlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,aAAgBL,QAAS,KAAMmG,QAAQ,KAC9EzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,cAAiBL,QAAS,KAAMmG,QAAQ,KACzDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,OAAUL,QAAS,KAAMmG,QAAQ,KAClDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAa8F,QAAQ,KACtCzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,QAAWL,QAAS,KAAMmG,QAAQ,IAAQ,MAGjE,EAEMC,EAAW,WACf,OACEH,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,wBAEHlB,EAAAA,EAAAA,KAAA,QAAM2G,UAAU,KAAIzF,SAAC,WAAa,OAClClB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,OAAUL,QAAS,KAAMmG,QAAQ,KAClDF,EAAAA,EAAAA,MAAA,QAAMI,UAAU,KAAIzF,SAAA,CAAC,OACnBlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAa8F,QAAQ,IAAQ,cAE9CzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAa8F,QAAQ,OACjC,OACJzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAQ,KAAKK,WAAU,UAAa8F,QAAQ,IAAQ,OAGpE,EAEMG,EAAW,WACf,OACEL,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,sDAEHlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,aAAgBL,QAAS,KAAMmG,QAAQ,KACxDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,cAAiBL,QAAS,KAAMmG,QAAQ,KACzDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,MAASL,QAAS,KAAMmG,QAAQ,KACjDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAa8F,QAAQ,KACtCzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,QAAWL,QAAS,KAAMmG,QAAQ,IAAQ,MAGjE,EAGMI,EAAW,WACf,IACMjI,EAAOkI,EAAAA,GADM,OAEb7K,EAAI,SAAAsB,GAAC,OAAIqB,EAAKmI,SAAS,CAAExJ,EAAAA,GAAK,EAMpC,OACEgJ,EAAAA,EAAAA,MAAAtF,EAAAA,SAAA,CAAAC,SAAA,EACEqF,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,kDAEHlB,EAAAA,EAAAA,KAAA,QAAM2G,UAAU,KAAIzF,SAAC,eAAiB,kBACxBlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAS,KAAMK,WAAU,GAAAhC,OAAKC,EAAKoI,SAAWP,QAAQ,IAAQ,gCAA4BzG,EAAAA,EAAAA,KAAA,QAAM2G,UAAU,KAAIzF,SAAC,MAAQ,8CAA0ClB,EAAAA,EAAAA,KAAA,QAAM2G,UAAU,KAAIzF,SAAC,MAAQ,QAErNqF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uBAAsBzF,SAAA,EACnCqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,CAAI,aAASlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,GAAAhC,OAAKC,EAAKoI,SAAWP,QAAQ,QAC3DzG,EAAAA,EAAAA,KAACiH,EAAAA,EAAiB,CAAChL,EAAGA,EAAGC,KAdlB,EAc8BC,EAAGF,EAdjC,GAc0CG,OAbxC,KAawDC,OAZxD,KAYwEC,OAXxE,KAWwFC,KAAM+E,EAAAA,UAI/G,EAEM4F,EAAW,WACf,OACEX,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,qDAC8ClB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAS,KAAMK,WAAU,aAAgB8F,QAAQ,KAAQzG,EAAAA,EAAAA,KAAA,UAAAkB,SAAQ,SAAa,KAAClB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAS,KAAMK,WAAU,QAAW8F,QAAQ,IAAQ,QAAIzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAS,KAAMK,WAAU,IAAO8F,QAAQ,IAAQ,MAGnQ,EAEMU,EAAW,WACf,IACMvI,EAAOkI,EAAAA,GADM,OAWnB,OACEP,EAAAA,EAAAA,MAAAtF,EAAAA,SAAA,CAAAC,SAAA,EACElB,EAAAA,EAAAA,KAAA,OAAAkB,SAAK,iDAELlB,EAAAA,EAAAA,KAAA,OAAAkB,UACElB,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAACC,MAAM,OAAOC,UATkB,CAC9C,CAAEnE,EAAE,MAAQ+E,OAAO,aACnB,CAAE/E,EAAE,IAAM+E,OAAO,UAO0CX,SAAS,OAElEkG,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uBAAsBzF,SAAA,EACnCqF,EAAAA,EAAAA,MAAA,MAAArF,SAAA,CAAI,aAASlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,OAAU8F,QAAQ,QAChDzG,EAAAA,EAAAA,KAACiH,EAAAA,EAAiB,CAAChL,EAlBf,SAAAsB,GAAC,OAAIqB,EAAKmI,SAAS,CAAExJ,EAAAA,GAAK,EAkBLrB,KAjBlB,EAiB8BC,EAAG,EAAGC,OAhBlC,KAgBkDC,OAflD,KAekEC,OAdlE,KAckFC,KAAM+E,EAAAA,UAIzG,EAEM8F,EAAW,WACf,OACEb,EAAAA,EAAAA,MAAA,OAAArF,SAAA,CAAK,iBAEHlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,aAAgBL,QAAS,KAAMmG,QAAQ,KACxDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,cAAiBL,QAAS,KAAMmG,QAAQ,KACzDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,MAASL,QAAS,KAAMmG,QAAQ,KACjDzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAa8F,QAAQ,KACtCzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,UAAaL,QAAS,KAAMmG,QAAQ,IAAQ,OAC1DzG,EAAAA,EAAAA,KAAA,UAAAkB,SAAQ,YAAelB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACR,WAAU,IAAOL,QAAO,KAAQmG,QAAQ,IAAS,cAC1EzG,EAAAA,EAAAA,KAAA,UAAAkB,SAAQ,WAChBlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAQ,KAAKK,WAAU,QAAW8F,QAAQ,IAAS,KAC1DzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAQ,KAAKK,WAAU,UAAa8F,QAAQ,IAAQ,qCAAiCzG,EAAAA,EAAAA,KAACmB,EAAAA,EAAK,CAACb,QAAQ,KAAKK,WAAU,IAAO8F,QAAQ,IAAQ,MAGvJ,ECvHA,EAXqB,EACnBzG,EAAAA,EAAAA,KAACsG,EAAQ,KACTtG,EAAAA,EAAAA,KAACwG,EAAQ,KACTxG,EAAAA,EAAAA,KAAC0G,EAAQ,KACT1G,EAAAA,EAAAA,KAAC4G,EAAQ,KACT5G,EAAAA,EAAAA,KAAC6G,EAAQ,KACT7G,EAAAA,EAAAA,KAACkH,EAAQ,KACTlH,EAAAA,EAAAA,KAACmH,EAAQ,KACTnH,EAAAA,EAAAA,KAACoH,EAAQ,I","sources":["components/content-components/graphs/LimitExampleGraph.js","components/latex/Piecewise.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/01-understanding-limits/Sections.tsx","topics/01-limits/01-understanding-limits/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates graph of function f showing limit at xval\r\n * Parameters: \r\n *  - f : function to generate graph of\r\n *  - xval: xvalue at which to show limit\r\n *  - y: y of function - could be different from f(xval) if there's a hole, or null if f is undefined at xval\r\n *  - fColor: classes to add to function graph\r\n *  - xcolor: classes to add to x limit arrows\r\n *  - ycolor: classes to add to y limit arrows\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createFunctionGraph, createBlankCanvas, createFunctionLimitLine, createLimitLine, convertScale, findOffsets } from \"../../../helpers/graph-helpers\";\r\nimport { AXIS_OFFSET, CLOSE_DIST, FAR_DIST } from \"../../../helpers/constants\";\r\nimport * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../../styles/graph.css'\r\n\r\nconst LimitExampleGraph = ({ f, xval, y, fColor, xColor, yColor, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const textSize = 11;\r\n      const graphSize = size;\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(graphSize, graphSize, svgRef, textSize);\r\n\r\n      const svg = d3.select(svgRef.current)\r\n      const yval = f(xval);\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      // dashed lines going to x and y axes\r\n      svg.append('path')\r\n        .datum([{ x: 0, y: yval }, { x: xval, y: yval }])\r\n        .attr('class', 'stroke ' + yColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      svg.append('path')\r\n        .datum([{ x: xval, y: yval }, { x: xval, y: 0 }])\r\n        .attr('class', 'stroke ' + xColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      const { data, id } = createFunctionGraph(svg, f, width, height, null, xScale, yScale, fColor, -11, 11, true, true);\r\n      createAllLimitLines(svg, line, xval, yval,\r\n        xColor, yColor, fColor,\r\n        xScale, yScale, data, id, textSize);\r\n\r\n      // hole at xval, yval\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'hole fill stroke ' + fColor)\r\n        .attr('cx', xScale(xval))\r\n        .attr('cy', yScale(yval))\r\n        .attr('r', 3)\r\n\r\n      // point at xval, y\r\n      if (y !== null) {\r\n        svg\r\n          .append('circle')\r\n          .attr('class', 'fill stroke ' + fColor)\r\n          .attr('cx', xScale(xval))\r\n          .attr('cy', yScale(y))\r\n          .attr('r', 3)\r\n      }\r\n    }\r\n\r\n  }, [svgRef, f, fColor, xColor, xval, y, yColor, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg to append lmit lines to\r\n * @param {function} line functionthat creates 'd' attribute in svg path\r\n * @param {number} xval xvalue of point where limit is being generated\r\n * @param {number} yval yvalue of point\r\n * @param {string} xColor classes to be added to x limit lines\r\n * @param {string} yColor classes to be added to y limit lines\r\n * @param {string} fColor classes to be added to f limit lines\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {Array} data array of data for original function\r\n * @param {id} id id of function path\r\n * @param {number} textSize text size of label\r\n */\r\nfunction createAllLimitLines(svg, line, xval, yval,\r\n  xColor, yColor, fColor,\r\n  xScale, yScale, data, id, textSize) {\r\n\r\n  // horizontal and vertical arrows\r\n  createLimitLine(svg, line, xval - FAR_DIST,\r\n    xval - CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n  createLimitLine(svg, line, xval + FAR_DIST,\r\n    xval + CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + xColor)\r\n    .attr('cx', xScale(xval))\r\n    .attr('cy', yScale(0))\r\n    .attr('r', 1)\r\n\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval - FAR_DIST, yval - CLOSE_DIST, 'y-limits', yColor)\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval + FAR_DIST, yval + CLOSE_DIST, 'y-limits', yColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + yColor)\r\n    .attr('cx', xScale(0))\r\n    .attr('cy', yScale(yval))\r\n    .attr('r', 1)\r\n\r\n  // function arrows\r\n  const dataUpToPoint = data.filter((d) => d.x < xval);\r\n\r\n  // create path up to point to get its length\r\n  const pointId = uuidv4();\r\n  svg.append('path')\r\n    .datum(dataUpToPoint)\r\n    .attr('data-uuid', pointId)\r\n    .attr('fill', 'none')\r\n    .attr('d', line);\r\n\r\n  // get path length and use that to find points at which to genrate limit arrows\r\n  const functionLine = d3.select(`[data-uuid=\"${id}\"]`).node();\r\n  const pathLength = d3.select(`[data-uuid=\"${pointId}\"]`).node().getTotalLength();\r\n\r\n  const leftLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, false);\r\n  const rightLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, true);\r\n\r\n  const farPointOne = leftLine.farPoint;\r\n  const farPointTwo = rightLine.farPoint;\r\n\r\n  // text at point\r\n\r\n  // get offset values\r\n  const pointsText = convertScale(farPointOne, farPointTwo, xScale, yScale);\r\n  const offsetsText = findOffsets(pointsText, 3 * AXIS_OFFSET);\r\n\r\n  // adjust offset values by ensuring they are a minimum distance away from line\r\n  offsetsText.y = isNaN(offsetsText.y) ? 0.7 : offsetsText.y;\r\n  if (offsetsText.y <= 0) {\r\n    offsetsText.y = Math.min(-0.5, offsetsText.y);\r\n  } else {\r\n    offsetsText.y = Math.max(0.5, offsetsText.y);\r\n  }\r\n\r\n  if (offsetsText.x <= 0) {\r\n    offsetsText.x = Math.min(-1.2, offsetsText.x);\r\n  } else {\r\n    offsetsText.x = Math.max(1.2, offsetsText.x);\r\n  }\r\n\r\n  // if text is too close to axes, move it on the other side of the line\r\n  if ((xval <= 3 && xval >= 0) && offsetsText.x < 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  if (xval >= -3 && xval < 0 && offsetsText.x > 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  // add text\r\n  svg.append('text')\r\n    .attr('x', xScale(xval + offsetsText.x))\r\n    .attr('y', yScale(yval + offsetsText.y))\r\n    .attr('text-anchor', 'middle')\r\n    .attr('alignment-baseline', 'middle')\r\n    .attr('class', 'text')\r\n    .style('font-size', textSize)\r\n    .text(`(${xval}, ${Math.round(yval)})`)\r\n}\r\n\r\nexport default LimitExampleGraph","import React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string,\r\n  functions: PiecewiseFunction[],\r\n  display?: string | boolean,\r\n  classes?: string\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import LimitExampleGraph from \"../../../components/content-components/graphs/LimitExampleGraph\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport * as math from 'mathjs'\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\"\r\nimport React from \"react\"\r\nimport { PiecewiseFunction } from \"../../../types/PiecewiseFunction\"\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\n\r\n/**\r\n * All content for this topic's learn section\r\n * all these components represent content for the sections\r\n */\r\nconst Section1 = () => {\r\n  return (\r\n    <div>\r\n      In Calculus, a limit describes how a function behaves <strong>near</strong> a point, instead of <strong>at</strong> that point.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section2 = () => {\r\n  return (\r\n    <div>\r\n      A limit is written as <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to a}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`f(x)`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ L `} classes={'c4'} inline={true} />.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section3 = () => {\r\n  return (\r\n    <div>\r\n      This is read as \"the\r\n      <span className=\"c1\"> limit</span> of\r\n      <Latex expression={`f(x)`} classes={'c3'} inline={true} />\r\n      <span className=\"c2\"> as\r\n        <Latex expression={`\\\\ x\\\\ `} inline={true} />\r\n        approaches\r\n        <Latex expression={`\\\\ a\\\\ `} inline={true} />\r\n      </span>\r\n      is <Latex classes=\"c4\" expression={`\\\\ L\\\\ `} inline={true} />\".\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section4 = () => {\r\n  return (\r\n    <div>\r\n      To understand this, let’s look at an example:\r\n      <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to 2}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`x^2`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ 4 `} classes={'c4'} inline={true} />.\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Section5 = () => {\r\n  const expression = 'x^2';\r\n  const node = math.parse(expression);\r\n  const f = x => node.evaluate({ x });\r\n  const xval = 2;\r\n  const fColor = 'c3';\r\n  const xColor = 'c2';\r\n  const yColor = 'c4';\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Conceptually, this means that the value of the\r\n        <span className=\"c3\"> function </span>\r\n        (in this case <Latex classes={'c3'} expression={`${node.toTex()}`} inline={true} />) gets closer and closer to <span className=\"c4\">4</span> as the x-value gets closer and closer to <span className=\"c2\">2</span>.\r\n      </div>\r\n      <div className='flex vertical center'>\r\n        <h3>Graph of <Latex expression={`${node.toTex()}`} inline={true} /></h3>\r\n        <LimitExampleGraph f={f} xval={xval} y={f(xval)} fColor={fColor} xColor={xColor} yColor={yColor} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      This does not necessarily mean that the value of <Latex classes={'c3'} expression={`f(x) = x^2`} inline={true} /><strong> at </strong> <Latex classes={'c2'} expression={`x = 2`} inline={true} /> is <Latex classes={'c4'} expression={`4`} inline={true} />!\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section7 = () => {\r\n  const expression = 'x^2';\r\n  const node = math.parse(expression);\r\n  const f = x => node.evaluate({ x });\r\n  const xval = 2;\r\n  const fColor = 'c3';\r\n  const xColor = 'c2';\r\n  const yColor = 'c4';\r\n  const piecewiseFunctions: PiecewiseFunction[] = [\r\n    { f: `x^2`, domain: `x \\\\neq 2` },\r\n    { f: `6`, domain: `x = 2` }\r\n  ]\r\n  return (\r\n    <>\r\n      <div>As an example, let's look at this function:\r\n      </div>\r\n      <div>\r\n        <Piecewise title=\"g(x)\" functions={piecewiseFunctions} display={true}/>\r\n      </div>\r\n      <div className='flex vertical center'>\r\n        <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n        <LimitExampleGraph f={f} xval={xval} y={6} fColor={fColor} xColor={xColor} yColor={yColor} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section8 = () => {\r\n  return (\r\n    <div>\r\n      In this case,\r\n      <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to 2}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`x^2`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ 4\\\\ `} classes={'c4'} inline={true} />\r\n      is <strong>still </strong><Latex expression={`4`} classes={`c4`} inline={true} />,\r\n      because <strong>near </strong>\r\n      <Latex classes='c2' expression={`x = 2`} inline={true} />,\r\n      <Latex classes='c3' expression={`\\\\ g(x)`} inline={true} /> is getting closer and closer to <Latex classes='c4' expression={`4`} inline={true} />.\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8 }\r\n\r\n\r\n\r\n//////////////////// UNUSED  ///////////////////////////\r\n\r\n/*\r\nconst Section5 = () => {\r\n  return (\r\n    <div>\r\n      Can you guess what this means?\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      This means that the <span className=\"c1\">limit</span> of \r\n      <span className=\"c3\" dangerouslySetInnerHTML={{__html: ` \\\\(x^2\\\\) `}} />\r\n      <span className=\"c2\">as \r\n        <span dangerouslySetInnerHTML={{__html: ` \\\\(x\\\\) `}} /> approaches \r\n        <span dangerouslySetInnerHTML={{__html: ` \\\\(2\\\\) `}} /> \r\n      </span> is \r\n      <span className=\"c4\" dangerouslySetInnerHTML={{__html: ` \\\\(4\\\\) `}} />\r\n    </div>\r\n  )\r\n}\r\n*/","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8 } from \"./Sections\"\r\nimport React from \"react\"\r\n\r\n/**\r\n * array of content to be shown on learn page\r\n */\r\nconst learnContent = [\r\n  <Section1 />,\r\n  <Section2 />,\r\n  <Section3 />,\r\n  <Section4 />,\r\n  <Section5 />,\r\n  <Section6 />,\r\n  <Section7 />,\r\n  <Section8 />,\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","f","xval","y","fColor","xColor","yColor","size","svgRef","useRef","useEffect","current","graphSize","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","yval","line","x","d","append","datum","attr","style","_createFunctionGraph","createFunctionGraph","data","id","textSize","createLimitLine","FAR_DIST","CLOSE_DIST","AXIS_OFFSET","dataUpToPoint","filter","pointId","uuidv4","functionLine","concat","node","pathLength","getTotalLength","leftLine","createFunctionLimitLine","rightLine","farPointOne","farPoint","farPointTwo","pointsText","convertScale","offsetsText","findOffsets","isNaN","Math","min","max","text","round","createAllLimitLines","_jsx","ref","Piecewise","title","functions","display","classes","_useState","useState","_useState2","_slicedToArray","expression","setExpression","e","i","length","domain","_Fragment","children","Latex","window","outerWidth","GRAPH_SIZE","COLORS","generateFunctionData","dataGap","arguments","undefined","push","color","leftArrow","rightArrow","type","invert","findIntersections","unshift","name","createArrowMarker","select","raise","func","xMin","xMax","tolerance","a","b","xMid","yMid","createMultipleFunctionsGraph","dataArray","leftCircle","includeLeft","rightCircle","includeRight","addPointsToGraph","points","minx","maxx","miny","maxy","half","selectAll","remove","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","x1","x2","y1","y2","empty","far","close","farx","closex","fary","closey","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","right","markerName","farDistLength","closeDistLength","getPointAtLength","closePoint","pointsOne","offsetsOne","Section1","_jsxs","Section2","inline","Section3","className","Section4","Section5","math","evaluate","toTex","LimitExampleGraph","Section6","Section7","Section8"],"sourceRoot":""}