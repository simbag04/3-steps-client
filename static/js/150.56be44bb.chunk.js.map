{"version":3,"file":"static/js/150.56be44bb.chunk.js","mappings":"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","sources":["components/content-components/graphs/LimitExampleGraph.js","components/latex/Latex.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/01-understanding-limits/Sections.js","topics/01-limits/01-understanding-limits/learn-content.js"],"sourcesContent":["/**\r\n * Creates graph of function f showing limit at xval\r\n * Parameters: \r\n *  - f : function to generate graph of\r\n *  - xval: xvalue at which to show limit\r\n *  - y: y of function - could be different from f(xval) if there's a hole, or null if f is undefined at xval\r\n *  - fColor: classes to add to function graph\r\n *  - xcolor: classes to add to x limit arrows\r\n *  - ycolor: classes to add to y limit arrows\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createFunctionGraph, createBlankCanvas, createFunctionLimitLine, createLimitLine, convertScale, findOffsets } from \"../../../helpers/graph-helpers\";\r\nimport { AXIS_OFFSET, CLOSE_DIST, FAR_DIST } from \"../../../helpers/constants\";\r\nimport * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../../styles/graph.css'\r\n\r\nconst LimitExampleGraph = ({ f, xval, y, fColor, xColor, yColor, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const textSize = 11;\r\n      const graphSize = size;\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(graphSize, graphSize, svgRef, textSize);\r\n\r\n      const svg = d3.select(svgRef.current)\r\n      const yval = f(xval);\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      // dashed lines going to x and y axes\r\n      svg.append('path')\r\n        .datum([{ x: 0, y: yval }, { x: xval, y: yval }])\r\n        .attr('class', 'stroke ' + yColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      svg.append('path')\r\n        .datum([{ x: xval, y: yval }, { x: xval, y: 0 }])\r\n        .attr('class', 'stroke ' + xColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      const { data, id } = createFunctionGraph(svg, f, width, height, null, xScale, yScale, fColor, -11, 11, true, true);\r\n      createAllLimitLines(svg, line, xval, yval,\r\n        xColor, yColor, fColor,\r\n        xScale, yScale, data, id, textSize);\r\n\r\n      // hole at xval, yval\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'hole fill stroke ' + fColor)\r\n        .attr('cx', xScale(xval))\r\n        .attr('cy', yScale(yval))\r\n        .attr('r', 3)\r\n\r\n      // point at xval, y\r\n      if (y !== null) {\r\n        svg\r\n          .append('circle')\r\n          .attr('class', 'fill stroke ' + fColor)\r\n          .attr('cx', xScale(xval))\r\n          .attr('cy', yScale(y))\r\n          .attr('r', 3)\r\n      }\r\n    }\r\n\r\n  }, [svgRef, f, fColor, xColor, xval, y, yColor, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg to append lmit lines to\r\n * @param {function} line functionthat creates 'd' attribute in svg path\r\n * @param {number} xval xvalue of point where limit is being generated\r\n * @param {number} yval yvalue of point\r\n * @param {string} xColor classes to be added to x limit lines\r\n * @param {string} yColor classes to be added to y limit lines\r\n * @param {string} fColor classes to be added to f limit lines\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {Array} data array of data for original function\r\n * @param {id} id id of function path\r\n * @param {number} textSize text size of label\r\n */\r\nfunction createAllLimitLines(svg, line, xval, yval,\r\n  xColor, yColor, fColor,\r\n  xScale, yScale, data, id, textSize) {\r\n\r\n  // horizontal and vertical arrows\r\n  createLimitLine(svg, line, xval - FAR_DIST,\r\n    xval - CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n  createLimitLine(svg, line, xval + FAR_DIST,\r\n    xval + CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + xColor)\r\n    .attr('cx', xScale(xval))\r\n    .attr('cy', yScale(0))\r\n    .attr('r', 1)\r\n\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval - FAR_DIST, yval - CLOSE_DIST, 'y-limits', yColor)\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval + FAR_DIST, yval + CLOSE_DIST, 'y-limits', yColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + yColor)\r\n    .attr('cx', xScale(0))\r\n    .attr('cy', yScale(yval))\r\n    .attr('r', 1)\r\n\r\n  // function arrows\r\n  const dataUpToPoint = data.filter((d) => d.x < xval);\r\n\r\n  // create path up to point to get its length\r\n  const pointId = uuidv4();\r\n  svg.append('path')\r\n    .datum(dataUpToPoint)\r\n    .attr('data-uuid', pointId)\r\n    .attr('fill', 'none')\r\n    .attr('d', line);\r\n\r\n  // get path length and use that to find points at which to genrate limit arrows\r\n  const functionLine = d3.select(`[data-uuid=\"${id}\"]`).node();\r\n  const pathLength = d3.select(`[data-uuid=\"${pointId}\"]`).node().getTotalLength();\r\n\r\n  const leftLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, false);\r\n  const rightLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, true);\r\n\r\n  const farPointOne = leftLine.farPoint;\r\n  const farPointTwo = rightLine.farPoint;\r\n\r\n  // text at point\r\n\r\n  // get offset values\r\n  const pointsText = convertScale(farPointOne, farPointTwo, xScale, yScale);\r\n  const offsetsText = findOffsets(pointsText, 3 * AXIS_OFFSET);\r\n\r\n  // adjust offset values by ensuring they are a minimum distance away from line\r\n  offsetsText.y = isNaN(offsetsText.y) ? 0.7 : offsetsText.y;\r\n  if (offsetsText.y <= 0) {\r\n    offsetsText.y = Math.min(-0.5, offsetsText.y);\r\n  } else {\r\n    offsetsText.y = Math.max(0.5, offsetsText.y);\r\n  }\r\n\r\n  if (offsetsText.x <= 0) {\r\n    offsetsText.x = Math.min(-1.2, offsetsText.x);\r\n  } else {\r\n    offsetsText.x = Math.max(1.2, offsetsText.x);\r\n  }\r\n\r\n  // if text is too close to axes, move it on the other side of the line\r\n  if ((xval <= 3 && xval >= 0) && offsetsText.x < 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  if (xval >= -3 && xval < 0 && offsetsText.x > 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  // add text\r\n  svg.append('text')\r\n    .attr('x', xScale(xval + offsetsText.x))\r\n    .attr('y', yScale(yval + offsetsText.y))\r\n    .attr('text-anchor', 'middle')\r\n    .attr('alignment-baseline', 'middle')\r\n    .attr('class', 'text')\r\n    .style('font-size', textSize)\r\n    .text(`(${xval}, ${Math.round(yval)})`)\r\n}\r\n\r\nexport default LimitExampleGraph","/**\r\n * Latex component that uses katex to render math in latex font\r\n * Parameters: \r\n *  - classes: custom classes to be added to returned html\r\n *  - expression: math to be rendered as latex\r\n *  - inline: boolean value indicating whether latex should be rendered inline or block mode\r\n */\r\n\r\nimport 'katex/dist/katex.min.css';  // Import KaTeX styles\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\nimport React from 'react';\r\n\r\ninterface LatexProps {\r\n  classes? : string,\r\n  expression: string,\r\n  display?: string | boolean,\r\n  inline?: any\r\n}\r\nconst Latex: React.FC<LatexProps> = ({classes, expression, display}) => {\r\n  return (\r\n    <span className={classes}>\r\n      {!display ? \r\n      <InlineMath math={expression} /> :\r\n      <BlockMath math={expression} /> }\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Latex","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine }\r\n","import LimitExampleGraph from \"../../../components/content-components/graphs/LimitExampleGraph\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport * as math from 'mathjs'\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\"\r\n\r\n/**\r\n * All content for this topic's learn section\r\n * all these components represent content for the sections\r\n */\r\nconst Section1 = () => {\r\n  return (\r\n    <div>\r\n      In Calculus, a limit describes how a function behaves <strong>near</strong> a point, instead of <strong>at</strong> that point\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section2 = () => {\r\n  return (\r\n    <div>\r\n      A limit is written as <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to a}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`f(x)`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ L `} classes={'c4'} inline={true} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section3 = () => {\r\n  return (\r\n    <div>\r\n      This is read as \"the\r\n      <span className=\"c1\"> limit</span> of\r\n      <Latex expression={`f(x)`} classes={'c3'} inline={true} />\r\n      <span className=\"c2\"> as\r\n        <Latex expression={`\\\\ x\\\\ `} inline={true} />\r\n        approaches\r\n        <Latex expression={`\\\\ a\\\\ `} inline={true} />\r\n      </span>\r\n      is <Latex classes=\"c4\" expression={`\\\\ L\\\\ `} inline={true} />\".\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section4 = () => {\r\n  return (\r\n    <div>\r\n      To understand this, let’s look at an example:\r\n      <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to 2}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`x^2`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ 4 `} classes={'c4'} inline={true} />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Section5 = () => {\r\n  const expression = 'x^2';\r\n  const node = math.parse(expression);\r\n  const f = x => node.evaluate({ x });\r\n  const xval = 2;\r\n  const fColor = 'c3';\r\n  const xColor = 'c2';\r\n  const yColor = 'c4';\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        Conceptually, this means that the value of the\r\n        <span className=\"c3\"> function </span>\r\n        (in this case <Latex classes={'c3'} expression={`${node.toTex()}`} inline={true} />) gets closer and closer to <span className=\"c4\">4</span> as the x-value gets closer and closer to <span className=\"c2\">2</span>.\r\n      </div>\r\n      <div className='flex vertical center'>\r\n        <h3>Graph of <Latex expression={`${node.toTex()}`} inline={true} /></h3>\r\n        <LimitExampleGraph f={f} xval={xval} y={f(xval)} fColor={fColor} xColor={xColor} yColor={yColor} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      This does not necessarily mean that the value of <Latex classes={'c3'} expression={`f(x) = x^2`} inline={true} /><strong> at </strong> <Latex classes={'c2'} expression={`x = 2`} inline={true} /> is <Latex classes={'c4'} expression={`4`} inline={true} />!\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section7 = () => {\r\n  const expression = 'x^2';\r\n  const node = math.parse(expression);\r\n  const f = x => node.evaluate({ x });\r\n  const xval = 2;\r\n  const fColor = 'c3';\r\n  const xColor = 'c2';\r\n  const yColor = 'c4';\r\n  return (\r\n    <>\r\n      <div>As an example, let's look at a function <Latex expression={\r\n        `g(x) = \\\\begin{cases}\r\n          x^2, x \\\\neq 2 \\\\\\\\\r\n          6, x = 2 \\\\\\\\\r\n        \\\\end{cases}`\r\n      } inline={true} /></div>\r\n      <div className='flex vertical center'>\r\n        <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n        <LimitExampleGraph f={f} xval={xval} y={6} fColor={fColor} xColor={xColor} yColor={yColor} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section8 = () => {\r\n  return (\r\n    <div>\r\n      In this case,\r\n      <Latex expression={`\\\\ {\\\\lim}`} classes={'c1'} inline={true} />\r\n      <Latex expression={`_{x \\\\to 2}`} classes={'c2'} inline={true} />\r\n      <Latex expression={`x^2`} classes={'c3'} inline={true} />\r\n      <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n      <Latex expression={`\\\\ 4\\\\ `} classes={'c4'} inline={true} />\r\n      is <strong>still </strong><Latex expression={`4`} classes={`c4`} inline={true}/>, \r\n      because <strong>near </strong> \r\n      <Latex classes='c2' expression={`x = 2`} inline={true}/>, \r\n      <Latex classes='c3' expression={`\\\\ g(x)`} inline={true} /> is getting closer and closer to <Latex classes='c4' expression={`4`} inline={true} />.\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8 }\r\n\r\n\r\n\r\n//////////////////// UNUSED  ///////////////////////////\r\n\r\n/*\r\nconst Section5 = () => {\r\n  return (\r\n    <div>\r\n      Can you guess what this means?\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      This means that the <span className=\"c1\">limit</span> of \r\n      <span className=\"c3\" dangerouslySetInnerHTML={{__html: ` \\\\(x^2\\\\) `}} />\r\n      <span className=\"c2\">as \r\n        <span dangerouslySetInnerHTML={{__html: ` \\\\(x\\\\) `}} /> approaches \r\n        <span dangerouslySetInnerHTML={{__html: ` \\\\(2\\\\) `}} /> \r\n      </span> is \r\n      <span className=\"c4\" dangerouslySetInnerHTML={{__html: ` \\\\(4\\\\) `}} />\r\n    </div>\r\n  )\r\n}\r\n*/","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8 } from \"./Sections\"\r\n\r\n/**\r\n * array of content to be shown on learn page\r\n */\r\nconst learnContent = [\r\n  <Section1 />,\r\n  <Section2 />,\r\n  <Section3 />,\r\n  <Section4 />,\r\n  <Section5 />,\r\n  <Section6 />,\r\n  <Section7 />,\r\n  <Section8 />,\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","f","xval","y","fColor","xColor","yColor","size","svgRef","useRef","useEffect","current","graphSize","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","yval","line","x","d","append","datum","attr","style","_createFunctionGraph","createFunctionGraph","data","id","textSize","createLimitLine","FAR_DIST","CLOSE_DIST","AXIS_OFFSET","dataUpToPoint","filter","pointId","uuidv4","functionLine","concat","node","pathLength","getTotalLength","leftLine","createFunctionLimitLine","rightLine","farPointOne","farPoint","farPointTwo","pointsText","convertScale","offsetsText","findOffsets","isNaN","Math","min","max","text","round","createAllLimitLines","_jsx","ref","classes","expression","display","className","children","BlockMath","math","InlineMath","window","outerWidth","GRAPH_SIZE","COLORS","generateFunctionData","dataGap","arguments","length","undefined","i","push","color","leftArrow","rightArrow","type","invert","findIntersections","unshift","name","createArrowMarker","select","raise","func","xMin","xMax","tolerance","a","b","xMid","yMid","createMultipleFunctionsGraph","functions","dataArray","leftCircle","includeLeft","rightCircle","includeRight","minx","maxx","miny","maxy","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","x1","x2","y1","y2","empty","far","close","farx","closex","fary","closey","points","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","right","markerName","farDistLength","closeDistLength","getPointAtLength","closePoint","pointsOne","offsetsOne","Section1","_jsxs","Section2","Latex","inline","Section3","Section4","Section5","evaluate","_Fragment","toTex","LimitExampleGraph","Section6","Section7","Section8"],"sourceRoot":""}