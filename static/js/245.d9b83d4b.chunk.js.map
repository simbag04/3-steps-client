{"version":3,"file":"static/js/245.d9b83d4b.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","components/latex/Piecewise.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/12-removing-discontinuities/Sections.tsx","topics/01-limits/12-removing-discontinuities/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\nimport * as math from \"mathjs\"\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\n\r\nconst f1 = math.parse(\"x^2\")\r\nconst removableFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c1\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c1\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst removablePoints: GraphPoint[] = [\r\n  {\r\n    x: 2,\r\n    y: 1,\r\n    classes: \"c1\"\r\n  }\r\n]\r\n\r\nconst piecewise1: PiecewiseFunction[] = [\r\n  {\r\n    f: `\\\\frac{x^2 - 5x - 4}{x - 1}`,\r\n    domain: `x \\\\neq 1`\r\n  },\r\n  {\r\n    f: `a`,\r\n    domain: `x = 1`\r\n  }\r\n]\r\n\r\nconst piecewise2: PiecewiseFunction[] = [\r\n  {\r\n    f: `ax^2 - 3`,\r\n    domain: `x < 1`\r\n  },\r\n  {\r\n    f: `x + 2`,\r\n    domain: `x \\\\geq 1`\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    Recall when we were discussing discontinuities, one type of discontinuity we encountered was a <strong>removable</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph with Removable Discontinuity </h3>\r\n    <FunctionGraph functions={removableFunctions} size={GRAPH_SIZE} points={removablePoints} ></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    This continuity was removable because if we define <Latex expression=\"f(2) = 4\" />, it will match <Latex expression={`\\\\lim_{x \\\\to 2} f(x)`} />, so the function would be continuous again.\r\n  </div>\r\n  <div>\r\n    This type of situation often comes up with making functions with holes continuous. For example, consider:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) = \\\\frac{x^2 - 5x - 4}{x - 1}`} display={true} />\r\n  </div>\r\n  <div>\r\n    This function is not defined at <Latex expression=\"x = 1\" /> since the denominator is 0 at this point. We want to find a value for <Latex expression=\"f(1)\" /> that will make <Latex expression=\"f(x)\" /> continuous at this point.\r\n  </div>\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    In other words, given:\r\n  </div>\r\n  <div>\r\n    <Piecewise title=\"f(x)\" functions={piecewise1} display={true} />\r\n  </div>\r\n  <div>\r\n    What is the value of <Latex expression=\"a\" /> that will make <Latex expression=\"f(x)\" /> continuous at <Latex expression=\"x = 1\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    To solve this, recall our 2 conditions that make functions continuous at a point:\r\n  </div>\r\n  <div className=\"flex vertical center\">\r\n    <ul className=\"text-start\">\r\n      <li>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n      </li>\r\n      <li>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    We can evaluate <Latex expression={`\\\\lim_{x \\\\to 1} f(x)`} /> using the top equation:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1} \\\\frac{x^2 - 5x - 4}{x - 1} = \\\\frac{0}{0}`} display={true} />\r\n  </div>\r\n  <div>\r\n    Remember, though, that when we get <Latex expression={`\\\\frac{0}{0}`} />, we can use other techniques to solve the limit. In this case, we can use factoring:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1} \\\\frac{x^2 - 5x - 4}{x - 1} = \\\\lim_{x \\\\to 1} \\\\frac{(x - 1)(x - 4)}{x - 1} = \\\\lim_{x \\\\to 1} (x - 4) = -3`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Thus, the first condition is satisfied because we know <Latex expression={`\\\\lim_{x \\\\to 1} f(x)`} /> exists.\r\n  </div>\r\n  <div>\r\n    For the second condition we need <Latex expression={`\\\\lim_{x \\\\to 1} f(x) = f(1)`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    Since <Latex expression=\"f(1) = a\" /> and <Latex expression={`\\\\lim_{x \\\\to 1} f(x) = -3`} />, this means we need <Latex classes=\"bold\" expression=\"a = 3\" /> in order for <Latex expression=\"f(x)\" /> to be continuous at <Latex expression=\"x = 1.\" />\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    Anytime we want to make a function continuous at a point, we just need to make sure the 2 conditions hold. Let's look at another example:\r\n  </div>\r\n  <div>\r\n    <Piecewise title=\"g(x)\" functions={piecewise2} />\r\n  </div>\r\n  <div>\r\n    For what value of <Latex expression=\"a\" /> will <Latex expression=\"g(x)\" /> be continuous at <Latex expression=\"x = 1\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    Again, going back to our 2 conditions, we first need <Latex expression={`\\\\lim_{x \\\\to 1} g(x)`} /> to exist.\r\n  </div>\r\n  <div>\r\n    In order for <Latex expression={`\\\\lim_{x \\\\to 1} g(x)`} /> to exist, we need <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x)`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section10 = <>\r\n  <div>\r\n    Evaluating these, we get:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1} (ax^2 - 3) = a - 3`} display={true} />\r\n    <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x) = \\\\lim_{x \\\\to 1} (x + 2) = 3`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section11 = <>\r\n  <div>\r\n    In order for the limit to exist, both of these must equal each other. Thus, <Latex expression=\"a - 3 = 3\" display={true} />\r\n    <Latex classes=\"bold\" expression=\"a = 6\" />\r\n  </div>\r\n  <div>\r\n    When <Latex expression=\"a = 6\" />, <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x) = 3`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section12 = <>\r\n  <div>\r\n    Now that the first condition is verified, we can also check the  second condition.\r\n  </div>\r\n  <div>\r\n    We know <Latex expression=\"g(1) = 1 + 2 = 3\" />. Since <Latex expression={`\\\\lim_{x \\\\to 1} g(x) = g(1) = 3`} />, we know that the function is continuous at <Latex expression=\"x = 1\" /> when <Latex classes=\"bold\" expression=\"a = 6\" />!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 }","import { Section1, Section10, Section11, Section12, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\"\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9,\r\n  Section10,\r\n  Section11,\r\n  Section12\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","Piecewise","title","display","classes","expression","setExpression","useState","e","i","length","f","domain","_Fragment","children","Latex","concat","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","min","max","dataGap","arguments","undefined","data","x","y","push","createFunctionGraph","color","leftArrow","rightArrow","type","filter","d","Math","invert","findIntersections","unshift","line","name","uuidv4","createArrowMarker","id","append","datum","attr","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","style","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","math","removableFunctions","evaluate","_jsxs","className","FunctionGraph"],"sourceRoot":""}