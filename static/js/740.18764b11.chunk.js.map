{"version":3,"file":"static/js/740.18764b11.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/14-limits-at-infinity-and-horizontal-asymptotes/Sections.tsx","topics/01-limits/14-limits-at-infinity-and-horizontal-asymptotes/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from \"mathjs\"\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\n\r\nconst n1 = math.parse(\"-1/(x - 1) + 1\")\r\nconst n2 = math.parse(\"1/(x - 1) + 1\")\r\n\r\nconst asymptoticFunctions = [\r\n  {\r\n    f: x => n1.evaluate({ x }),\r\n    min: -11,\r\n    max: 1,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  },\r\n  {\r\n    f: x => n2.evaluate({ x }),\r\n    min: 1,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    In addition to discussing limits at a point, we also want to discuss the behavior of graphs as <Latex expression={`x`} /> approaches <Latex expression={`\\\\infty`} /> and <Latex expression={`-\\\\infty`} />.\r\n  </div>\r\n  <div>\r\n    Let's start by looking at a graph to understand how we can do this:\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression=\"f(x)\" /></h3>\r\n    <AsymptoticGraph functions={asymptoticFunctions} size={GRAPH_SIZE} x={[1]} y={[1]} />\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    In this graph, it is clear that as <Latex expression=\"x\" /> approaches <Latex expression={`\\\\infty`} />, the graph seems to be approaching <Latex expression=\"1\" />. Similarly, as <Latex expression=\"x\" /> approaches <Latex expression={`-\\\\infty`} />, the graph also seems to be approaching <Latex expression=\"1\" />.\r\n  </div>\r\n  <div>\r\n    Thus, <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to \\\\infty} f(x) = 1`} /> and <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to -\\\\infty} f(x) = 1`} />.\r\n  </div>\r\n  <div>\r\n    Notice that <Latex expression=\"y = 1\" /> is also a horizontal asymptote of this graph.\r\n  </div>\r\n  <div>\r\n    In fact, this is always the case - if we find the horizontal asymptote of a function (if it exists), then we have found its limit as <Latex expression=\"x\" /> approaches <Latex expression={`\\\\infty`} /> and <Latex expression={`-\\\\infty`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    This is useful when we are only given a function expression, because we can easily find the horizontal asymptotes with 3 rules:\r\n  </div>\r\n  <div>\r\n    For each of these rules, let <Latex expression=\"n\" /> be the highest degree of the numerator, and <Latex expression=\"d\" /> be the highest degree of the denominator.\r\n  </div>\r\n  <div className=\"flex vertical center\">\r\n    <ul className=\"text-start\">\r\n      <li>\r\n        If <Latex expression=\"n < d\" />, the horizontal asymptote is 0.\r\n      </li>\r\n      <li>\r\n        If <Latex expression=\"n = d\" />, the horizontal asymptote is the ratio of the leading coefficients.\r\n      </li>\r\n      <li>\r\n        If <Latex expression=\"n > d\" />, there is no horizontal asymptote.\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    Let's look at some examples - let's start with:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) = \\\\frac{x}{x^2 + 1}`} display={true} />\r\n  </div>\r\n  <div>\r\n    In this case, the degree of the numerator is <Latex classes=\"bold\" expression=\"1\" /> and the degree of the denominator is <Latex classes=\"bold\" expression=\"2\" />. Since the degree of the top is less than the bottom, the horizontal asymptote is <Latex classes=\"bold\" expression=\"0\" />.\r\n  </div>\r\n  <div>\r\n    Thus, <Latex expression={`\\\\lim_{x \\\\to \\\\infty} f(x) = 0`} /> and <Latex expression={`\\\\lim_{x \\\\to -\\\\infty} f(x) = 0`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    Antoher example we can look at is:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`g(x) = \\\\frac{2x^3 + x - 1}{x^3 - x}`} display={true} />\r\n  </div>\r\n  <div>\r\n    In this case, the degrees of both the top and bottom are <Latex classes=\"bold\" expression=\"3\" />, so we need to find the ratio of the leading coefficients.\r\n  </div>\r\n  <div>\r\n    The leading coefficients are <Latex classes=\"bold\" expression=\"2\" /> on the top and <Latex classes=\"bold\" expression=\"1\" /> on the bottom, so the horizontal asymptote is <Latex expression={`\\\\frac{2}{1} = 2`} />.\r\n  </div>\r\n  <div>\r\n    Thus, <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to \\\\infty} g(x) = 2`} /> and <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to -\\\\infty} g(x) = 2`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Lastly, let's look at:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`h(x) = \\\\frac{x^2 + 3}{x + 1}`} display={true} />\r\n  </div>\r\n  <div>\r\n    In this case the degree of the numerator is <Latex classes=\"bold\" expression=\"2\" />, and the degree of the denominator is <Latex classes=\"bold\" expression=\"1\" />. Since the degree of the top is greater than the degree of the bottom, there is no horizontal asymptote!\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    However, we can still find <Latex expression={`\\\\lim_{x \\\\to \\\\infty} h(x)`} /> and <Latex expression={`\\\\lim_{x \\\\to -\\\\infty} h(x)`} />.\r\n  </div>\r\n  <div>\r\n    The idea is to focus on the highest degree terms - we can ignore the remaining terms as when <Latex expression=\"x\" /> is approaching <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} />, those terms will not matter in front of the higher degree terms.\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    Only looking at the higher degree terms, we see:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`h(x) = \\\\frac{x^2 + 3}{x + 1} \\\\approx \\\\frac{x^2}{x} = x`} display={true} />\r\n  </div>\r\n  <div>\r\n    Now, we can directly evaluate:\r\n  </div>\r\n  <div>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to \\\\infty} h(x) = \\\\lim_{x \\\\to \\\\infty} x = \\\\infty`} display={true} />\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to -\\\\infty} h(x) = \\\\lim_{x \\\\to -\\\\infty} x = -\\\\infty`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    These are the basic rules to use when evaluating limits at <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} /> - however, it can get a little more complicated: consider\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) = \\\\frac{\\\\sqrt{x^2 + 3}}{x}`} display={true} />\r\n  </div>\r\n  <div>\r\n    In this case, we have a square root function to deal with.\r\n  </div>\r\n  <div>\r\n    However, just like in the previous example, we can focus on the highest degree terms:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) = \\\\frac{\\\\sqrt{x^2 + 3}}{x} \\\\approx \\\\frac{\\\\sqrt{x^2}}{x}`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section10 = <>\r\n  <div>\r\n    Now, we can simplify the root. The only thing to keep in mind is that the square root function is always <strong>positive</strong>, so instead of just simplifying it to <Latex expression=\"x\" />, we should simplify it to <Latex expression=\"|x|\" />. Thus,\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) \\\\approx \\\\frac{\\\\sqrt{x^2}}{x} = \\\\frac{|x|}{x}`} display={true} />\r\n  </div>\r\n\r\n</>\r\n\r\nconst Section11 = <>\r\n  <div>\r\n    And now, we can take the limits:\r\n  </div>\r\n  <div>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to \\\\infty} \\\\frac{|x|}{x} = \\\\frac{+\\\\infty}{+\\\\infty} = 1`} display={true} />\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to -\\\\infty} \\\\frac{|x|}{x} = \\\\frac{+\\\\infty}{-\\\\infty} = -1`} display={true} />\r\n  </div>\r\n  <div>\r\n    Notice how in this case, because of the absolute value, we couldn't directly divide the <Latex expression={`\\\\frac{x}{x}`} /> to get 1 - we had to account for the <strong>signs</strong>.\r\n  </div>\r\n</>\r\n\r\nconst Section12 = <>\r\n  <div>\r\n    Let's look at one last example:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`g(x) = \\\\frac{\\\\sqrt{4x^4 + 3}}{3x^2 + 5}`} display={true} />\r\n  </div>\r\n  <div>\r\n    Again, focusing on the higher degree terms, we get:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`g(x) = \\\\frac{\\\\sqrt{4x^4 + 3}}{3x^2 + 5} \\\\approx \\\\frac{\\\\sqrt{4x^4}}{3x^2} = \\\\frac{|2x^2|}{3x^2}`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section13 = <>\r\n  <div>\r\n    In this case, we have <Latex expression=\"x^2\" /> on top, and that is always positive. That's why we can drop the absolute value on top:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`g(x) \\\\approx \\\\frac{|2x^2|}{3x^2} = \\\\frac{2x^2}{3x^2}`} display={true} />\r\n  </div>\r\n  <div>\r\n    Now, using our horizontal asymptotes technique, the top and bottom have the same degree. Thus, the asymptote is just the ratio of the leading coefficients: <Latex expression={`\\\\frac{2}{3}`} />.\r\n  </div>\r\n  <div>\r\n    Thus, we have:\r\n  </div>\r\n  <div>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to \\\\infty} g(x) = \\\\frac{2}{3}`} display={true} />\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to -\\\\infty} g(x) = \\\\frac{2}{3}`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section14 = <>\r\n  <div>\r\n    The key idea with these problems is always to focus on the highest degree terms, and try to find the horizontal asymptotes of the functions. In case of square roots, remember to add an absolute value to the simplified expression, so you know it is always positive!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12, Section13, Section14 }","import { Section1, Section10, Section11, Section12, Section13, Section14, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\";\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9,\r\n  Section10,\r\n  Section11,\r\n  Section12,\r\n  Section13,\r\n  Section14\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","f","min","max","dataGap","arguments","undefined","data","push","createFunctionGraph","color","classes","leftArrow","rightArrow","type","filter","Math","findIntersections","unshift","name","concat","uuidv4","createArrowMarker","id","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","addPointsToGraph","points","textSize","minx","maxx","miny","maxy","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","n1","math","n2","asymptoticFunctions","evaluate","_jsxs","_Fragment","children","Latex","expression","className","AsymptoticGraph","display"],"sourceRoot":""}