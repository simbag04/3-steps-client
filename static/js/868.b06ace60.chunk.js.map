{"version":3,"file":"static/js/868.b06ace60.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.tsx","components/content-components/graphs/FunctionGraph.tsx","topics/01-limits/02-evaluating-limits-using-graphs/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\ninterface AsymptoticGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  x: number[], // xvalues of asymptotes where there will be dotted lines\r\n  y: number[] // y values of asymptotes where there will be dotted lines\r\n}\r\n\r\nconst AsymptoticGraph: React.FC<AsymptoticGraphProps> = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","import Latex from \"../../../components/latex/Latex\";\r\nimport { getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport { fitPointsToQuadratic, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from 'mathjs'\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\";\r\nimport { COLORS, GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\n/**\r\n * generates random question that shows a graph with asymptote(s) and asks users to find the limit at an asymptotic point\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst asymptoticGraphQuestion = (): any => {\r\n  const randomNumbers = getRandomNumber(1, 2); // number of asymptotes\r\n  const xValues = []; // values at which there will be an asymptote\r\n  let f = `(${getRandomNumber(0, 1) === 0 ? \"-\" : \"\"}1/`; // function\r\n\r\n  // get random x values and build function\r\n  for (let i = 0; i < randomNumbers; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [-1, 0, 1, ...xValues]);\r\n    xValues[i] = num;\r\n    f = f + `(x ${num < 0 ? '+' : '-'} ${Math.abs(num)})`;\r\n  }\r\n  const verticalShift = getRandomNumber(-5, 5)\r\n  f = f + `) ${verticalShift > 0 ? '+' : '-'} ${Math.abs(verticalShift)}`\r\n\r\n  // sort x values in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n  const node = math.parse(f);\r\n\r\n  // generate functions array\r\n  // this generates an array that doesn't include the x values as the function is undefined at those points\r\n  const functions: GraphFunction[] = [];\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min: i === 0 ? -11 : xValues[i - 1],\r\n      max: i === xValues.length ? 11 : xValues[i],\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    }\r\n\r\n    functions[i] = curr;\r\n  }\r\n\r\n  // set all other question stuff\r\n  const ans = \"dne\";\r\n  const type = 'math';\r\n\r\n  // random x value to ask about\r\n  const val = xValues[getRandomNumber(0, xValues.length - 1)];\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <AsymptoticGraph functions={functions} size={GRAPH_SIZE} x={xValues} y={[verticalShift]} />\r\n  </div>\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${val}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {val} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit at a point where the function appears to be boundless?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of multiple functions, potentially with a jump.\r\n * Asks users to find limit from left, right, or both sides of a random point in graph\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst jumpGraphQuestion = (): any => {\r\n  const numFunctions = getRandomNumber(2, 3); // number of functions in graph\r\n  const xValues: number[] = []; // xvalues where there is a potential jump\r\n  const exclusions: number[] = []; // xvalues that should not be a jump\r\n\r\n  // generate random xvalues\r\n  for (let i = 1; i < numFunctions; i++) {\r\n    const num = getRandomWithExclusions(-8, 8, exclusions);\r\n    xValues[i - 1] = num;\r\n    exclusions.push(num - 2, num - 1, num, num + 1, num + 2) // exclude xvalue and +- 2\r\n  }\r\n\r\n  // sort xvalues in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n\r\n  const possibleXs = [...xValues]; // possiblexs that can be asked about\r\n\r\n  const functions = [];\r\n\r\n  // min/max variables of each function in function array\r\n  let min = -11;\r\n  let max = xValues[0] ? xValues[0] : 11;\r\n\r\n  // generate functions array\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    let x = null;\r\n    let node;\r\n\r\n    if (i === 0) {\r\n      // left most function\r\n      x = xValues[i] !== undefined ? xValues[i] : getRandomNumber(-8, 8);\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at right x value\r\n    } else if (i === numFunctions - 1) {\r\n      // right most function\r\n      x = xValues[i - 1]\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at left x value\r\n    } else {\r\n      // middle graph\r\n      x = xValues[i];\r\n      const midx = Math.round((xValues[i - 1] + xValues[i]) / 2) // midpoint of function domain\r\n\r\n      // points that should be in graph\r\n      const points = [\r\n        { x: xValues[i - 1], y: getRandomNumber(-7, 7) },\r\n        { x: midx, y: getRandomNumber(-7, 7) },\r\n        { x: xValues[i], y: getRandomNumber(-7, 7) }\r\n      ]\r\n      possibleXs.push(midx); // add midx as a potential xvalue to ask about\r\n      node = fitPointsToQuadratic(points) // generate graph that fits to points\r\n    }\r\n\r\n    max = xValues[i] !== undefined ? xValues[i] : 11; // update max\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min,\r\n      max,\r\n      includeLeft: i !== 0 ? !functions[i - 1].includeRight : false, // opposite of prev f right\r\n      includeRight: getRandomNumber(0, 1) === 0, // randomly decide\r\n      leftArrow: i === 0, // arrows on first and last graphs\r\n      rightArrow: i === numFunctions - 1,\r\n      classes: 'f',\r\n      leftCircle: i !== 0, // circle on both sides except first/last graphs which have arrows\r\n      rightCircle: i !== numFunctions - 1\r\n    }\r\n\r\n    min = xValues[i]; // update min\r\n    functions[i] = curr;\r\n  }\r\n\r\n  const qX = possibleXs[getRandomNumber(0, possibleXs.length - 1)]; // x to ask about\r\n  let ans: number | string;\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // get correct answer based on xvalue/sign\r\n  for (let i = 0; i < functions.length; i++) {\r\n    if (qX === functions[i].min) {\r\n      // qX on left side of graph, limit from right\r\n      if (sign === 1) {\r\n        ans = Math.round(functions[i].f(functions[i].min));\r\n      }\r\n    } else if (qX === functions[i].max) {\r\n      // qX on right side of graph\r\n      if (sign === 0) {\r\n        // limit from left\r\n        ans = functions[i].f(qX);\r\n      } else if (sign === 2) {\r\n        // limit from both sides\r\n        const currVal = Math.round(functions[i].f(qX));\r\n        const nextVal = Math.round(functions[i + 1].f(qX));\r\n        ans = currVal === nextVal ? currVal : 'dne';\r\n      }\r\n    } else if (qX > functions[i].min && qX < functions[i].max) {\r\n      // qX in the middle\r\n      ans = Math.round(functions[i].f(qX));\r\n    }\r\n  }\r\n\r\n  // set all other question stuff\r\n  const type = 'math'\r\n  ans = String(ans);\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const signText = sign === 0 ? `^{\\\\footnotesize\\\\texttt{-}}` : sign === 1 ? `^{\\\\footnotesize\\\\texttt{+}}` : ``;\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${qX + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {qX} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      Are we interested in the limit from the left, right, or both directions?\r\n    </div>,\r\n    <div>\r\n      {ans === 'dne' ? \"What do we know about limits at point where there is a jump in the graph?\" :\r\n        sign === 2 ? `Looking at the graph, what do we know about the asked limit?` :\r\n          \"Which sub-function graph should we look at to get our answer?\"}\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of an oscillating function\r\n * asks users to find limit where graph is oscillating\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst oscillatingGraphQuestion = (): any => {\r\n  // transformation variables\r\n  const horizShift = getRandomNumber(-8, 8);\r\n  const verticalShift = getRandomNumber(-7, 7)\r\n  const f = `(${getRandomWithExclusions(-3, 3, [0])}/${getRandomWithExclusions(-2, 2, [0])})sin(1/(x - ${horizShift})) + ${verticalShift}`\r\n\r\n  // set function\r\n  const node = math.parse(f);\r\n  const functions: GraphFunction[] = [{\r\n    f: (x: number) => node.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // set all other question stuff\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const ans = 'dne'\r\n  const type = 'math'\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${horizShift}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {horizShift} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit of a function at a point where the function is oscillating?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 2) {\r\n    q = oscillatingGraphQuestion();\r\n  } else if (rand <= 5) {\r\n    q = asymptoticGraphQuestion();\r\n  } else {\r\n    q = jumpGraphQuestion();\r\n  }\r\n\r\n  q.title = <></>\r\n\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","generateRandomQuestion","rand","getRandomNumber","q","oscillatingGraphQuestion","horizShift","verticalShift","f","concat","getRandomWithExclusions","node","math","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","question","_jsxs","className","children","Latex","expression","inline","FunctionGraph","GRAPH_SIZE","nextToInput","ans","type","hints","asymptoticGraphQuestion","randomNumbers","xValues","num","Math","abs","sort","a","b","curr","val","AsymptoticGraph","jumpGraphQuestion","numFunctions","exclusions","push","possibleXs","undefined","generateRandomPolynomialWithPoint","midx","round","fitPointsToQuadratic","qX","sign","currVal","String","signText","title","_Fragment","document","documentElement","setProperty","COLORS"],"sourceRoot":""}