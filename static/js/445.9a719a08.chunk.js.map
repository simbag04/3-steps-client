{"version":3,"file":"static/js/445.9a719a08.chunk.js","mappings":"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","sources":["topics/01-limits/14-limits-at-infinity-and-horizontal-asymptotes/generate-question.tsx"],"sourcesContent":["import { buildPolynomialFromCoeffs, formatPolynomialToLatex, getCoeffsOfPolynomial, getRandomNumber } from \"../../../helpers/functions\"\r\nimport { getPolynomialFunction } from \"../../../helpers/expression-generators\"\r\nimport React from \"react\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport * as math from \"mathjs\"\r\n\r\nconst generateAsymptoticFunction = () => {\r\n  // degree of top and bottom functions\r\n  const numDegree = getRandomNumber(1, 3)\r\n  const denDegree = getRandomNumber(1, 3)\r\n\r\n  // whether top/bottom will be sqrt\r\n  const topSqrt = Boolean(getRandomNumber(0, 1))\r\n  const bottomSqrt = Boolean(getRandomNumber(0, 1))\r\n\r\n  // leading coefficients of top and bottom\r\n  const topLC = getRandomNumber(1, 5)\r\n  const bottomLC = getRandomNumber(1, 5)\r\n\r\n  // get expressions for numerator and denominator\r\n  const numerator = getFunction(numDegree, topLC, topSqrt)\r\n  const denominator = getFunction(denDegree, bottomLC, bottomSqrt)\r\n\r\n  const approaches = Boolean(getRandomNumber(0, 1)) // false: approaches inf, true: approaches -inf\r\n  const func = `\\\\lim_{x \\\\to ${approaches ? `-` : ``}\\\\infty} \\\\frac{${numerator}}{${denominator}}`\r\n\r\n  let ans: string\r\n  if (numDegree < denDegree) {\r\n    ans = \"0\"\r\n  } else {\r\n    ans = numDegree === denDegree ? math.simplify(`${topLC}/${bottomLC}`).toString() : `\\\\infty`\r\n    const topSign = topSqrt || numDegree % 2 === 0 || !approaches\r\n    const bottomSign = bottomSqrt || denDegree % 2 === 0 || !approaches\r\n    if ((topSign && !bottomSign) || (bottomSign && !topSign)) {\r\n      ans = `-${ans}`\r\n    }\r\n  }\r\n\r\n  const title = <></>\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Evaluate the limit.</h3>\r\n    <Latex expression={`${func} = `} display={true} />\r\n  </div>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      We are trying to evaluate <Latex expression={`${func}`} display={true} />\r\n    </div>\r\n  ]\r\n\r\n  if (topSqrt || bottomSqrt) {\r\n    hints.push(<div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We can see there are roots in this function. Remember, to simplify these, we want to focus on the highest degree term and take the root of that.\r\n      </div>\r\n      <div>\r\n        Keep in mind, though, that when we take the root, we want to surround the result with an absolute value so we remember it is positive!\r\n      </div>\r\n    </div>)\r\n  }\r\n\r\n  hints.push(\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        {topSqrt || bottomSqrt ? \"Once you've done that, the next step is to \" : \"In order to solve this, we \"}just need to find the horizontal asymptotes. Remember our 3 rules for that:\r\n      </div>\r\n      <ul className=\"text-start\">\r\n        <li>\r\n          If <Latex expression=\"n < d\" />, the horizontal asymptote is 0.\r\n        </li>\r\n        <li>\r\n          If <Latex expression=\"n = d\" />, the horizontal asymptote is the ratio of the leading coefficients.\r\n        </li>\r\n        <li>\r\n          If <Latex expression=\"n > d\" />, there is no horizontal asymptote.\r\n        </li>\r\n      </ul>\r\n    </div>)\r\n\r\n  hints.push(<div className=\"flex vertical center medium-gap\">\r\n    <div>\r\n      Looking at the degrees of the top and bottom of this function, is there a horizontal asymptote? If yes, then that is your answer!\r\n    </div>\r\n    <div>\r\n      If not, however, remember you can focus on the highest degree terms again. After doing that, try simpliying the remaining equation, and from there plugging in <Latex expression={`x = ${approaches ? `-` : ``}\\\\infty`} /> to find the result. Remember to keep the signs of the values in mind!\r\n    </div>\r\n  </div>)\r\n\r\n  return { question, ans, type: 'math', title, hints, math_input_buttons: [\"infinity\"] }\r\n}\r\n\r\n/** Helper function to generate function for above problem */\r\nconst getFunction = (degree: number, leadingCoeff: number, sqrt: boolean) => {\r\n  let func = getPolynomialFunction(sqrt ? degree * 2 : degree, false, true)\r\n  const coeffs = getCoeffsOfPolynomial(func)\r\n  coeffs[coeffs.length - 1] = sqrt ? leadingCoeff ** 2 : leadingCoeff\r\n\r\n  // ensure max of 4 nonzero terms\r\n  // count num nonzeros\r\n  let numNonZeros = coeffs.filter(x => x !== 0).length\r\n  let zeros = numNonZeros - 4\r\n  for (let i = coeffs.length - 2; zeros > 0 && i >= 0; i--) {\r\n    if (coeffs[i] !== 0) {\r\n      coeffs[i] = 0\r\n      zeros--\r\n    }\r\n  }\r\n\r\n  func = buildPolynomialFromCoeffs(coeffs)\r\n  func = formatPolynomialToLatex(func)\r\n  return sqrt ? `\\\\sqrt{${func}}` : func\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  return generateAsymptoticFunction()\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["getFunction","degree","leadingCoeff","sqrt","func","getPolynomialFunction","coeffs","getCoeffsOfPolynomial","length","zeros","filter","x","i","buildPolynomialFromCoeffs","formatPolynomialToLatex","concat","generateRandomQuestion","generateAsymptoticFunction","numDegree","getRandomNumber","denDegree","topSqrt","Boolean","bottomSqrt","topLC","bottomLC","numerator","denominator","approaches","ans","math","toString","topSign","bottomSign","title","_jsx","_Fragment","question","_jsxs","className","children","Latex","expression","display","hints","push","type","math_input_buttons"],"sourceRoot":""}