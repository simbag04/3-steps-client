{"version":3,"file":"static/js/899.fb890423.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.tsx","components/content-components/graphs/FunctionGraph.tsx","topics/01-limits/09-exploring-types-of-discontinuities/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\ninterface AsymptoticGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  x: number[], // xvalues of asymptotes where there will be dotted lines\r\n  y: number[] // y values of asymptotes where there will be dotted lines\r\n}\r\n\r\nconst AsymptoticGraph: React.FC<AsymptoticGraphProps> = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","import { getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport { generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\"\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport React from \"react\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport { Option } from \"../../../@types/Option\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport * as math from \"mathjs\"\r\nimport { COLORS } from \"../../../helpers/constants\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\n\r\nconst jumpGraphQuestion = (): any => {\r\n  const xVal: number = getRandomNumber(-8, 8); // xval where there is a jump\r\n  const y1 = getRandomNumber(-7, 7);\r\n  const y2 = getRandomNumber(0, 10) <= 2 ? y1 : getRandomWithExclusions(-7, 7, [y1])\r\n  const includeLeft = getRandomNumber(0, 1) === 0\r\n  const f1 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), xVal, y1)\r\n  const f2 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), xVal, y2)\r\n  const functions: GraphFunction[] = [\r\n    {\r\n      f: (x: number) => f1.evaluate({ x }),\r\n      min: -11,\r\n      max: xVal,\r\n      includeLeft: false,\r\n      includeRight: includeLeft,\r\n      leftArrow: true,\r\n      rightArrow: false,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: true\r\n    },\r\n    {\r\n      f: (x: number) => f2.evaluate({ x }),\r\n      min: xVal,\r\n      max: 11,\r\n      includeLeft: y1 === y2 || !includeLeft,\r\n      includeRight: false,\r\n      leftArrow: false,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: true,\r\n      rightCircle: true\r\n    }\r\n  ];\r\n\r\n  let tempQuestion: React.JSX.Element = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const { title, options, hints } = generateOptionsAndHints(\"jump\", tempQuestion, y1 === y2)\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {title}\r\n    {tempQuestion}\r\n  </div>\r\n\r\n  return { question, title: <></>, input: options, hints }\r\n}\r\n\r\nconst infiniteGraphQuestion = () => {\r\n  const xVal = getRandomNumber(-7, 7); // values at which there will be an asymptote\r\n  let f = `(${getRandomNumber(0, 1) === 0 ? \"-\" : \"\"}1/\r\n    (x ${xVal > 0 ? `-${xVal}` : `+${Math.abs(xVal)}`})`; // function\r\n\r\n  const verticalShift = getRandomNumber(-5, 5)\r\n  f = f + `) ${verticalShift > 0 ? '+' : '-'} ${Math.abs(verticalShift)}`\r\n\r\n  const node = math.parse(f);\r\n  const functions: GraphFunction[] = [\r\n    {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min: -11,\r\n      max: xVal,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    },\r\n    {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min: xVal,\r\n      max: 11,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    },\r\n  ]\r\n\r\n  const tempQuestion = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <AsymptoticGraph functions={functions} size={GRAPH_SIZE} x={[xVal]} y={[verticalShift]} />\r\n  </div>\r\n\r\n  const { title, options, hints } = generateOptionsAndHints(\"infinite\", tempQuestion, false)\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {title}\r\n    {tempQuestion}\r\n  </div>\r\n\r\n  return { question, title: <></>, input: options, hints }\r\n}\r\n\r\nconst removableGraphQuestion = (): any => {\r\n  const xVal: number = getRandomNumber(-8, 8); // xval where there is a potential discontinuity\r\n  const y1 = getRandomNumber(-7, 7);\r\n  const y2 = getRandomNumber(0, 10) <= 3 ? y1 : getRandomWithExclusions(-7, 7, [y1])\r\n  const f1 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), xVal, y1)\r\n  const f2 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), xVal, y1)\r\n  const functions: GraphFunction[] = [\r\n    {\r\n      f: (x: number) => f1.evaluate({ x }),\r\n      min: -11,\r\n      max: xVal,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: false,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: true\r\n    },\r\n    {\r\n      f: (x: number) => f2.evaluate({ x }),\r\n      min: xVal,\r\n      max: 11,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: false,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: true,\r\n      rightCircle: true\r\n    }\r\n  ];\r\n\r\n  const points: GraphPoint[] = [\r\n    {\r\n      x: xVal,\r\n      y: y2,\r\n      classes: 'f'\r\n    }\r\n  ]\r\n\r\n  let tempQuestion: React.JSX.Element = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} points={points} />\r\n  </div>\r\n\r\n  const { title, options, hints } = generateOptionsAndHints(\"removable\", tempQuestion, y1 === y2)\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {title}\r\n    {tempQuestion}\r\n  </div>\r\n\r\n  return { question, title: <></>, input: options, hints }\r\n}\r\n\r\nconst generateOptionsAndHints =\r\n  (graphType: string, question: React.JSX.Element, continuous?: boolean): any => {\r\n    let title: React.JSX.Element;\r\n    let options: Option[];\r\n    const hints = []\r\n    hints.push(<>\r\n      <div>\r\n        Recall our 3 types of discontinuities:\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            a <strong>jump</strong> discontinuity - when there is a jump in the graph\r\n          </li>\r\n          <li>\r\n            an <strong>infinite</strong> discontinuity - when a graph has asymptotes\r\n          </li>\r\n          <li>\r\n            a <strong>removable</strong> discontinuity - when only the value of the function is inconsistent with the rest of the graph\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>)\r\n\r\n    if (continuous || getRandomNumber(0, 1) === 0) {\r\n      title = <h3>\r\n        Is the graph below continuous?\r\n      </h3>\r\n      hints.push(<div className=\"flex vertical center medium-gap\">\r\n        <div>\r\n          Are any of these discontinuities present in this graph?\r\n        </div>\r\n        {question}\r\n      </div>)\r\n\r\n      options = [\r\n        {\r\n          component: <div>Yes</div>,\r\n          correct: continuous\r\n        },\r\n        {\r\n          component: <div>No</div>,\r\n          correct: !continuous\r\n        },\r\n      ]\r\n    } else {\r\n      title = <h3>\r\n        What type  of discontinuity is shown in the graph below?\r\n      </h3>\r\n      hints.push(<div className=\"flex vertical center medium-gap\">\r\n        <div>\r\n          What type of discontinuity is shown here?\r\n        </div>\r\n        {question}\r\n      </div>)\r\n\r\n      options = [\r\n        {\r\n          component: <div>Jump Discontinuity</div>,\r\n          correct: graphType === \"jump\"\r\n        },\r\n        {\r\n          component: <div>Infinite Discontinuity</div>,\r\n          correct: graphType === \"infinite\"\r\n        },\r\n        {\r\n          component: <div>Removable Discontinuity</div>,\r\n          correct: graphType === \"removable\"\r\n        }\r\n      ]\r\n    }\r\n\r\n    return { title, options, hints }\r\n  }\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  let question: any;\r\n  const rand = getRandomNumber(0, 11);\r\n  if (rand <= 3) {\r\n    question = removableGraphQuestion();\r\n  } else if (rand <= 7) {\r\n    question = infiniteGraphQuestion();\r\n  } else {\r\n    question = jumpGraphQuestion();\r\n  }\r\n\r\n  question.type = 'mc'\r\n\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return question\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","generateOptionsAndHints","graphType","question","continuous","title","options","hints","push","_Fragment","children","_jsxs","className","getRandomNumber","component","correct","generateRandomQuestion","rand","removableGraphQuestion","xVal","y1","y2","getRandomWithExclusions","f1","generateRandomPolynomialWithPoint","f2","f","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","tempQuestion","Latex","expression","inline","FunctionGraph","GRAPH_SIZE","input","infiniteGraphQuestion","concat","Math","abs","verticalShift","node","math","type","AsymptoticGraph","jumpGraphQuestion","document","documentElement","setProperty","COLORS"],"sourceRoot":""}