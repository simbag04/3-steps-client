{"version":3,"file":"static/js/360.17071f56.chunk.js","mappings":"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","sources":["topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.js"],"sourcesContent":["import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nfunction limitByFactoring() {\r\n  const holeX = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor = getStringFactorFromXval(holeX);\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = getRandomNumber(0, 1) === 0 || topFactor === \"1\" ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator = sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator = sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified;\r\n  if (radical) {\r\n    const numeratorWithRoot = getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify(\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\" ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n  if (radical) {\r\n    hints.push(\r\n      <div>\r\n        This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} />, which gives us an expression in the form <Latex expression={`a + b`} />\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} />, and that will remove the radical!\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Try evaluating the limit again. Do you still get <Latex expression={`\\\\frac{0}{0}`} />?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      That's ok! There is a hole in the function that we need to remove. The next logical step is to factor both the top and bottom of the fraction.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      You should see where the hole is coming from now! Cancel these factors, and now try evaluating the limit. What do you get now?\r\n    </div>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nfunction limitByTrig() {\r\n  const topVar = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar = !topVar ? 1 : 0;\r\n  const toExpand = getRandomNumber(0, 1); // whether top should be in 1 - form or just trig^2\r\n  let ans = 0;\r\n  let numerator;\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n  let xVal = math.parse(xvals[topVar][plus]).toTex(); // decide xval so top/bottom are 0/0\r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [0]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [0]);\r\n\r\n  let toMultiply;\r\n  let first;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (toExpand) {\r\n    hints.push(\r\n      <div>\r\n        Try factoring out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top.\r\n      </div>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`sin^2(x) + cos^2(x) = 1`} />? How can we use that to rewrite the top?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Can you factor the numerator now, and cancel a factor from top and bottom? Once you do that, try evaluating the limit again!\r\n    </div>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nfunction generateRandomQuestion() {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 8) {\r\n    q = limitByFactoring();\r\n  } else {\r\n    q = limitByTrig();\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nfunction makeSquaredForLatex(trigFunction) {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns \r\n */\r\nfunction modifyToMakeRoot(expression, x) {\r\n  // generate random linear function\r\n  let b = sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["nerdamer","require","normalTrig","otherTrig","xvals","makeSquaredForLatex","trigFunction","concat","substring","modifyToMakeRoot","expression","x","b","sortPolynomialByDegree","getPolynomialFunction","getRandomNumber","expand","math","node","root","toString","charAt","q","holeX","holeFactor","getStringFactorFromXval","topFactor","bottomFactor","topValue","bottomValue","modified","numerator","denominator","ans","radical","formatPolynomialToLatex","toTeX","replaceAll","nextToInput","_jsx","Latex","display","hints","_jsxs","children","push","type","limitByFactoring","toMultiply","first","topVar","bottomVar","toExpand","plus","xVal","toTex","nconstant","getRandomWithExclusions","dconstant","nerdamerFormatToLatex","limitByTrig","title","_Fragment","question","className"],"sourceRoot":""}