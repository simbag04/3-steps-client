{"version":3,"file":"static/js/293.66fd4616.chunk.js","mappings":"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","sources":["topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.tsx"],"sourcesContent":["import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction, generateSpecialTrig } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\"; \r\nimport React from \"react\"\r\nimport { Question } from \"../../../@types/Question\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nconst limitByFactoring = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans: any = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified: any = null;\r\n  if (radical) {\r\n    const numeratorWithRoot: number = \r\n      getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = (ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\") \r\n      ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression: string = \r\n    `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (radical) {\r\n    hints.push(\r\n      <div>\r\n        This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} />, which gives us an expression in the form <Latex expression={`a + b`} />\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} />, and that will remove the radical!\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Try evaluating the limit again. Do you still get <Latex expression={`\\\\frac{0}{0}`} />?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      That's ok! There is a hole in the function that we need to remove. The next logical step is to factor both the top and bottom of the fraction.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      You should see where the hole is coming from now! Cancel these factors, and now try evaluating the limit. What do you get now?\r\n    </div>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nconst limitByTrig = (): any => {\r\n  const topVar: number = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar: number = !topVar ? 1 : 0;\r\n  const toExpand: number = getRandomNumber(0, 1); // whether top should be in 1 - form or trig^2\r\n  let ans: any = 0;\r\n  let numerator: string = \"\";\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator: string = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n\r\n  // decide xval so top/bottom are 0/0\r\n  let xVal: string = math.parse(xvals[topVar][plus]).toTex(); \r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [0]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [0]);\r\n\r\n  let toMultiply: number;\r\n  let first: string;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression: string = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (toExpand) {\r\n    hints.push(\r\n      <div>\r\n        Try factoring out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top.\r\n      </div>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`sin^2(x) + cos^2(x) = 1`} />? How can we use that to rewrite the top?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Can you factor the numerator now, and cancel a factor from top and bottom? Once you do that, try evaluating the limit again!\r\n    </div>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nconst limitByTrigSpecialCases = (): any => {\r\n  const numeratorDegree: number = getRandomNumber(0, 3); // total degree for numerator\r\n  const hints: React.JSX.Element[] = []\r\n\r\n  // initialization\r\n  let numerator: string = \"1\"; \r\n  let denominator: string = \"1\";\r\n  let ans = \"dne\";\r\n\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let denDegree = numeratorDegree;\r\n  \r\n  // generate random denominator degree occasionally\r\n  const same = getRandomNumber(0, 9); // whether degree is the same\r\n  if (numeratorDegree === 0 || same < 1) { \r\n    denDegree = getRandomNumber(1, 3);\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      <div>\r\n        Evaluating this with direct substitution, we get <Latex expression={`\\\\frac{0}{0}`} />. However, this doesn't look like factoring or rationalization. What is another technique that we learned?\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      Remember <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1?`} display={true} />\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      In order to use these, rememember that the <Latex expression={`x`} /> in the equations can be anything. Also rememember that we can manipulate the fractions to apply these limits.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      For example, we can multiply the fraction by <Latex expression={`\\\\frac{x}{x}`} /> or <Latex expression={`\\\\frac{2}{2}`} /> to try to fit the formulas we have!\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      After simplifying the whole thing, what is left? If there is still an expression left, try using direct substitution, and see if it still gives <Latex expression={`\\\\frac{0}{0}`} />. If not, you should have an answer! Otherwise, keep simplifying. \r\n    </div>\r\n  )\r\n\r\n  // generate terms based on degree\r\n  let obj = generateSpecialTrig(numeratorDegree, multipliedAns, false)\r\n  numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(denDegree, multipliedAns, true)\r\n  denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  // decide ans\r\n  if (denDegree < numeratorDegree) {\r\n    ans = \"0\"\r\n  } else if (denDegree > numeratorDegree) {\r\n    ans = \"dne\"\r\n  } else {\r\n    multipliedAns = \"(\" + multipliedAns + \")\"\r\n    ans = math.simplify(multipliedAns).toString()\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  return { ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = limitByFactoring();\r\n  } else if (rand <= 9) {\r\n    q = limitByTrigSpecialCases();\r\n  } else {\r\n    q = limitByTrig()\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nconst makeSquaredForLatex = (trigFunction: string): string => {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns object containing both root and b value in (a - b)\r\n */\r\nconst modifyToMakeRoot = (expression: string, x: number): any => {\r\n  // generate random linear function\r\n  let b: string = \r\n    sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["nerdamer","require","normalTrig","otherTrig","xvals","makeSquaredForLatex","trigFunction","concat","substring","modifyToMakeRoot","expression","x","b","sortPolynomialByDegree","getPolynomialFunction","getRandomNumber","expand","math","node","root","toString","charAt","generateRandomQuestion","rand","q","limitByFactoring","holeX","holeFactor","getStringFactorFromXval","topFactor","bottomFactor","topValue","bottomValue","numerator","denominator","ans","radical","modified","formatPolynomialToLatex","toTeX","replaceAll","nextToInput","_jsx","Latex","display","hints","_jsxs","children","push","type","limitByTrigSpecialCases","numeratorDegree","multipliedAns","denDegree","same","obj","generateSpecialTrig","term","limitByTrig","topVar","bottomVar","toExpand","plus","xVal","toTex","nconstant","getRandomWithExclusions","dconstant","toMultiply","first","nerdamerFormatToLatex","title","_Fragment","question","className"],"sourceRoot":""}