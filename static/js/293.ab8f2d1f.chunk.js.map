{"version":3,"file":"static/js/293.ab8f2d1f.chunk.js","mappings":"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","sources":["topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.tsx"],"sourcesContent":["import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction, generateSpecialTrig } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport React from \"react\"\r\nimport { Question } from \"../../../@types/Question\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nconst limitByFactoring = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let originalNumerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n  let originalDenominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans: any = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified: any = null;\r\n  const numeratorWithRoot: number =\r\n    getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n  if (radical) {\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = (ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\")\r\n      ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression: string =\r\n    `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints: React.JSX.Element[] = [\r\n    <>\r\n      <div>\r\n        First, evaluate the limit with direct substitution:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n  ]\r\n\r\n  const tempRadical = modified ? `(\\\\sqrt{${modified.root}} - (${formatPolynomialToLatex(modified.b)}))` : ''\r\n  if (radical) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} display={true} />\r\n        </div>\r\n        <div>\r\n          This gives us an expression in the form <Latex expression={`a + b`} />.\r\n        </div>\r\n      </>\r\n\r\n\r\n    )\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} /> and simplify. This should give you:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${holeX}}\\\\frac{(${originalNumerator})${!numeratorWithRoot ? tempRadical : ''}}{(${originalDenominator})${numeratorWithRoot ? tempRadical : ''}}`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        However, try evaluating the limit again, and you will still get <Latex expression={`\\\\frac{0}{0}`} />.\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Next, try factoring the top and bottom to see if we can cancel any factors.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        This should give you:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${holeX}}\\\\frac{${holeFactor}(${formatPolynomialToLatex(topFactor)})${!numeratorWithRoot ? tempRadical : ''}}{${holeFactor}(${formatPolynomialToLatex(bottomFactor)})${numeratorWithRoot ? tempRadical : ''}}`} display={true} />\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      Now we see that <Latex expression={holeFactor} /> is on the top and bottom! Cancel this, and evaluate the limit again.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Evaluating again, you will find that the correct answer is{ans === \"dne\" ? \" a number over 0, which means\" : ''}:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nconst limitByTrig = (): any => {\r\n  const topVar: number = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar: number = !topVar ? 1 : 0;\r\n  const toExpand: number = getRandomNumber(0, 1); // whether top should be in 1 - form or trig^2\r\n  let ans: any = 0;\r\n  let numerator: string = \"\";\r\n  let latexNumerator: string = \"\"\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator: string = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n  let latexDenominator: string = `1 ${plus ? '+' : '-'} \\\\${normalTrig[bottomVar]}`\r\n  const otherDenominator: string = `1 ${plus ? '-' : '+'} \\\\${normalTrig[bottomVar]}`\r\n\r\n  // decide xval so top/bottom are 0/0\r\n  let xVal: string = math.parse(xvals[topVar][plus]).toTex().replaceAll('~', \"\");\r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [-1, 0, 1]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [-1, 0, 1]);\r\n\r\n  let toMultiply: number;\r\n  let first: string;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      latexNumerator = `(\\\\${makeSquaredForLatex(first)} - \r\n      \\\\${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      latexNumerator = `(\\\\${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    latexNumerator = `\\\\${makeSquaredForLatex(normalTrig[topVar])}`\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression: string = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints: React.JSX.Element[] = [\r\n    <>\r\n      <div>\r\n        First, evaluate the limit with direct substitution:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n  ]\r\n\r\n  let numeratorPrefix = \"\"\r\n  const limText = `\\\\lim_{x \\\\to ${xVal}}`\r\n  if (toExpand) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          In order to make things more convenient, first factor out the constants on the top and bottom:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${expression} = ${limText} \r\n          \\\\left(\\\\frac{${nconstant}${latexNumerator}}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, focus on the numerator. Rewrite it with <Latex expression={`\\\\sin`} /> and <Latex expression={`\\\\cos`} />.\r\n        </div>\r\n        <div>\r\n          We want to somehow get the expression into <Latex expression={`1 - \\\\${makeSquaredForLatex(normalTrig[bottomVar])}`} />.\r\n        </div>\r\n\r\n      </>,\r\n      <>\r\n        <div>\r\n          In order to do this, we can factor out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top. This should give you:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \r\n          \\\\left(\\\\frac{${nconstant}${latexNumerator}}{${dconstant}(${latexDenominator})}\\\\right) = ${limText} \\\\left(\\\\frac{${`${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}`}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can factor the numerator:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \\\\left(\\\\frac{${`${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}`}{${dconstant}(${latexDenominator})}\\\\right) = \r\n          ${limText} \\\\left(\\\\frac{${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${normalTrig[1 - topVar]})(1 + \\\\${normalTrig[1 - topVar]})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    numeratorPrefix = `${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}`\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Remember, we can use <Latex expression={`\\\\sin^2(x) + \\\\cos^2(x) = 1`} /> to rewrite the top like this:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${expression} = ${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can factor the numerator:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}{${dconstant}(${latexDenominator})}\\\\right) = \r\n          ${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${normalTrig[1 - topVar]})(1 + \\\\${normalTrig[1 - topVar]})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    numeratorPrefix = `${nconstant}`\r\n  }\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Now, we can cancel out the factors on the numerator and denominator to get:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${xVal}} \\\\left(\\\\frac{${numeratorPrefix}(${otherDenominator})}{${dconstant}}\\\\right)`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Lastly, evaluating the limit, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nconst limitByTrigSpecialCases = (): any => {\r\n  const numeratorDegree: number = getRandomNumber(1, 2); // total degree for numerator\r\n  const hints: React.JSX.Element[] = []\r\n\r\n  // initialization\r\n  let numerator: string = \"1\";\r\n  let denominator: string = \"1\";\r\n  let ans = \"dne\";\r\n\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let denDegree = numeratorDegree;\r\n\r\n  // generate random denominator degree occasionally\r\n  const same = getRandomNumber(0, 9); // whether degree is the same\r\n  if (numeratorDegree === 0 || same < 1) {\r\n    denDegree = getRandomNumber(1, 3);\r\n  }\r\n\r\n  // generate terms based on degree\r\n  let obj = generateSpecialTrig(numeratorDegree, multipliedAns, false)\r\n  numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n  const numeratorFunctions = obj.functions\r\n\r\n  obj = generateSpecialTrig(denDegree, multipliedAns, true)\r\n  denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n  const denominatorFunctions = obj.functions\r\n\r\n  // decide ans\r\n  if (denDegree < numeratorDegree) {\r\n    ans = \"0\"\r\n  } else if (denDegree > numeratorDegree) {\r\n    ans = \"dne\"\r\n  } else {\r\n    multipliedAns = \"(\" + multipliedAns + \")\"\r\n    ans = math.simplify(multipliedAns).toString()\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Evaluating this with direct substitution, you should get\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        In order to solve this problem, we need to use these special trig limits:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1?`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Remember that we can always multiply the fraction by things equivalent to <Latex expression=\"1\" /> (ex. <Latex expression={`\\\\frac{2x}{2x}`} />) to simplify the limit.\r\n      </div>\r\n      <div>\r\n        To do this problem, we will examine each term and try to simplify it with the limits above.\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  let oldNumerator = numerator\r\n  let oldDenominator = denominator\r\n  for (let i = 0; i < numeratorFunctions.length; i++) {\r\n    let toMultiply = ''\r\n    const termToMultiply = `${numeratorFunctions[i].coeff > 1 ? numeratorFunctions[i].coeff : ''}x`\r\n\r\n    for (let j = 0; j < numeratorFunctions[i].exp; j++) {\r\n      toMultiply += `(${termToMultiply})`\r\n    }\r\n\r\n    let newNumerator = oldNumerator.replace(numeratorFunctions[i].term, '')\r\n\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Let's focus on <Latex expression={numeratorFunctions[i].term} /> on the top.\r\n        </div>\r\n        {numeratorFunctions[i].exp > 1 ?\r\n          <div>\r\n            Since this term has an exponent of <strong>{numeratorFunctions[i].exp}</strong>, we need to have <strong>{numeratorFunctions[i].exp}</strong> terms that are <Latex expression={`${numeratorFunctions[i].coeff}x`} /> on the bottom.\r\n          </div> :\r\n          <div>\r\n            In order to use our special limit properties, we need <Latex expression={`${termToMultiply}`} /> on the bottom.\r\n          </div>}\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, our new expression becomes:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${oldNumerator}}{${oldDenominator}}\\\\right) = \\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + oldNumerator}}{${toMultiply + oldDenominator}}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can simplify <Latex expression={numeratorFunctions[i].term} /> on the top with <Latex expression={`${termToMultiply}`} /> on the bottom. This gives us:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + oldNumerator}}{${toMultiply + oldDenominator}}\\\\right) = \\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + newNumerator}}{${oldDenominator}}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n\r\n    oldNumerator = toMultiply + newNumerator\r\n  }\r\n\r\n  let bottomMultiply = ''\r\n  for (let i = 0; i < denominatorFunctions.length; i++) {\r\n    let toMultiply = ''\r\n    const termToMultiply = `${denominatorFunctions[i].coeff > 1 ? denominatorFunctions[i].coeff : ''}x`\r\n\r\n    for (let j = 0; j < denominatorFunctions[i].exp; j++) {\r\n      toMultiply += `(${termToMultiply})`\r\n    }\r\n    bottomMultiply += toMultiply\r\n  }\r\n\r\n  hints.push(<>\r\n    <div>\r\n      Applying a very similar process to the bottom, you should get the expression to be:\r\n    </div>\r\n    <div>\r\n      <Latex expression={`\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${oldNumerator}}{${bottomMultiply}}\\\\right)`} display={true} />\r\n    </div>\r\n  </>)\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Simplifying this and evaluating the limit, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = limitByFactoring();\r\n  } else if (rand <= 9) {\r\n    q = limitByTrigSpecialCases();\r\n  } else {\r\n    q = limitByTrig()\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nconst makeSquaredForLatex = (trigFunction: string): string => {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns object containing both root and b value in (a - b)\r\n */\r\nconst modifyToMakeRoot = (expression: string, x: number): any => {\r\n  // generate random linear function\r\n  let b: string =\r\n    sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["nerdamer","require","normalTrig","otherTrig","xvals","makeSquaredForLatex","trigFunction","concat","substring","modifyToMakeRoot","expression","x","b","sortPolynomialByDegree","getPolynomialFunction","getRandomNumber","expand","math","node","root","toString","charAt","generateRandomQuestion","rand","q","limitByFactoring","holeX","holeFactor","getStringFactorFromXval","topFactor","bottomFactor","topValue","bottomValue","numerator","originalNumerator","denominator","originalDenominator","ans","radical","modified","numeratorWithRoot","formatPolynomialToLatex","toTeX","replaceAll","nextToInput","_jsx","Latex","display","hints","_jsxs","_Fragment","children","tempRadical","push","className","type","limitByTrigSpecialCases","numeratorDegree","multipliedAns","denDegree","same","obj","generateSpecialTrig","term","numeratorFunctions","functions","denominatorFunctions","oldNumerator","oldDenominator","i","length","toMultiply","termToMultiply","coeff","j","exp","newNumerator","replace","bottomMultiply","limitByTrig","topVar","bottomVar","toExpand","latexNumerator","plus","latexDenominator","otherDenominator","xVal","toTex","nconstant","getRandomWithExclusions","dconstant","first","nerdamerFormatToLatex","numeratorPrefix","limText","title","question"],"sourceRoot":""}