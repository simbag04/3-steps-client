{"version":3,"file":"static/js/11.228ff526.chunk.js","mappings":"yLAiBA,MA0CA,EA1CwDA,IAAgC,IAA/B,UAAEC,EAAS,KAAEC,EAAI,EAAEC,EAAC,EAAEC,GAAGJ,EAChF,MAAMK,GAASC,EAAAA,EAAAA,QAAO,MAoCtB,OAlCAC,EAAAA,EAAAA,YAAU,KACR,GAAIF,EAAOG,QAAS,CAClB,MAAM,OAAEC,EAAM,MAAEC,EAAK,OAAEC,EAAM,OAAEC,IAC7BC,EAAAA,EAAAA,GAAkBX,EAAMA,EAAMG,EAAQ,IAClCS,EAAMC,EAAAA,GAAUV,EAAOG,UAE7BQ,EAAAA,EAAAA,IAA6BF,EAAKb,EAAWS,EAAOD,EAAQE,EAAQC,GACpEE,EAAIG,OAAO,cAAcC,QAGzB,MAAMC,EAAOJ,EAAAA,MACVZ,GAAEiB,GAAKT,EAAOS,EAAEjB,KAChBC,GAAEgB,GAAKR,EAAOQ,EAAEhB,KAEnB,IAAK,IAAIiB,EAAI,EAAGA,EAAIjB,EAAEkB,OAAQD,IAC5BP,EAAIS,OAAO,QACRC,MAAM,CAAC,CAAErB,EAAGQ,EAAOc,OAAO,GAAIrB,EAAGA,EAAEiB,IAAM,CAAElB,EAAGQ,EAAOc,OAAOf,GAAQN,EAAGA,EAAEiB,MACzEK,KAAK,QAAS,WACdA,KAAK,eAAgB,GACrBC,MAAM,mBAAoB,GAC1BD,KAAK,IAAKP,GAGf,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAEmB,OAAQD,IAC5BP,EAAIS,OAAO,QACRC,MAAM,CAAC,CAAErB,EAAGA,EAAEkB,GAAIjB,EAAGQ,EAAOa,OAAO,IAAM,CAAEtB,EAAGA,EAAEkB,GAAIjB,EAAGQ,EAAOa,OAAOhB,MACrEiB,KAAK,QAAS,WACdA,KAAK,eAAgB,GACrBC,MAAM,mBAAoB,GAC1BD,KAAK,IAAKP,EAEjB,IACC,CAAClB,EAAWC,EAAMC,EAAGC,KAGtBwB,EAAAA,EAAAA,KAAA,OAAKC,IAAKxB,GAAU,C,8FCjCxB,MAqBA,EArBoDL,IAAyD,IAAxD,UAAEC,EAAS,KAAEC,EAAI,KAAE4B,EAAI,KAAEC,EAAI,KAAEC,EAAI,KAAEC,EAAI,OAAEC,GAAOlC,EACrG,MAAMK,GAASC,EAAAA,EAAAA,QAAO,MAetB,OAbAC,EAAAA,EAAAA,YAAU,KACR,GAAIF,EAAOG,QAAS,CAClB,MAAM,OAAEC,EAAM,MAAEC,EAAK,OAAEC,EAAM,OAAEC,IAC7BC,EAAAA,EAAAA,GAAkBX,EAAMA,EAAMG,EAAQ,GAAIyB,EAAMC,EAAMC,EAAMC,GACxDnB,EAAMC,EAAAA,GAAUV,EAAOG,UAE7BQ,EAAAA,EAAAA,IAA6BF,EAAKb,EAAWS,EAAOD,EAAQE,EAAQC,GAChEsB,IAAQC,EAAAA,EAAAA,IAAiBrB,EAAKoB,EAAQvB,EAAQC,GAElDE,EAAIG,OAAO,cAAcC,OAC3B,IACC,CAACjB,EAAWC,EAAM4B,EAAMC,EAAME,EAAMD,EAAME,KAG3CN,EAAAA,EAAAA,KAAA,OAAKC,IAAKxB,GAAU,C,0FCvCxB,MAAM+B,EAAWC,OAAOC,WAAa,IAAM,IAAM,EAC3CC,EAAaF,OAAOC,WAAa,IAAM,GAAM,GAC7CE,EAAcH,OAAOC,WAAa,IAAM,GAAM,GAC9CG,EAAaJ,OAAOC,WAAa,IAAM,IAAM,IAC7CI,EAAS,CAAC,MAAO,QAAS,OAAQ,SAAU,UAC5CC,EAAU,+BACVC,EAAW,8B,gJCWjB,MAAMC,EAAuB,SAACC,EAAaC,EAAaC,GAAsD,IAAzCC,EAAeC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IACjFE,EAAO,GAEX,IAAK,IAAI/B,EAAI0B,EAAK1B,GAAK2B,EAAK3B,GAAK4B,EAAS,CACxC,MAAM9C,EAAIkB,EACJjB,EAAI0C,EAAEzB,GACZ+B,EAAKC,KAAK,CAAElD,IAAGC,KACjB,CAEA,OAAOgD,CACT,EAoBME,EAAsBA,CAACxC,EAAUgC,EAAapC,EAAeD,EACjE8C,EAAe5C,EAAaC,EAAa4C,EAAiBT,EAC1DC,EAAaS,EAAoBC,EAAqBC,EAAeV,KAErE,IAAIG,EAAOP,EAAqBC,EAAGC,EAAKC,EAAKC,GAQ7C,GALAG,EAAOA,EAAKQ,QAAQxC,GAAMA,EAAEjB,EAAI0D,KAAKd,IAAIpC,EAAOc,OAAO,GAAIuB,IACzD5B,EAAEjB,EAAI0D,KAAKb,IAAIrC,EAAOc,OAAOf,GAAQqC,IACrC3B,EAAEhB,EAAIQ,EAAOa,OAAOhB,IACpBW,EAAEhB,EAAIQ,EAAOa,OAAO,KAET,eAATkC,EAAuB,CAEzB,GAAIZ,EAAMpC,EAAOc,OAAO,GAAI,CAE1B,MAAMrB,EAAIgD,EAAK,GAAGhD,EAAI,EAAIQ,EAAOa,OAAO,GAAKb,EAAOa,OAAOhB,GAC3D,IAAIW,EAAI0C,EAAkBhB,EAAG1C,EAAG2C,EAAM,KAASK,EAAK,GAAGjD,EAAG,KACtDiB,GAAGgC,EAAKW,QAAQ,CAAE5D,EAAGiB,EAAGhB,EAAG0C,EAAE1B,IACnC,CAGA,GAAI4B,EAAMrC,EAAOc,OAAOf,GAAQ,CAE9B,MAAMN,EAAIgD,EAAKA,EAAK9B,OAAS,GAAGlB,EAAI,EAAIQ,EAAOa,OAAO,GAAKb,EAAOa,OAAOhB,GACzE,IAAIW,EAAI0C,EAAkBhB,EAAG1C,EAAGgD,EAAKA,EAAK9B,OAAS,GAAGnB,EAAG6C,EAAM,KAAS,KACpE5B,GAAGgC,EAAKC,KAAK,CAAElD,EAAGiB,EAAGhB,EAAG0C,EAAE1B,IAChC,CACF,CAEA,MAAMD,EAAOJ,EAAAA,MACVZ,GAAEiB,GAAKT,EAAOS,EAAEjB,KAChBC,GAAEgB,GAAKR,EAAOQ,EAAEhB,KAIb4D,EAAI,GAAAC,QAAMC,EAAAA,EAAAA,KAAQ,kBACxBC,EAAkBH,EAAMlD,EAFL,EAEsByC,EAAOC,GAGhD,MAAMY,GAAKF,EAAAA,EAAAA,KAeX,OAdApD,EAAIS,OAAO,QACRC,MAAM4B,GACN1B,KAAK,YAAa0C,GAClB1C,KAAK,QAAS,UAAY8B,GAC1B9B,KAAK,OAAQ,QACbA,KAAK,SAAU6B,GACf7B,KAAK,eAAgB,GACrBA,KAAK,aAAcgC,EAAU,QAAAO,OAAWD,EAAI,KAAM,MAClDtC,KAAK,eAAgB+B,EAAS,QAAAQ,OAAWD,EAAI,KAAM,MACnDtC,KAAK,IAAKP,GAEbL,EAAIG,OAAO,cAAcC,QACzBJ,EAAIG,OAAO,eAAeC,QAEnB,CAAEkC,OAAMgB,KAAI,EAYfN,EAAoBA,CAACO,EAAgBjE,EAAWkE,EAAcC,EAAcC,KAKhF,IAJA,IAAIC,EAAIH,EACJI,EAAIH,EAGDG,EAAID,EAAI,MAAS,CACtB,IAAIE,GAAQF,EAAIC,GAAK,EACjBE,EAAOP,EAAKM,GAEhB,GAAIvE,EAAI,GAAKwE,GAAQxE,GAAKA,EAAIwE,EAAOJ,EACnC,OAAOG,EAET,GAAIvE,EAAI,GAAKwE,GAAQxE,GAAKwE,EAAOxE,EAAIoE,EACnC,OAAOG,EAILN,EAAKC,GAAQD,EAAKE,IAASK,EAAOxE,EAEpCqE,EAAIE,EACKN,EAAKC,GAAQD,EAAKE,IAGlBF,EAAKC,GAAQD,EAAKE,IAASK,EAAOxE,EAD3CsE,EAAIC,EAIKN,EAAKC,GAAQD,EAAKE,KAE3BE,EAAIE,EAER,CAEA,OAAQF,EAAIC,GAAK,CAAC,EAad1D,EAA+BA,CAACF,EAAUb,EAA4BS,EAAeD,EAAgBE,EAAaC,KACtH,MAAMiE,EAAY,GAElB,IAAK,IAAIxD,EAAI,EAAGA,EAAIpB,EAAUqB,OAAQD,IAAK,CAEzC,MAAMgD,EAAOpE,EAAUoB,IACjB,KAAE+B,EAAI,GAAEgB,GAAOd,EAAoBxC,EAAKuD,EAAKvB,EAAGpC,EAAOD,EAAQ,KAAME,EAAQC,EAAQyD,EAAKb,QAASa,EAAKtB,IAAKsB,EAAKrB,IAAKqB,EAAKZ,UAAWY,EAAKX,WAAYW,EAAKV,KAAMU,EAAKpB,SAE9K4B,EAAUA,EAAUvD,QAAU,CAAE8B,OAAMgB,MAGlCC,EAAKS,YACPhE,EACGS,OAAO,UACPG,KAAK,QAAS,gBAAkB2C,EAAKU,YAAc,GAAK,SAAWV,EAAKb,SACxE9B,KAAK,KAAMf,EAAO0D,EAAKtB,MACvBrB,KAAK,KAAMd,EAAOyD,EAAKvB,EAAEuB,EAAKtB,OAC9BrB,KAAK,IAAK,GAGX2C,EAAKW,aACPlE,EACGS,OAAO,UACPG,KAAK,QAAS,gBAAkB2C,EAAKY,aAAe,GAAK,SAAWZ,EAAKb,SACzE9B,KAAK,KAAMf,EAAO0D,EAAKrB,MACvBtB,KAAK,KAAMd,EAAOyD,EAAKvB,EAAEuB,EAAKrB,OAC9BtB,KAAK,IAAK,EAEjB,CAEA,MAAO,CAAEmD,YAAW,EAUhB1C,EAAmBA,CAACrB,EAAUoB,EAAsBvB,EAAaC,KACrE,IAAK,IAAIS,EAAI,EAAGA,EAAIa,EAAOZ,OAAQD,IACjCP,EACGS,OAAO,UACPG,KAAK,QAAS,eAAiBQ,EAAOb,GAAGmC,SACzC9B,KAAK,KAAMf,EAAOuB,EAAOb,GAAGlB,IAC5BuB,KAAK,KAAMd,EAAOsB,EAAOb,GAAGjB,IAC5BsB,KAAK,IAAK,EACf,EAgBIb,EAAoB,SAACH,EAAeD,EAAgBJ,EAA4C6E,GAAiK,IAA/IpD,EAAYoB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,IAAI,GAAInB,EAAYmB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAIlB,EAAYkB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,IAAI,GAAIjB,EAAYiB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAChM,MACMiC,EAAQzE,EAAQ,EADL,GAEX6C,EAAQ,UAGRzC,EAAMC,EAAAA,GAAUV,EAAOG,SAC7BM,EAAIsE,UAAU,KAAKC,SAEnBvE,EACGY,KAAK,QAAShB,GACdgB,KAAK,SAAUjB,GAGlB,MAAME,EAASI,EAAAA,MACZuE,OAAO,CAACxD,EAAMC,IACdwD,MAAM,CAACJ,EAAMzE,EAAQyE,IAElBvE,EAASG,EAAAA,MACZuE,OAAO,CAACtD,EAAMC,IACdsD,MAAM,EAAE,EAAIJ,EAAO1E,EAAQ0E,IAGxBK,EAAY1E,EAAIS,OAAO,KAC1BG,KAAK,QAAS,cAEX+D,EAAW3E,EAAIS,OAAO,KACzBG,KAAK,QAAS,aAEXgE,EAAQ5E,EAAIS,OAAO,KACtBG,KAAK,QAAS,eAEXiE,EAAQ7E,EAAIS,OAAO,KACtBG,KAAK,QAAS,eAMXkE,EAAQ7E,EAAAA,IAAS8E,IAAeC,KAAI,CAAC1E,EAAGC,IAAMS,EAAQT,IAAMU,EAAOD,GAHvD,MAIZiE,EAAShF,EAAAA,IAASiF,IAAgBF,KAAI,CAAC1E,EAAGC,IAAMS,EAAQT,IAAMU,EAAOD,GAHxD+D,MAKnBD,EAAMK,SAAQC,IACZR,EAAMnE,OAAO,QACVG,KAAK,KAAMf,EAAOuF,IAClBxE,KAAK,KAAMf,EAAOuF,IAClBxE,KAAK,KAAM,GACXA,KAAK,KAAMjB,GACXiB,KAAK,SAAU,YAAY,IAIhCqE,EAAOE,SAAQC,IACbV,EAAUjE,OAAO,QACdG,KAAK,KAAMf,EAAOuF,IAClBxE,KAAK,KAAMf,EAAOuF,IAClBxE,KAAK,KAAMd,EAAO,GAAK,GACvBc,KAAK,KAAMd,EAAO,GAAK,GACvBc,KAAK,SAAmB,IAATwE,EAAa,OAAS3C,GACrC7B,KAAK,eAAgB,GAExB+D,EAASlE,OAAO,QACbG,KAAK,IAAKf,EAAOuF,IAASA,EAAO,EAAI,KAAO,MAC5CxE,KAAK,IAAKd,EAAO,GAAK,GACtBc,KAAK,qBAAsB,WAC3BA,KAAK,cAAewE,EAAO,EAAI,QAAU,OACzCvE,MAAM,QAAS,SACfA,MAAM,YAAsB,IAATuE,EAAa,EAAIhB,EAAW,GAC/CxD,KAAK,cAAe,QACpByE,KAAKtC,KAAKuC,MAAa,IAAPF,GAAc,IAAI,IAGvCN,EAAMK,SAAQC,IACZP,EAAMpE,OAAO,QACVG,KAAK,QAAS,eACdA,KAAK,KAAM,GACXA,KAAK,KAAMhB,GACXgB,KAAK,KAAMd,EAAOsF,IAClBxE,KAAK,KAAMd,EAAOsF,IAClBxE,KAAK,SAAU,YAAY,IAIhCqE,EAAOE,SAAQC,IACbV,EAAUjE,OAAO,QACdG,KAAK,KAAMf,EAAO,GAAK,GACvBe,KAAK,KAAMf,EAAO,GAAK,GACvBe,KAAK,KAAMd,EAAOsF,IAClBxE,KAAK,KAAMd,EAAOsF,IAClBxE,KAAK,SAAmB,IAATwE,EAAa,OAAS3C,GACrC7B,KAAK,eAAgB,GAExB+D,EAASlE,OAAO,QACbG,KAAK,IAAKf,EAAO,GAAK,GACtBe,KAAK,IAAKd,EAAOsF,IAASA,EAAO,GAAK,IAAM,MAC5CxE,KAAK,qBAAsBwE,EAAO,EAAI,WAAa,WACnDxE,KAAK,cAAe,OACpBC,MAAM,QAAS,SACfA,MAAM,YAAsB,IAATuE,EAAa,EAAIhB,EAAW,GAC/CxD,KAAK,cAAe,QACpByE,KAAKtC,KAAKuC,MAAa,IAAPF,GAAc,IAAI,IAIvC,MAAMlC,EAAO,aAuBb,OAtBAG,EAAkBH,EAAMlD,EArGX,EAqGsByC,GAEnCzC,EAAIS,OAAO,QACRG,KAAK,KAAM,GACXA,KAAK,KAAMhB,GACXgB,KAAK,KAAMd,EAAO,IAClBc,KAAK,KAAMd,EAAO,IAClBc,KAAK,SAAU6B,GACf7B,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADuC,OAAUD,EAAI,MAC/BtC,KAAK,eAAe,QAADuC,OAAUD,EAAI,MAEpClD,EAAIS,OAAO,QACRG,KAAK,KAAMf,EAAO,IAClBe,KAAK,KAAMf,EAAO,IAClBe,KAAK,KAAMjB,GACXiB,KAAK,KAAM,GACXA,KAAK,SAAU6B,GACf7B,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADuC,OAAUD,EAAI,MAC/BtC,KAAK,eAAe,QAADuC,OAAUD,EAAI,MAE7B,CAAEtD,QAAOD,SAAQE,SAAQC,SAClC,EAUMuD,EAAoBA,CAACH,EAAclD,EAAUZ,EAAcqD,EAAeC,KAC9E1C,EAAIS,OAAO,QAAQA,OAAO,UACvBG,KAAK,KAAMsC,GACXtC,KAAK,QAAS,QAAU8B,GACxB9B,KAAK,OAAQxB,GACbwB,KAAK,OAAQxB,EAAO,GACpBwB,KAAK,cAAexB,GACpBwB,KAAK,eAAgBxB,GACrBwB,KAAK,SAAU,sBACfA,KAAK,OAAQ6B,GACbhC,OAAO,QACPG,KAAK,IAAI,SAADuC,OAAW/D,EAAI,MAAA+D,OAAY,EAAP/D,EAAQ,KAAA+D,OAAI/D,EAAO,EAAC,QAAO,EActDmG,EAAkBA,CAACvF,EAAUK,EAAgBmF,EAAYC,EAAYC,EAAYC,EAAYzC,EAAcR,KAE3GzC,EAAAA,GAAU,IAADkD,OAAKD,IAAQ0C,SACxBvC,EAAkBH,EAAMlD,EAAK,EAAG,KAAM0C,GAIxC1C,EAAIS,OAAO,QACRC,MAAM,CAAC,CAAErB,EAAGmG,EAAIlG,EAAGoG,GAAM,CAAErG,EAAGoG,EAAInG,EAAGqG,KACrC/E,KAAK,QAAS,UAAY8B,GAC1B9B,KAAK,eAAgB,GACrBA,KAAK,aAAa,QAADuC,OAAUD,EAAI,MAC/BtC,KAAK,IAAKP,EAAK,EAqBdwF,EAAeA,CAACC,EAAgBC,EAAkBlG,EAAaC,KAK5D,CAAEkG,KAJInG,EAAOc,OAAOmF,EAAIzG,GAIhB4G,OAHApG,EAAOc,OAAOoF,EAAM1G,GAGZ6G,KAFVpG,EAAOa,OAAOmF,EAAIxG,GAEF6G,OADdrG,EAAOa,OAAOoF,EAAMzG,KAoB/B8G,EAAcA,CAAChF,EAAqBiF,KACxC,IAAIC,EAZalF,KACL,GAAKA,EAAO4E,KAAO5E,EAAO6E,SAAY7E,EAAO8E,KAAO9E,EAAO+E,QAW3DI,CAAUnF,GACtB,MAAMoF,EAtCwBC,EAACpH,EAAWC,IACnCyD,KAAK2D,KAAOrH,GAAM,EAAOC,GAAM,GAqC1BmH,CAAwB,EAAGH,GACvC,IAAIK,GAAS,EAAIN,EAAaG,EAC1BF,EAAQ,IAAGK,IAAU,GAIzB,MAAO,CAAEtH,EAHCsH,EAGErH,EAFDqH,EAASL,EAEL,EAkBXM,EAA0BA,CAAC5G,EAAU6G,EAAmBC,EAAoBjH,EAAaC,EAAaO,EAAgB0G,EAAgBC,EAAgBC,KAG1J,IAAIC,EAAgBrH,EAAOyB,EAAAA,IAAYzB,EAAO,GAC9CqH,EAAgBF,EAAQE,GAAkB,EAAIA,EAC9C,IAAIC,EAAkBtH,EAAO4B,EAAAA,IAAc5B,EAAO,GAClDsH,EAAkBH,EAAQG,GAAoB,EAAIA,EAGlD,MAAMC,EAAWP,EAAaQ,iBAAiBP,EAAaI,GACtDI,EAAaT,EAAaQ,iBAAiBP,EAAaK,GACxDI,EAAY1B,EAAauB,EAAUE,EAAYzH,EAAQC,GACvD0H,EAAapB,EAAYmB,EAAW7F,EAAAA,IAW1C,OATI+F,MAAMD,EAAWlI,KAAIkI,EAAWlI,EAAIoC,EAAAA,IAExC6D,EAAgBvF,EAAKK,EACnBkH,EAAUvB,KAAOwB,EAAWnI,EAC5BkI,EAAUtB,OAASuB,EAAWnI,EAC9BkI,EAAUrB,KAAOsB,EAAWlI,EAC5BiI,EAAUpB,OAASqB,EAAWlI,EAC9B2H,GAA0B,WAAYF,GAEjC,CAAEO,aAAYF,WAAU,C,sHC7djC,MAmCA,EAnC4ClI,IAA0B,IAAzB,UAAEC,EAAS,KAAEC,GAAMF,EAC9D,MAAMK,GAASC,EAAAA,EAAAA,QAAO,MA6BtB,OA3BAC,EAAAA,EAAAA,YAAU,KACR,GAAIF,EAAOG,QAAS,CAClB,MAAM,OAAEC,EAAM,MAAEC,EAAK,OAAEC,EAAM,OAAEC,IAC7BC,EAAAA,EAAAA,GAAkBX,EAAMA,EAAMG,EAAQ,IAClCS,EAAMC,EAAAA,GAAUV,EAAOG,SAEvBW,EAAOJ,EAAAA,MACVZ,GAAEiB,GAAKT,EAAOS,EAAEjB,KAChBC,GAAEgB,GAAKR,EAAOQ,EAAEhB,MAEb,UAAEyE,IAAc7D,EAAAA,EAAAA,IAA6BF,EAAKb,EAAWS,EAAOD,EAAQE,EAAQC,GAG1F,IAAI4H,EAAKzH,EAAAA,GAAU,eAADkD,OAAgBY,EAAU,GAAGT,GAAE,OAAMqE,OACnDC,EAAcF,EAAGG,iBAEjBC,EAAK7H,EAAAA,GAAU,eAADkD,OAAgBY,EAAU,GAAGT,GAAE,OAAMqE,QAGvDf,EAAAA,EAAAA,IAAwB5G,EAAK0H,EAAIE,EAAa/H,EAAQC,EAAQO,EAAM,MAAM,EAAO,UACjFuG,EAAAA,EAAAA,IAAwB5G,EAAK8H,EAAI,EAAGjI,EAAQC,EAAQO,EAAM,MAAM,EAAM,QAEtEL,EAAIG,OAAO,cAAcC,OAC3B,IAEC,CAACjB,EAAWC,KAGb0B,EAAAA,EAAAA,KAAA,OAAKC,IAAKxB,GAAU,E,+CCrCxB,MAAMwI,EAAKC,EAAAA,GAAW,MAChBC,EAAKD,EAAAA,GAAW,YAChB7I,EAAY,CAChB,CACE6C,EAAG3C,GAAK0I,EAAGG,SAAS,CAAE7I,MACtB4C,KAAM,GACNC,KAAM,EACN+B,aAAa,EACbE,cAAc,EACdxB,WAAW,EACXC,YAAY,EACZF,QAAS,KACTsB,YAAY,EACZE,aAAa,GAEf,CACElC,EAAG3C,GAAK4I,EAAGC,SAAS,CAAE7I,MACtB4C,KAAM,EACNC,IAAK,GACL+B,aAAa,EACbE,cAAc,EACdxB,WAAW,EACXC,YAAY,EACZF,QAAS,KACTsB,YAAY,EACZE,aAAa,IAIXiE,EAAKH,EAAAA,GAAW,kBAChBI,EAAKJ,EAAAA,GAAW,iBAEhBK,EAAsB,CAC1B,CACErG,EAAG3C,GAAK8I,EAAGD,SAAS,CAAE7I,MACtB4C,KAAM,GACNC,IAAK,EACL+B,aAAa,EACbE,cAAc,EACdxB,WAAW,EACXC,YAAY,EACZF,QAAS,KACTsB,YAAY,EACZE,aAAa,EACbrB,KAAM,cAER,CACEb,EAAG3C,GAAK+I,EAAGF,SAAS,CAAE7I,MACtB4C,IAAK,EACLC,IAAK,GACL+B,aAAa,EACbE,cAAc,EACdxB,WAAW,EACXC,YAAY,EACZF,QAAS,KACTsB,YAAY,EACZE,aAAa,EACbrB,KAAM,eAIJyF,EAAKN,EAAAA,GAAW,YAChBO,EAAuB,CAC3B,CACEvG,EAAG3C,GAAKiJ,EAAGJ,SAAS,CAAE7I,MACtB4C,KAAM,GACNC,IAAK,GACL+B,aAAa,EACbE,cAAc,EACdxB,WAAW,EACXC,YAAY,EACZF,QAAS,KACTsB,YAAY,EACZE,aAAa,IAKXsE,EAAWA,KAEbC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,qBACc7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,OAAUC,QAAQ,IAAQ,4CAAwChI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,8BAAiCC,QAAQ,IAAQ,QAExKL,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kCAAiCJ,SAAA,EAC9CF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aAAS7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,OAAUC,QAAQ,QAChDhI,EAAAA,EAAAA,KAACkI,EAAAA,EAAa,CAAC7J,UAAWA,EAAWC,KAAMuC,EAAAA,WAM7CsH,EAAWA,KAEbR,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,iHAC0G7H,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,qBAAyB,uDAK9IO,EAAWA,KAEbT,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,uDACgD7H,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,SAAa,QAAI7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,OAAOmG,WAAU,qDAAwDC,QAAQ,IAAS,aAAQhI,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,UAAc,2CAKnNQ,EAAWA,KAEbV,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,6DACsD7H,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,UAAc,QAAI7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,OAAOmG,WAAU,qDAAwDC,QAAQ,IAAS,aAAQhI,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,SAAa,oCAKzNS,EAAWA,KAEbX,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,YACK7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,sDAAyDC,QAAQ,IAAQ,SAAKhI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,sDAAyDC,QAAQ,IAAQ,QAG7NL,EAAAA,EAAAA,MAAA,OAAKM,UAAU,uBAAsBJ,SAAA,EACnCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aAAS7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,OAAUC,QAAQ,QAChDhI,EAAAA,EAAAA,KAACuI,EAAS,CAAClK,UAAWA,EAAWC,KAAMuC,EAAAA,WAMzC2H,EAAWA,KAEbb,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,0BACmB7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,0DAA6DC,QAAQ,IAAQ,SAAKhI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,0DAA6DC,QAAQ,IAAQ,OAKjPS,EAAWA,KAEbd,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,UACG7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,sDAAyDC,QAAQ,IAAQ,KAAChI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,QAAWC,QAAQ,IAAQ,KAAChI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAAClG,QAAQ,KAAKmG,WAAU,sDAAyDC,QAAQ,IAAS,MAAChI,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,0BAA6BC,QAAQ,IAAQ,KAAChI,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,mBAAuB,OAKlWa,EAAWA,KAEbf,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,qFAC8E7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,uBAA0BC,QAAQ,IAAQ,QAE9IL,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kCAAiCJ,SAAA,EAC9CF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aAAS7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,OAAUC,QAAQ,QAChDhI,EAAAA,EAAAA,KAAC2I,EAAAA,EAAe,CAACtK,UAAWkJ,EAAqBjJ,KAAMuC,EAAAA,GAAYtC,EAAG,CAAC,GAAIC,EAAG,CAAC,WAMjFoK,EAAWA,KAEbjB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,uBACgB7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,QAAWC,QAAQ,IAAS,8EAAyEhI,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,mBAAuB,OAKxKgB,EAAYA,KAEdlB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,uEACgE7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,uBAA0BC,QAAQ,IAAQ,QAEhIL,EAAAA,EAAAA,MAAA,OAAKM,UAAU,kCAAiCJ,SAAA,EAC9CF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aAAS7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,OAAUC,QAAQ,QAChDhI,EAAAA,EAAAA,KAACkI,EAAAA,EAAa,CAAC7J,UAAWoJ,EAAsBnJ,KAAMuC,EAAAA,WAMxDiI,EAAYA,KAEdnB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,gCACyB7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAK,CAACC,WAAU,MAASC,QAAQ,IAAQ,kIAA8HhI,EAAAA,EAAAA,KAAA,UAAA6H,SAAQ,mBAAuB,OAKnOkB,EAAYA,KAEdpB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACE7H,EAAAA,EAAAA,KAAA,OAAA6H,SAAK,mEAGL7H,EAAAA,EAAAA,KAAA,OAAA6H,UACEF,EAAAA,EAAAA,MAAA,MAAIM,UAAU,QAAOJ,SAAA,EACnB7H,EAAAA,EAAAA,KAAA,MAAA6H,SAAI,4DAGJ7H,EAAAA,EAAAA,KAAA,MAAA6H,SAAI,+EAGJ7H,EAAAA,EAAAA,KAAA,MAAA6H,SAAI,wDCpMd,EAfqB,EACnB7H,EAAAA,EAAAA,KAAC0H,EAAQ,KACT1H,EAAAA,EAAAA,KAACmI,EAAQ,KACTnI,EAAAA,EAAAA,KAACoI,EAAQ,KACTpI,EAAAA,EAAAA,KAACqI,EAAQ,KACTrI,EAAAA,EAAAA,KAACsI,EAAQ,KACTtI,EAAAA,EAAAA,KAACwI,EAAQ,KACTxI,EAAAA,EAAAA,KAACyI,EAAQ,KACTzI,EAAAA,EAAAA,KAAC0I,EAAQ,KACT1I,EAAAA,EAAAA,KAAC4I,EAAQ,KACT5I,EAAAA,EAAAA,KAAC6I,EAAS,KACV7I,EAAAA,EAAAA,KAAC8I,EAAS,KACV9I,EAAAA,EAAAA,KAAC+I,EAAS,I","sources":["components/content-components/graphs/AsymptoticGraph.tsx","components/content-components/graphs/FunctionGraph.tsx","helpers/constants.ts","helpers/graph-helpers.ts","components/content-components/graphs/JumpGraph.tsx","topics/01-limits/02-evaluating-limits-using-graphs/Sections.tsx","topics/01-limits/02-evaluating-limits-using-graphs/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\ninterface AsymptoticGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  x: number[], // xvalues of asymptotes where there will be dotted lines\r\n  y: number[] // y values of asymptotes where there will be dotted lines\r\n}\r\n\r\nconst AsymptoticGraph: React.FC<AsymptoticGraphProps> = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\nconst LEFT_LIMIT = `^{\\\\footnotesize\\\\texttt{-}}`\r\nconst RIGHT_LIMIT = `^{\\\\footnotesize\\\\texttt{+}}`\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS, LEFT_LIMIT, RIGHT_LIMIT }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\nimport { GraphFunction } from '../@types/GraphFunction';\r\nimport { DataPoint } from '../@types/DataPoint';\r\nimport { GraphFunctionData } from '../@types/GraphFunctionData';\r\nimport { GraphPoint } from '../@types/GraphPoint';\r\nimport { LimitPoints } from '../@types/LimitPoints';\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f: Function, min: number, max: number, dataGap: number = 0.01): DataPoint[] => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg: any, f: Function, width: number, height: number,\r\n  color: string, xScale: any, yScale: any, classes: string, min: number,\r\n  max: number, leftArrow: boolean, rightArrow: boolean, type?: string, dataGap?: number): GraphFunctionData => {\r\n\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns xvalue at which there is intersection\r\n */\r\nconst findIntersections = (func: Function, y: number, xMin: number, xMax: number, tolerance: number): number => {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg: any, functions: GraphFunction[], width: number, height: number, xScale: any, yScale: any): { dataArray: GraphFunctionData[] } => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg: any, points: GraphPoint[], xScale: any, yScale: any) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n      .append('circle')\r\n      .attr('class', 'fill stroke ' + points[i].classes)\r\n      .attr('cx', xScale(points[i].x))\r\n      .attr('cy', yScale(points[i].y))\r\n      .attr('r', 3)\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width: number, height: number, svgRef: React.RefObject<HTMLCanvasElement>, textSize: number, minx: number = -10, maxx: number = 10, miny: number = -10, maxy: number = 10): { width: number, height: number, xScale: any, yScale: any } => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nconst createArrowMarker = (name: string, svg: any, size: number, color: string, classes?: string) => {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nconst createLimitLine = (svg: any, line: Function, x1: number, x2: number, y1: number, y2: number, name: string, classes: string) => {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nconst findHypotenusefromSlope = (x: number, y: number): number => {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nconst convertScale = (far: DataPoint, close: DataPoint, xScale: any, yScale: any): LimitPoints => {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nconst findSlope = (points: LimitPoints): number => {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nconst findOffsets = (points: LimitPoints, axisOffset: number): DataPoint => {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nconst createFunctionLimitLine = (svg: any, functionLine: any, pathLength: number, xScale: any, yScale: any, line: Function, fColor: string, right: boolean, markerName?: string): { closePoint: DataPoint, farPoint: DataPoint } => {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","/**\r\n * Creates jump graph with limit lines at the jump\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createFunctionLimitLine, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\ninterface JumpGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number // size of graph\r\n}\r\n\r\nconst JumpGraph: React.FC<JumpGraphProps> = ({ functions, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      const { dataArray } = createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n\r\n      // select function lines\r\n      let f1 = d3.select(`[data-uuid=\"${dataArray[0].id}\"]`).node();\r\n      let pathLength1 = f1.getTotalLength();\r\n\r\n      let f2 = d3.select(`[data-uuid=\"${dataArray[1].id}\"]`).node();\r\n\r\n      // create limit lines\r\n      createFunctionLimitLine(svg, f1, pathLength1, xScale, yScale, line, \"c2\", false, \"right\")\r\n      createFunctionLimitLine(svg, f2, 0, xScale, yScale, line, \"c3\", true, \"left\")\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n\r\n  }, [functions, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default JumpGraph","import Latex from \"../../../components/latex/Latex\"\r\nimport JumpGraph from \"../../../components/content-components/graphs/JumpGraph\"\r\nimport * as math from 'mathjs'\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\"\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\"\r\nimport React from \"react\"\r\n\r\n// functions to be used in sections\r\nconst n1 = math.parse(\"-x\")\r\nconst n2 = math.parse(\"0.5x + 4\")\r\nconst functions = [\r\n  {\r\n    f: x => n1.evaluate({ x }),\r\n    min: -11,\r\n    max: -2,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: x => n2.evaluate({ x }),\r\n    min: -2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: true,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  },\r\n]\r\n\r\nconst n3 = math.parse(\"-1/(x - 1) + 1\")\r\nconst n4 = math.parse(\"1/(x - 1) + 1\")\r\n\r\nconst asymptoticFunctions = [\r\n  {\r\n    f: x => n3.evaluate({ x }),\r\n    min: -11,\r\n    max: 1,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  },\r\n  {\r\n    f: x => n4.evaluate({ x }),\r\n    min: 1,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  }\r\n]\r\n\r\nconst n5 = math.parse(`sin(1/x)`)\r\nconst oscillatingFunctions = [\r\n  {\r\n    f: x => n5.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\n// sections\r\nconst Section1 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Consider a graph <Latex expression={`f(x)`} inline={true} /> that has a jump: What can we say about <Latex expression={`\\\\ {\\\\lim}_{x \\\\to -2} f(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        <h3>Graph of <Latex expression={`f(x)`} inline={true} /></h3>\r\n        <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section2 = () => {\r\n  return (\r\n    <div>\r\n      The graph seems to be approaching different values from the left and right! This brings us to the concept of <strong>one-sided limits</strong> (in other words, limits from the left or right).\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section3 = () => {\r\n  return (\r\n    <div>\r\n      The notation to write a limit approaching from the <strong>left</strong> is <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to a^{\\\\footnotesize\\\\texttt{-}}}f(x)`} inline={true} />, with a <strong>minus</strong> sign on the top right of the number.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section4 = () => {\r\n  return (\r\n    <div>\r\n      Similarly, the notation for a limit approaching from the <strong>right</strong> is <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to a^{\\\\footnotesize\\\\texttt{+}}}f(x)`} inline={true} />, with a <strong>plus</strong> sign instead of a minus sign.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section5 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        What is <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{-}}}f(x)`} inline={true} /> and <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{+}}}f(x)`} inline={true} />?\r\n      </div>\r\n\r\n      <div className=\"flex vertical center\">\r\n        <h3>Graph of <Latex expression={`f(x)`} inline={true} /></h3>\r\n        <JumpGraph functions={functions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      Looking at the graph, <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{-}}}f(x) = 2`} inline={true} /> and <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{+}}}f(x) = 3`} inline={true} />.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section7 = () => {\r\n  return (\r\n    <div>\r\n      Since <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{-}}}f(x)`} inline={true} /> <Latex expression={`\\\\neq`} inline={true} /> <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{\\\\footnotesize\\\\texttt{+}}}f(x)`} inline={true} />, <Latex expression={`{\\\\lim}_{x \\\\to -2}f(x)`} inline={true} /> <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section8 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Let's consider another type of graph: one with asymptotes. What can we say about <Latex expression={`\\\\lim_{x \\\\to 1}g(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n        <AsymptoticGraph functions={asymptoticFunctions} size={GRAPH_SIZE} x={[1]} y={[1]} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section9 = () => {\r\n  return (\r\n    <div>\r\n      It seems that near <Latex expression={`x = 1`} inline={true} />, the graph is approaching infinity. This is another case where the limit <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section10 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Lastly, let's consider an oscillating graph. What can we say about <Latex expression={`\\\\lim_{x \\\\to 0}h(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        <h3>Graph of <Latex expression={`h(x)`} inline={true} /></h3>\r\n        <FunctionGraph functions={oscillatingFunctions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section11 = () => {\r\n  return (\r\n    <div>\r\n      The graph's behavior around <Latex expression={`x=0`} inline={true} /> is oscillating so densely that we cannot see what the graph is approaching near that point. Therefore, once again, the limit <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section12 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        To summarize, there are 3 cases where a limit does not exist:\r\n      </div>\r\n      <div>\r\n        <ol className=\"start\">\r\n          <li>\r\n            When the limit from the left does not equal the right.\r\n          </li>\r\n          <li>\r\n            When the graph is approaching positive or negative infinity at the point.\r\n          </li>\r\n          <li>\r\n            When the graph is oscillating at the point.\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 }","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 } from \"./Sections\";\r\nimport React from \"react\";\r\n\r\nconst learnContent = [\r\n  <Section1></Section1>,\r\n  <Section2></Section2>,\r\n  <Section3></Section3>,\r\n  <Section4></Section4>,\r\n  <Section5></Section5>,\r\n  <Section6></Section6>,\r\n  <Section7></Section7>,\r\n  <Section8></Section8>,\r\n  <Section9></Section9>,\r\n  <Section10></Section10>,\r\n  <Section11></Section11>,\r\n  <Section12></Section12>,\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","LEFT_LIMIT","RIGHT_LIMIT","generateFunctionData","f","min","max","dataGap","arguments","undefined","data","push","createFunctionGraph","color","classes","leftArrow","rightArrow","type","filter","Math","findIntersections","unshift","name","concat","uuidv4","createArrowMarker","id","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","findHypotenusefromSlope","sqrt","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","node","pathLength1","getTotalLength","f2","n1","math","n2","evaluate","n3","n4","asymptoticFunctions","n5","oscillatingFunctions","Section1","_jsxs","_Fragment","children","Latex","expression","inline","className","FunctionGraph","Section2","Section3","Section4","Section5","JumpGraph","Section6","Section7","Section8","AsymptoticGraph","Section9","Section10","Section11","Section12"],"sourceRoot":""}