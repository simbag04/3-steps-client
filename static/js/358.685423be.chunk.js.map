{"version":3,"file":"static/js/358.685423be.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/12-removing-discontinuities/generate-question.tsx"],"sourcesContent":["/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { buildPolynomialFromCoeffs, formatPolynomialToLatex, getCoeffsOfPolynomial, getRandomNumber } from \"../../../helpers/functions\";\r\nimport { getStringFactorFromXval, sortPolynomialByDegree, getRandomWithExclusions, generateOrderedValues } from \"../../../helpers/functions\";\r\nimport { getPolynomialFunction, generateSpecialTrig, getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from \"mathjs\"\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport React from \"react\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst factoringFunctionValueDiscontinuity = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and bottom isn't 0 as we dont want dne\r\n  while (bottomFactor === topFactor || bottomValue === 0) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  let numerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  const ans = math.simplify(`(${topValue})/${bottomValue}`, { x: holeX }).toString();\r\n\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq ${holeX}`\r\n    },\r\n    {\r\n      f: `a`,\r\n      domain: `x = ${holeX}`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = ${holeX}`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Use the top equation to find <Latex expression={`\\\\lim_{x \\\\to ${holeX}} f(x)`} />. Be sure to apply the appropriate techniques to find the correct limit.\r\n    </div>,\r\n    <div>\r\n      Now, you should be able to use the 2nd condition of continuity to find <Latex expression=\"a\" />!\r\n    </div>\r\n  ]\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${holeX}`} />?</h3>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst trigFunctionValueDiscontinuity = () => {\r\n  const degree = getRandomNumber(1, 3)\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let obj = generateSpecialTrig(degree, multipliedAns, false)\r\n  let numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(degree, multipliedAns, true)\r\n  let denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  multipliedAns = \"(\" + multipliedAns + \")\"\r\n  const ans = math.simplify(multipliedAns).toString()\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq 0`\r\n    },\r\n    {\r\n      f: `a`,\r\n      domain: `x = 0`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = 0`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Use the top equation to find <Latex expression={`\\\\lim_{x \\\\to 0} f(x)`} />. Be sure to apply the appropriate techniques to find the correct limit.\r\n    </div>,\r\n    <div>\r\n      Now, you should be able to use the 2nd condition of continuity to find <Latex expression=\"a\" />!\r\n    </div>\r\n  ]\r\n\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h4>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = 0`} />?</h4>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst limitDiscontinuity = () => {\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const numFunctions = getRandomNumber(0, 10) <= 6 ? 1 : 2\r\n  const xValues = generateOrderedValues(numFunctions, true, -3, 2); // random xvalues\r\n  let yValues = []; // array for random y values\r\n  let xIndex = getRandomNumber(0, xValues.length - 1); // index of x val to ask about \r\n\r\n  // ensure xval isn't 0\r\n  if (xValues[xIndex] === 0) {\r\n    if (xValues.length === 1) {\r\n      xValues[0] = getRandomWithExclusions(-3, 3, [0])\r\n    } else {\r\n      xIndex = getRandomWithExclusions(0, xValues.length - 1, [xIndex])\r\n    }\r\n  }\r\n  const x = xValues[xIndex] // actual x val to ask about\r\n\r\n  // generate y values\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    yValues.push(getRandomNumber(-7, 7))\r\n  }\r\n\r\n  // whether there is a separate value at the function\r\n  const separateFunctionVal = (numFunctions === 1) ? getRandomNumber(0, 10) <= 6 : false\r\n  // 0: ask left limit, 1: ask right limit, 2: ask about function val\r\n  const continuous = separateFunctionVal ? getRandomNumber(0, 2) : getRandomNumber(0, 1)\r\n  let includes = xIndex === 0 && separateFunctionVal ? 0 : getRandomNumber(0, 1); // whether current xval is included in domain - don't include if there is a separate function value\r\n  let ans;\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n\r\n    // add number at function\r\n    if (i - 1 === xIndex && separateFunctionVal) {\r\n      functions.push({ f: continuous !== 2 ? String(yValues[xIndex]) : `a`, domain: `x = ${x}` })\r\n      includes = 1 // don't include xval in next function\r\n      if (continuous === 2) {\r\n        ans = yValues[xIndex]\r\n      }\r\n    }\r\n\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1]\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = xIndex === i && separateFunctionVal ? 0 : getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      xVal = xValues[xIndex];\r\n      yVal = yValues[xIndex];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal, yVal, true);\r\n    f = math.simplifyCore(f).toString() // simplify f before finding coeffs\r\n\r\n    // replace coefficient if this is the correct function to change\r\n    if (continuous !== 2 && continuous + xIndex === i) {\r\n      const obj = replaceCoefficientWithVar(f)\r\n      f = obj.f\r\n      ans = obj.ans\r\n    }\r\n\r\n    // format f\r\n    f = formatPolynomialToLatex(f);\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = ${x}`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={functions} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      First, we need to make sure the limit exists. Since this is a piecewise function and we are trying to make it continuous at <Latex expression={`x = ${x}`} />, we need to make sure <Latex expression={`\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{-}}} f(x) = \\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{+}}} f(x)`} />.\r\n    </div>,\r\n    <>\r\n      {continuous === 2 ?\r\n        <div>\r\n          Once you've verified this, move on to the next condition. What must be the value of <Latex expression={`f(${x})`} />?\r\n        </div> :\r\n        <div>\r\n          This should help you find a value for <Latex expression=\"a\" />! Once you find this value, make sure you also verify that the 2nd condition holds with your <Latex expression=\"a\" /> value.\r\n        </div>}\r\n    </>,\r\n  ]\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${x}`} />?</h3>\r\n    <Piecewise title=\"f(x)\" functions={functions} display={true}></Piecewise>\r\n  </>\r\n\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst replaceCoefficientWithVar = (f: string) => {\r\n  const coeffs: any[] = getCoeffsOfPolynomial(f)\r\n  let toChange = getRandomNumber(0, coeffs.length - 1)\r\n\r\n  // ensure a value isn't 0\r\n  while (coeffs[toChange] === 0) {\r\n    toChange = getRandomNumber(0, coeffs.length - 1)\r\n  }\r\n\r\n  const oldAns = coeffs[toChange]\r\n  coeffs[toChange] = 'a'\r\n\r\n  return { ans: oldAns, f: buildPolynomialFromCoeffs(coeffs) }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  const rand = getRandomNumber(0, 9)\r\n  if (rand <= 1) {\r\n    return factoringFunctionValueDiscontinuity()\r\n  } else if (rand <= 3) {\r\n    return trigFunctionValueDiscontinuity\r\n  } else {\r\n    return limitDiscontinuity()\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","expression","setExpression","useState","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","nerdamer","require","trigFunctionValueDiscontinuity","degree","getRandomNumber","multipliedAns","obj","generateSpecialTrig","numerator","term","denominator","ans","math","toString","piecewise","hints","_jsxs","className","nextToInput","question","type","replaceCoefficientWithVar","coeffs","getCoeffsOfPolynomial","toChange","oldAns","buildPolynomialFromCoeffs","generateRandomQuestion","rand","factoringFunctionValueDiscontinuity","holeX","holeFactor","getStringFactorFromXval","topFactor","getPolynomialFunction","bottomFactor","topValue","x","bottomValue","sortPolynomialByDegree","expand","limitDiscontinuity","numFunctions","xValues","generateOrderedValues","yValues","xIndex","getRandomWithExclusions","push","separateFunctionVal","continuous","includes","xVal","yVal","String","Math","abs","getPolynomialFunctionWithPoint","formatPolynomialToLatex"],"sourceRoot":""}