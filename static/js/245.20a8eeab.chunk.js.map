{"version":3,"file":"static/js/245.20a8eeab.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","components/latex/Piecewise.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/12-removing-discontinuities/Sections.tsx","topics/01-limits/12-removing-discontinuities/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\nimport * as math from \"mathjs\"\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\n\r\nconst f1 = math.parse(\"x^2\")\r\nconst removableFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c1\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c1\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst removablePoints: GraphPoint[] = [\r\n  {\r\n    x: 2,\r\n    y: 1,\r\n    classes: \"c1\"\r\n  }\r\n]\r\n\r\nconst piecewise1: PiecewiseFunction[] = [\r\n  {\r\n    f: `\\\\frac{x^2 - 5x - 4}{x - 1}`,\r\n    domain: `x \\\\neq 1`\r\n  },\r\n  {\r\n    f: `a`,\r\n    domain: `x = 1`\r\n  }\r\n]\r\n\r\nconst piecewise2: PiecewiseFunction[] = [\r\n  {\r\n    f: `ax^2 - 3`,\r\n    domain: `x < 1`\r\n  },\r\n  {\r\n    f: `x + 2`,\r\n    domain: `x \\\\geq 1`\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    Recall when we were discussing discontinuities, one type of discontinuity we encountered was a <strong>removable</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph with Removable Discontinuity </h3>\r\n    <FunctionGraph functions={removableFunctions} size={GRAPH_SIZE} points={removablePoints} ></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    This continuity was removable because if we define <Latex expression=\"f(2) = 4\" />, it will match <Latex expression={`\\\\lim_{x \\\\to 2} f(x)`} />, so the function would be continuous again.\r\n  </div>\r\n  <div>\r\n    This type of situation often comes up with making functions with holes continuous. For example, consider:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`f(x) = \\\\frac{x^2 - 5x - 4}{x - 1}`} display={true} />\r\n  </div>\r\n  <div>\r\n    This function is not defined at <Latex expression=\"x = 1\" /> since the denominator is 0 at this point. We want to find a value for <Latex expression=\"f(1)\" /> that will make <Latex expression=\"f(x)\" /> continuous at this point.\r\n  </div>\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    In other words, given:\r\n  </div>\r\n  <div>\r\n    <Piecewise title=\"f(x)\" functions={piecewise1} display={true} />\r\n  </div>\r\n  <div>\r\n    What is the value of <Latex expression=\"a\" /> that will make <Latex expression=\"f(x)\" /> continuous at <Latex expression=\"x = 1\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    To solve this, recall our 2 conditions that make functions continuous at a point:\r\n  </div>\r\n  <div className=\"flex vertical center\">\r\n    <ul className=\"text-start\">\r\n      <li>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n      </li>\r\n      <li>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    We can evaluate <Latex expression={`\\\\lim_{x \\\\to 1} f(x)`} /> using the top equation:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1} \\\\frac{x^2 - 5x - 4}{x - 1} = \\\\frac{0}{0}`} display={true} />\r\n  </div>\r\n  <div>\r\n    Remember, though, that when we get <Latex expression={`\\\\frac{0}{0}`} />, we can use other techniques to solve the limit. In this case, we can use factoring:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1} \\\\frac{x^2 - 5x - 4}{x - 1} = \\\\lim_{x \\\\to 1} \\\\frac{(x - 1)(x - 4)}{x - 1} = \\\\lim_{x \\\\to 1} (x - 4) = -3`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Thus, the first condition is satisfied because we know <Latex expression={`\\\\lim_{x \\\\to 1} f(x)`} /> exists.\r\n  </div>\r\n  <div>\r\n    For the second condition we need <Latex expression={`\\\\lim_{x \\\\to 1} f(x) = f(1)`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    Since <Latex expression=\"f(1) = a\" /> and <Latex expression={`\\\\lim_{x \\\\to 1} f(x) = -3`} />, this means we need <Latex classes=\"bold\" expression=\"a = 3\" /> in order for <Latex expression=\"f(x)\" /> to be continuous at <Latex expression=\"x = 1.\" />\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    Anytime we want to make a function continuous at a point, we just need to make sure the 2 conditions hold. Let's look at another example:\r\n  </div>\r\n  <div>\r\n    <Piecewise title=\"g(x)\" functions={piecewise2} />\r\n  </div>\r\n  <div>\r\n    For what value of <Latex expression=\"a\" /> will <Latex expression=\"g(x)\" /> be continuous at <Latex expression=\"x = 1\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    Again, going back to our 2 conditions, we first need <Latex expression={`\\\\lim_{x \\\\to 1} g(x)`} /> to exist.\r\n  </div>\r\n  <div>\r\n    In order for <Latex expression={`\\\\lim_{x \\\\to 1} g(x)`} /> to exist, we need <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x)`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section10 = <>\r\n  <div>\r\n    Evaluating these, we get:\r\n  </div>\r\n  <div>\r\n    <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1} (ax^2 - 3) = a - 3`} display={true} />\r\n    <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x) = \\\\lim_{x \\\\to 1} (x + 2) = 3`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section11 = <>\r\n  <div>\r\n    In order for the limit to exist, both of these must equal each other. Thus, <Latex expression=\"a - 3 = 3\" display={true} />\r\n    <Latex classes=\"bold\" expression=\"a = 6\" />\r\n  </div>\r\n  <div>\r\n    When <Latex expression=\"a = 6\" />, <Latex expression={`\\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{-}}} g(x) = \\\\lim_{x \\\\to 1^{\\\\footnotesize\\\\texttt{+}}} g(x) = 3`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section12 = <>\r\n  <div>\r\n    Now that the first condition is verified, we can also check the  second condition.\r\n  </div>\r\n  <div>\r\n    We know <Latex expression=\"g(1) = 1 + 2 = 3\" />. Since <Latex expression={`\\\\lim_{x \\\\to 1} g(x) = g(1) = 3`} />, we know that the function is continuous at <Latex expression=\"x = 1\" /> when <Latex classes=\"bold\" expression=\"a = 6\" />!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 }","import { Section1, Section10, Section11, Section12, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\"\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9,\r\n  Section10,\r\n  Section11,\r\n  Section12\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","Piecewise","title","display","classes","_useState","useState","_useState2","_slicedToArray","expression","setExpression","e","i","length","f","domain","_Fragment","children","Latex","concat","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","min","max","dataGap","arguments","undefined","data","x","y","push","createFunctionGraph","color","leftArrow","rightArrow","type","filter","d","Math","invert","findIntersections","unshift","line","name","uuidv4","createArrowMarker","id","append","datum","attr","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","style","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","math","removableFunctions","evaluate","_jsxs","className","FunctionGraph"],"sourceRoot":""}