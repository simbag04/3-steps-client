{"version":3,"file":"static/js/330.d45cdd89.chunk.js","mappings":"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","sources":["components/content-components/tables/FunctionTable.tsx","topics/01-limits/03-estimating-limits-using-tables/Sections.tsx","topics/01-limits/03-estimating-limits-using-tables/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\nimport React from \"react\";\r\nimport { TableValue } from \"../../../@types/TableValue\";\r\n\r\ninterface FunctionTableProps {\r\n  xTitle: string, // title of x values\r\n  yTitle: string, // title of y values\r\n  data: TableValue[] // data to put in table\r\n}\r\n\r\nexport const FunctionTable: React.FC<FunctionTableProps> = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import { TableValue } from \"../../../@types/TableValue\"\r\nimport { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport React from \"react\"\r\n\r\nconst table1Data: TableValue[] = [\r\n  { x: 1, y: 3 },\r\n  { x: 2, y: 4 },\r\n  { x: 3, y: 6 },\r\n  { x: 3.9, y: 6.3 },\r\n  { x: 3.99, y: 6.49 },\r\n  { x: 3.999, y: 6.499 },\r\n  { x: 4, y: 10 },\r\n  { x: 4.001, y: 6.501 },\r\n  { x: 4.01, y: 6.51 },\r\n  { x: 4.1, y: 6.7 },\r\n  { x: 5, y: 8 },\r\n  { x: 6, y: 9 },\r\n  { x: 7, y: 10 },\r\n]\r\n\r\nconst table2Data: TableValue[] = [\r\n  { x: 1, y: 5 },\r\n  { x: 2, y: 6 },\r\n  { x: 3, y: 8 },\r\n  { x: 3.9, y: 8.8 },\r\n  { x: 3.99, y: 8.95 },\r\n  { x: 3.999, y: 8.999 },\r\n  { x: 4, y: 9 },\r\n]\r\n\r\nconst table3Data: TableValue[] = [\r\n  { x: 1, y: 8 },\r\n  { x: 2, y: 7 },\r\n  { x: 3, y: 3 },\r\n  { x: 4, y: 0 },\r\n  { x: 5, y: -2 },\r\n  { x: 6, y: -5 },\r\n  { x: 7, y: -9 },\r\n]\r\n\r\nconst table4Data: TableValue[] = [\r\n  { x: 2, y: 5},\r\n  { x: 2.9, y: 5.9 },\r\n  { x: 2.99, y: 5.99 },\r\n  { x: 2.999, y: 5.999 },\r\n  { x: 3, y: \"und\" },\r\n  { x: 3.001, y: 6.001 },\r\n  { x: 3.01, y: 6.01  },\r\n  { x: 3.1, y: 6.1 },\r\n  { x: 4, y: 7     },\r\n]\r\n\r\nconst Section1 = () => {\r\n  return (\r\n    <div>In addition to graphs, limits can also be estimated from tables.</div>\r\n  )\r\n}\r\nconst Section2 = () => {\r\n  return (\r\n    <>\r\n      <div>For example, consider this table. </div>\r\n      <FunctionTable xTitle={\"x\"} yTitle={`f(x)`} data={table1Data} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section3 = () => {\r\n  return (\r\n    <>\r\n      <div>It is reasonable to estimate that <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to 4} f(x) = 6.5`} /> because that is what the values near <Latex expression={`x = 4`} /> seem to be approaching.</div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section4 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        This is reasonable even though <Latex expression={`f(4) = 10`} />, because a limit is defined as what a function is <strong>approaching</strong>, not the actual value of the function. For all we know, there could be a hole in the graph at this point!\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section5 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        What about estimating <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to 4} g(x)`} /> from this table?\r\n      </div>\r\n      <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={table2Data} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        We only have information about <Latex expression={`x`} /> values to the <strong>left</strong> of 4. Since we don't know anything about the graph on the right side of <Latex expression={`x = 4`} />, we cannot say anything about the limit.\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section7 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Let's look at another table: What can we say about <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to 4} h(x)`} />?\r\n      </div>\r\n      <FunctionTable xTitle={`x`} yTitle={`h(x)`} data={table3Data} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section8 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Again, we can't really say anything at all because we aren't really \"zooming in\" on <Latex expression={`x = 4`} />. Limits are the idea of getting infinitely close to the <Latex expression={`x`} /> value, and we don't see that in this table.\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section9 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        All of this brings us closer to estimating limits of functions. For example, suppose we are asked to find <Latex classes=\"bold\" expression={`{\\\\lim}_{x \\\\to 3} k(x)`} />, where <Latex expression={`k(x) = \\\\frac{x^2 - 9}{x - 3}`} display={true}/>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section10 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        We don't have a graph of this function, so we cannot visually see the limit. However, what we can do is create a <strong>table of values</strong> for the function, \"zooming in\" on <Latex expression={`x = 3`} />. This will give us a good estimate of the limit.\r\n      </div>\r\n      <FunctionTable xTitle={`x`} yTitle={`k(x)`} data={table4Data} />\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section11 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Based on this table, we can reasonably estimate that <Latex expression={`{\\\\lim}_{x \\\\to 3} k(x) = 6`} />.\r\n      </div>\r\n      <div>\r\n        When we use this strategy to estimate a limit, it is important to make sure to \"zoom in\" on the point from <strong>both</strong> sides. Pick x-values that get infinitely close to the point in question to get a good estimate!\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11 }","import { Section1, Section10, Section11, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * array of content to be shown on learn page\r\n */\r\nconst learnContent = [\r\n  <Section1 />,\r\n  <Section2 />,\r\n  <Section3 />,\r\n  <Section4 />,\r\n  <Section5 />,\r\n  <Section6 />,\r\n  <Section7 />,\r\n  <Section8 />,\r\n  <Section9 />,\r\n  <Section10 />,\r\n  <Section11 />\r\n]\r\n\r\nexport default learnContent;"],"names":["FunctionTable","_ref","xTitle","yTitle","data","tableRef","useRef","width","setWidth","useState","originalWidthRef","windowWidth","useWindowSize","display","setDisplay","useEffect","element","current","resizeObserver","ResizeObserver","entries","entry","target","contentRect","observe","unobserve","disconnect","_jsx","ref","className","children","_jsxs","concat","Latex","expression","map","d","i","x","y","table1Data","table2Data","table3Data","table4Data","Section1","Section2","_Fragment","Section3","classes","Section4","Section5","Section6","Section7","Section8","Section9","Section10","Section11"],"sourceRoot":""}