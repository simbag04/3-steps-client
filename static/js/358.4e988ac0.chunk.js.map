{"version":3,"file":"static/js/358.4e988ac0.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/12-removing-discontinuities/generate-question.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string,\r\n  functions: PiecewiseFunction[],\r\n  display?: string | boolean,\r\n  classes?: string\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { buildPolynomialFromCoeffs, formatPolynomialToLatex, getCoeffsOfPolynomial, getRandomNumber } from \"../../../helpers/functions\";\r\nimport { getStringFactorFromXval, sortPolynomialByDegree, getRandomWithExclusions, generateOrderedValues } from \"../../../helpers/functions\";\r\nimport { getPolynomialFunction, generateSpecialTrig, getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from \"mathjs\"\r\nimport { PiecewiseFunction } from \"../../../types/PiecewiseFunction\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport React from \"react\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst factoringFunctionValueDiscontinuity = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and bottom isn't 0 as we dont want dne\r\n  while (bottomFactor === topFactor || bottomValue === 0) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  let numerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  const ans = math.simplify(`(${topValue})/${bottomValue}`, { x: holeX }).toString();\r\n\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq ${holeX}`\r\n    },\r\n    {\r\n      f: `a`,\r\n      domain: `x = ${holeX}`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = ${holeX}`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Use the top equation to find <Latex expression={`\\\\lim_{x \\\\to ${holeX}} f(x)`} />. Be sure to apply the appropriate techniques to find the correct limit.\r\n    </div>,\r\n    <div>\r\n      Now, you should be able to use the 2nd condition of continuity to find <Latex expression=\"a\" />!\r\n    </div>\r\n  ]\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${holeX}`} />?</h3>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst trigFunctionValueDiscontinuity = () => {\r\n  const degree = getRandomNumber(1, 3)\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let obj = generateSpecialTrig(degree, multipliedAns, false)\r\n  let numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(degree, multipliedAns, true)\r\n  let denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  multipliedAns = \"(\" + multipliedAns + \")\"\r\n  const ans = math.simplify(multipliedAns).toString()\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq 0`\r\n    },\r\n    {\r\n      f: `a`,\r\n      domain: `x = 0`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = 0`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Use the top equation to find <Latex expression={`\\\\lim_{x \\\\to 0} f(x)`} />. Be sure to apply the appropriate techniques to find the correct limit.\r\n    </div>,\r\n    <div>\r\n      Now, you should be able to use the 2nd condition of continuity to find <Latex expression=\"a\" />!\r\n    </div>\r\n  ]\r\n\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h4>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = 0`} />?</h4>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst limitDiscontinuity = () => {\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const numFunctions = getRandomNumber(0, 10) <= 6 ? 1 : 2\r\n  const xValues = generateOrderedValues(numFunctions, true, -3, 2); // random xvalues\r\n  let yValues = []; // array for random y values\r\n  let xIndex = getRandomNumber(0, xValues.length - 1); // index of x val to ask about \r\n\r\n  // ensure xval isn't 0\r\n  if (xValues[xIndex] === 0) {\r\n    if (xValues.length === 1) {\r\n      xValues[0] = getRandomWithExclusions(-3, 3, [0])\r\n    } else {\r\n      xIndex = getRandomWithExclusions(0, xValues.length - 1, [xIndex])\r\n    }\r\n  }\r\n  const x = xValues[xIndex] // actual x val to ask about\r\n\r\n  // generate y values\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    yValues.push(getRandomNumber(-7, 7))\r\n  }\r\n\r\n  // whether there is a separate value at the function\r\n  const separateFunctionVal = (numFunctions === 1) ? getRandomNumber(0, 10) <= 6 : false\r\n  // 0: ask left limit, 1: ask right limit, 2: ask about function val\r\n  const continuous = separateFunctionVal ? getRandomNumber(0, 2) : getRandomNumber(0, 1)\r\n  let includes = xIndex === 0 && separateFunctionVal ? 0 : getRandomNumber(0, 1); // whether current xval is included in domain - don't include if there is a separate function value\r\n  let ans;\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n\r\n    // add number at function\r\n    if (i - 1 === xIndex && separateFunctionVal) {\r\n      functions.push({ f: continuous !== 2 ? String(yValues[xIndex]) : `a`, domain: `x = ${x}` })\r\n      includes = 1 // don't include xval in next function\r\n      if (continuous === 2) {\r\n        ans = yValues[xIndex]\r\n      }\r\n    }\r\n\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1]\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = xIndex === i && separateFunctionVal ? 0 : getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      xVal = xValues[xIndex];\r\n      yVal = yValues[xIndex];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal, yVal, true);\r\n    f = math.simplifyCore(f).toString() // simplify f before finding coeffs\r\n\r\n    // replace coefficient if this is the correct function to change\r\n    if (continuous !== 2 && continuous + xIndex === i) {\r\n      const obj = replaceCoefficientWithVar(f)\r\n      f = obj.f\r\n      ans = obj.ans\r\n    }\r\n\r\n    // format f\r\n    f = formatPolynomialToLatex(f);\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        We need to find the value of <Latex expression=\"a\" /> that makes <Latex expression=\"f(x)\" /> continuous at {`x = ${x}`}\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={functions} display={true}></Piecewise>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      First, we need to make sure the limit exists. Since this is a piecewise function and we are trying to make it continuous at <Latex expression={`x = ${x}`} />, we need to make sure <Latex expression={`\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{-}}} f(x) = \\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{+}}} f(x)`} />.\r\n    </div>,\r\n    <>\r\n      {continuous === 2 ?\r\n        <div>\r\n          Once you've verified this, move on to the next condition. What must be the value of <Latex expression={`f(${x})`} />?\r\n        </div> :\r\n        <div>\r\n          This should help you find a value for <Latex expression=\"a\" />! Once you find this value, make sure you also verify that the 2nd condition holds with your <Latex expression=\"a\" /> value.\r\n        </div>}\r\n    </>,\r\n  ]\r\n  const nextToInput = <Latex expression={`a = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"a\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${x}`} />?</h3>\r\n    <Piecewise title=\"f(x)\" functions={functions} display={true}></Piecewise>\r\n  </>\r\n\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst replaceCoefficientWithVar = (f: string) => {\r\n  const coeffs: any[] = getCoeffsOfPolynomial(f)\r\n  let toChange = getRandomNumber(0, coeffs.length - 1)\r\n\r\n  // ensure a value isn't 0\r\n  while (coeffs[toChange] === 0) {\r\n    toChange = getRandomNumber(0, coeffs.length - 1)\r\n  }\r\n\r\n  const oldAns = coeffs[toChange]\r\n  coeffs[toChange] = 'a'\r\n\r\n  return { ans: oldAns, f: buildPolynomialFromCoeffs(coeffs) }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  const rand = getRandomNumber(0, 9)\r\n  if (rand <= 1) {\r\n    return factoringFunctionValueDiscontinuity()\r\n  } else if (rand <= 3) {\r\n    return trigFunctionValueDiscontinuity\r\n  } else {\r\n    return limitDiscontinuity()\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","_useState","useState","_useState2","_slicedToArray","expression","setExpression","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","nerdamer","require","trigFunctionValueDiscontinuity","degree","getRandomNumber","multipliedAns","obj","generateSpecialTrig","numerator","term","denominator","ans","math","toString","piecewise","hints","_jsxs","className","nextToInput","question","type","replaceCoefficientWithVar","coeffs","getCoeffsOfPolynomial","toChange","oldAns","buildPolynomialFromCoeffs","rand","holeX","holeFactor","getStringFactorFromXval","topFactor","getPolynomialFunction","bottomFactor","topValue","x","bottomValue","sortPolynomialByDegree","expand","factoringFunctionValueDiscontinuity","numFunctions","xValues","generateOrderedValues","yValues","xIndex","getRandomWithExclusions","push","separateFunctionVal","continuous","includes","xVal","yVal","String","Math","abs","getPolynomialFunctionWithPoint","formatPolynomialToLatex","limitDiscontinuity"],"sourceRoot":""}