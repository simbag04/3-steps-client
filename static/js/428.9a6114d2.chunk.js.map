{"version":3,"file":"static/js/428.9a6114d2.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","components/content-components/graphs/FunctionGraph.js","components/latex/Latex.js","helpers/constants.js","helpers/graph-helpers.js","components/content-components/graphs/JumpGraph.js","topics/01-limits/02-evaluating-limits-using-graphs/Sections.js","topics/01-limits/02-evaluating-limits-using-graphs/learn-content.js"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst FunctionGraph = ({ functions, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Latex component that uses katex to render math in latex font\r\n * Parameters: \r\n *  - classes: custom classes to be added to returned html\r\n *  - expression: math to be rendered as latex\r\n *  - inline: boolean value indicating whether latex should be rendered inline or block mode\r\n */\r\n\r\nimport 'katex/dist/katex.min.css';  // Import KaTeX styles\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\n\r\nconst Latex = ({classes, expression, display}) => {\r\n  return (\r\n    <span className={classes}>\r\n      {!display ? \r\n      <InlineMath math={expression} /> :\r\n      <BlockMath math={expression} /> }\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Latex","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += 0.01) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type) => {\r\n  let data = generateFunctionData(f, min, max); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({x: d, y: f(d)}); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({x: d, y: f(d)}); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = 'function-arrow'\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n  \r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n    \r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n    \r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * creates -10 by 10 blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([-1 * numCells / 2, numCells / 2])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([-1 * numCells / 2, numCells / 2])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build grid lines\r\n  svg\r\n    .selectAll(\".x-grid-line\")\r\n    .data(d3.range(-1 * numCells / 2, numCells / 2 + 1))\r\n    .enter().append(\"line\")\r\n    .attr(\"class\", \"x-grid-line\")\r\n    .attr(\"x1\", d => xScale(d))\r\n    .attr(\"x2\", d => xScale(d))\r\n    .attr(\"y1\", 0)\r\n    .attr(\"y2\", height)\r\n    .attr(\"stroke\", \"lightgray\");\r\n\r\n  svg\r\n    .selectAll(\".y-grid-line\")\r\n    .data(d3.range(-1 * numCells / 2, numCells / 2 + 1))\r\n    .enter().append(\"line\")\r\n    .attr(\"class\", \"y-grid-line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", d => yScale(d))\r\n    .attr(\"y2\", d => yScale(d))\r\n    .attr(\"stroke\", \"lightgray\");\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  // add marks and text to xaxis\r\n  xScale.ticks().forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(tick)\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  yScale.ticks().forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(tick)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine }\r\n","/**\r\n * Creates jump graph with limit lines at the jump\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createFunctionLimitLine, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst JumpGraph = ({ functions, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      const { dataArray } = createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n\r\n      // select function lines\r\n      let f1 = d3.select(`[data-uuid=\"${dataArray[0].id}\"]`).node();\r\n      let pathLength1 = f1.getTotalLength();\r\n\r\n      let f2 = d3.select(`[data-uuid=\"${dataArray[1].id}\"]`).node();\r\n\r\n      // create limit lines\r\n      createFunctionLimitLine(svg, f1, pathLength1, xScale, yScale, line, \"c2\", false, \"right\")\r\n      createFunctionLimitLine(svg, f2, 0, xScale, yScale, line, \"c3\", true, \"left\")\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n\r\n  }, [functions, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default JumpGraph","import Latex from \"../../../components/latex/Latex\"\r\nimport JumpGraph from \"../../../components/content-components/graphs/JumpGraph\"\r\nimport * as math from 'mathjs'\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\"\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\"\r\n\r\n// functions to be used in sections\r\nconst n1 = math.parse(\"-x\")\r\nconst n2 = math.parse(\"0.5x + 4\")\r\nconst functions = [\r\n  {\r\n    f: x => n1.evaluate({ x }),\r\n    min: -11,\r\n    max: -2,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: x => n2.evaluate({ x }),\r\n    min: -2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: true,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  },\r\n]\r\n\r\nconst n3 = math.parse(\"-1/(x - 1) + 1\")\r\nconst n4 = math.parse(\"1/(x - 1) + 1\")\r\n\r\nconst asymptoticFunctions = [\r\n  {\r\n    f: x => n3.evaluate({ x }),\r\n    min: -11,\r\n    max: 1,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  },\r\n  {\r\n    f: x => n4.evaluate({ x }),\r\n    min: 1,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  }\r\n]\r\n\r\nconst n5 = math.parse(`sin(1/x)`)\r\nconst oscillatingFunctions = [\r\n  {\r\n    f: x => n5.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c4',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\n// sections\r\nconst Section1 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Consider a graph <Latex expression={`f(x)`} inline={true} /> that has a jump: What can we say about <Latex expression={`\\\\ {\\\\lim}_{x \\\\to -2} f(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center\">\r\n        <h3>Graph of <Latex expression={`f(x)`} inline={true} /></h3>\r\n        <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section2 = () => {\r\n  return (\r\n    <div>\r\n      The graph seems to be approaching different values from the left and right! This brings us to the concept of <strong>one-sided limits</strong> (in other words, limits from the left or right)\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section3 = () => {\r\n  return (\r\n    <div>\r\n      The notation to write a limit approaching from the left is <Latex expression={`{\\\\lim}_{x \\\\to a^{-}}f(x)`} inline={true} />, with a minus sign on the top right of the number.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section4 = () => {\r\n  return (\r\n    <div>\r\n      Similarly, the notation for a limit approaching from the right is <Latex expression={`{\\\\lim}_{x \\\\to a^{+}}f(x)`} inline={true} />, with a plus sign instead of a minus sign.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section5 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        What is <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{-}}f(x)`} inline={true} /> and <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{+}}f(x)`} inline={true} />?\r\n      </div>\r\n\r\n      <div className=\"flex vertical center\">\r\n        <h3>Graph of <Latex expression={`f(x)`} inline={true} /></h3>\r\n        <JumpGraph functions={functions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section6 = () => {\r\n  return (\r\n    <div>\r\n      Looking at the graph, <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{-}}f(x) = 2`} inline={true} /> and <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{+}}f(x) = 3`} inline={true} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section7 = () => {\r\n  return (\r\n    <div>\r\n      Since <Latex classes=\"c2\" expression={`{\\\\lim}_{x \\\\to -2^{-}}f(x)`} inline={true} /> <Latex expression={`\\\\neq`} inline={true} /> <Latex classes=\"c3\" expression={`{\\\\lim}_{x \\\\to -2^{+}}f(x)`} inline={true} />, <Latex expression={`{\\\\lim}_{x \\\\to -2}f(x)`} inline={true} /> <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section8 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Let's consider another type of graph: one with asymptotes. What can we say about <Latex expression={`\\\\lim_{x \\\\to 1}g(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center\">\r\n        <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n        <AsymptoticGraph functions={asymptoticFunctions} size={GRAPH_SIZE} x={[1]} y={[1]} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section9 = () => {\r\n  return (\r\n    <div>\r\n      It seems that near <Latex expression={`x = 1`} inline={true} />, the graph is approaching infinity. This is another case where the limit <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section10 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        Lastly, let's consider an oscillating graph. What can we say about <Latex expression={`\\\\lim_{x \\\\to 0}h(x)`} inline={true} />?\r\n      </div>\r\n      <div className=\"flex vertical center\">\r\n        <h3>Graph of <Latex expression={`h(x)`} inline={true} /></h3>\r\n        <FunctionGraph functions={oscillatingFunctions} size={GRAPH_SIZE} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Section11 = () => {\r\n  return (\r\n    <div>\r\n      The graph's behavior around <Latex expression={`x=0`} inline={true} /> is oscillating so densely that we cannot see what the graph is approaching near that point. Therefore, once again, the limit <strong>does not exist</strong>.\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Section12 = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        To summarize, there are 3 cases where a limit does not exist:\r\n        <ol className=\"start\">\r\n          <li>\r\n            When the limit from the left does not equal the right\r\n          </li>\r\n          <li>\r\n            When the graph is approaching positive or negative infinity at the point\r\n          </li>\r\n          <li>\r\n            When the graph is oscillating at the point\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 }","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12 } from \"./Sections\";\r\n\r\nconst learnContent = [\r\n  <Section1></Section1>,\r\n  <Section2></Section2>,\r\n  <Section3></Section3>,\r\n  <Section4></Section4>,\r\n  <Section5></Section5>,\r\n  <Section6></Section6>,\r\n  <Section7></Section7>,\r\n  <Section8></Section8>,\r\n  <Section9></Section9>,\r\n  <Section10></Section10>,\r\n  <Section11></Section11>,\r\n  <Section12></Section12>,\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","classes","expression","display","className","children","BlockMath","math","InlineMath","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","f","min","max","data","push","createFunctionGraph","color","leftArrow","rightArrow","type","filter","Math","findIntersections","unshift","name","createArrowMarker","id","uuidv4","concat","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","numCells","half","selectAll","remove","domain","range","enter","tickMarks","tickText","ticks","forEach","tick","text","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","points","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","node","pathLength1","getTotalLength","f2","n1","n2","evaluate","n3","n4","asymptoticFunctions","n5","oscillatingFunctions","Section1","_jsxs","_Fragment","Latex","inline","FunctionGraph","Section2","Section3","Section4","Section5","JumpGraph","Section6","Section7","Section8","AsymptoticGraph","Section9","Section10","Section11","Section12"],"sourceRoot":""}