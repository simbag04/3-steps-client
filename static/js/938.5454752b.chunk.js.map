{"version":3,"file":"static/js/938.5454752b.chunk.js","mappings":"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","sources":["components/content-components/graphs/LimitExampleGraph.tsx","topics/01-limits/01-understanding-limits/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates graph of function f showing limit at xval\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createFunctionGraph, createBlankCanvas, createFunctionLimitLine, createLimitLine, convertScale, findOffsets } from \"../../../helpers/graph-helpers\";\r\nimport { AXIS_OFFSET, CLOSE_DIST, FAR_DIST } from \"../../../helpers/constants\";\r\nimport * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../../styles/graph.css'\r\nimport React from \"react\";\r\n\r\ninterface LimitExampleGraphProps {\r\n  f: Function, // function to generate graph of\r\n  xval: number, // xvalue at which to show limit\r\n  y: number, // y of function - could be different from f(xval) if there's a hole, or null if f is undefined at xval\r\n  fColor: string, //classes to add to function graph\r\n  xColor: string, // classes to add to x limit arrows\r\n  yColor: string, // classes to add to y limit arrows\r\n  size: number // size of graph\r\n}\r\n\r\nconst LimitExampleGraph: React.FC<LimitExampleGraphProps> = ({ f, xval, y, fColor, xColor, yColor, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const textSize = 11;\r\n      const graphSize = size;\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(graphSize, graphSize, svgRef, textSize);\r\n\r\n      const svg = d3.select(svgRef.current)\r\n      const yval = f(xval);\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      // dashed lines going to x and y axes\r\n      svg.append('path')\r\n        .datum([{ x: 0, y: yval }, { x: xval, y: yval }])\r\n        .attr('class', 'stroke ' + yColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      svg.append('path')\r\n        .datum([{ x: xval, y: yval }, { x: xval, y: 0 }])\r\n        .attr('class', 'stroke ' + xColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      const { data, id } = createFunctionGraph(svg, f, width, height, null, xScale, yScale, fColor, -11, 11, true, true);\r\n      createAllLimitLines(svg, line, xval, yval,\r\n        xColor, yColor, fColor,\r\n        xScale, yScale, data, id, textSize);\r\n\r\n      // hole at xval, yval\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'hole fill stroke ' + fColor)\r\n        .attr('cx', xScale(xval))\r\n        .attr('cy', yScale(yval))\r\n        .attr('r', 3)\r\n\r\n      // point at xval, y\r\n      if (y !== null) {\r\n        svg\r\n          .append('circle')\r\n          .attr('class', 'fill stroke ' + fColor)\r\n          .attr('cx', xScale(xval))\r\n          .attr('cy', yScale(y))\r\n          .attr('r', 3)\r\n      }\r\n    }\r\n\r\n  }, [svgRef, f, fColor, xColor, xval, y, yColor, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg to append lmit lines to\r\n * @param {function} line functionthat creates 'd' attribute in svg path\r\n * @param {number} xval xvalue of point where limit is being generated\r\n * @param {number} yval yvalue of point\r\n * @param {string} xColor classes to be added to x limit lines\r\n * @param {string} yColor classes to be added to y limit lines\r\n * @param {string} fColor classes to be added to f limit lines\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {Array} data array of data for original function\r\n * @param {id} id id of function path\r\n * @param {number} textSize text size of label\r\n */\r\nfunction createAllLimitLines(svg, line, xval, yval,\r\n  xColor, yColor, fColor,\r\n  xScale, yScale, data, id, textSize) {\r\n\r\n  // horizontal and vertical arrows\r\n  createLimitLine(svg, line, xval - FAR_DIST,\r\n    xval - CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n  createLimitLine(svg, line, xval + FAR_DIST,\r\n    xval + CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + xColor)\r\n    .attr('cx', xScale(xval))\r\n    .attr('cy', yScale(0))\r\n    .attr('r', 1)\r\n\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval - FAR_DIST, yval - CLOSE_DIST, 'y-limits', yColor)\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval + FAR_DIST, yval + CLOSE_DIST, 'y-limits', yColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + yColor)\r\n    .attr('cx', xScale(0))\r\n    .attr('cy', yScale(yval))\r\n    .attr('r', 1)\r\n\r\n  // function arrows\r\n  const dataUpToPoint = data.filter((d) => d.x < xval);\r\n\r\n  // create path up to point to get its length\r\n  const pointId = uuidv4();\r\n  svg.append('path')\r\n    .datum(dataUpToPoint)\r\n    .attr('data-uuid', pointId)\r\n    .attr('fill', 'none')\r\n    .attr('d', line);\r\n\r\n  // get path length and use that to find points at which to genrate limit arrows\r\n  const functionLine = d3.select(`[data-uuid=\"${id}\"]`).node();\r\n  const pathLength = d3.select(`[data-uuid=\"${pointId}\"]`).node().getTotalLength();\r\n\r\n  const leftLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, false);\r\n  const rightLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, true);\r\n\r\n  const farPointOne = leftLine.farPoint;\r\n  const farPointTwo = rightLine.farPoint;\r\n\r\n  // text at point\r\n\r\n  // get offset values\r\n  const pointsText = convertScale(farPointOne, farPointTwo, xScale, yScale);\r\n  const offsetsText = findOffsets(pointsText, 3 * AXIS_OFFSET);\r\n\r\n  // adjust offset values by ensuring they are a minimum distance away from line\r\n  offsetsText.y = isNaN(offsetsText.y) ? 0.7 : offsetsText.y;\r\n  if (offsetsText.y <= 0) {\r\n    offsetsText.y = Math.min(-0.5, offsetsText.y);\r\n  } else {\r\n    offsetsText.y = Math.max(0.5, offsetsText.y);\r\n  }\r\n\r\n  if (offsetsText.x <= 0) {\r\n    offsetsText.x = Math.min(-1.2, offsetsText.x);\r\n  } else {\r\n    offsetsText.x = Math.max(1.2, offsetsText.x);\r\n  }\r\n\r\n  // if text is too close to axes, move it on the other side of the line\r\n  if ((xval <= 3 && xval >= 0) && offsetsText.x < 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  if (xval >= -3 && xval < 0 && offsetsText.x > 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  // add text\r\n  svg.append('text')\r\n    .attr('x', xScale(xval + offsetsText.x))\r\n    .attr('y', yScale(yval + offsetsText.y))\r\n    .attr('text-anchor', 'middle')\r\n    .attr('alignment-baseline', 'middle')\r\n    .attr('class', 'text')\r\n    .style('font-size', textSize)\r\n    .text(`(${xval}, ${Math.round(yval)})`)\r\n}\r\n\r\nexport default LimitExampleGraph","import { COLORS } from \"../../../helpers/constants\";\r\nimport { getRandomNumber, getRandomWithExclusions, shuffleArray } from \"../../../helpers/functions\";\r\nimport { generateRandomPolynomial, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport LimitExampleGraph from \"../../../components/content-components/graphs/LimitExampleGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\n\r\n/**\r\n * generates random question that asks users to select the limit that best matches the graph\r\n * @returns title, question, options for question type\r\n */\r\nconst graphToLimit = (): Question => {\r\n  // title for question\r\n  const title = <></> // <h2>Which limit best represents the graph?</h2>\r\n\r\n  // generate random graph function\r\n  const { node, x } = generateRandomPolynomial(getRandomNumber(1, 4))\r\n  const f = (x) => node.evaluate({ x });\r\n  const realY = Math.round(f(x));\r\n\r\n  // generate yval - function undefined, hole, or function continuous at x val\r\n  const yvalNum = getRandomNumber(0, 2);\r\n  let y = null;\r\n  if (yvalNum === 0) {\r\n    y = getRandomNumber(-7, 7);\r\n  } else if (yvalNum === 1) {\r\n    y = realY;\r\n  }\r\n\r\n  // question content\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h2>Which limit best represents the graph?</h2> \r\n    <h3>Graph of <Latex expression={` g(x) `} inline={true}></Latex></h3>\r\n    <LimitExampleGraph f={f} xval={x} y={y}\r\n      fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // generate options\r\n  const o1 = {\r\n    component: <Latex expression={` {\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${realY} `} inline={true} />,\r\n    correct: true\r\n  }\r\n\r\n  const o2 = {\r\n    component: null,\r\n    correct: false\r\n  }\r\n\r\n  let ex = \"\";\r\n  const o2Num = getRandomNumber(0, 1);\r\n  if (o2Num === 0 && yvalNum === 0 && y !== realY) {\r\n    ex = `{\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${y}`;\r\n  } else if (x !== realY) {\r\n    ex = `{\\\\lim}_{{x \\\\to ${realY}}}{g(x)} = ${x}`;\r\n  } else {\r\n    const rand = getRandomWithExclusions(-7, 7, [realY])\r\n    ex = `{\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${rand}`;\r\n  }\r\n  o2.component = <Latex expression={` ${ex} `} inline={true} />\r\n\r\n  const input = shuffleArray([o1, o2]);\r\n  const type = 'mc'\r\n\r\n  const hints1 = <div>Recall the definition of a limit:\r\n    <Latex expression={`\\\\ {\\\\lim}`} inline={true} />\r\n    <Latex expression={`_{x \\\\to a}`} inline={true} />\r\n    <Latex expression={`f(x)`} inline={true} />\r\n    <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n    <Latex expression={`\\\\ L `} inline={true} />\r\n  </div>\r\n\r\n\r\n  const hints2 = <div>In this graph, what is <Latex expression={`x`} inline={true}/> approaching? What is <Latex expression={`y`} inline={true}/> approaching?</div>\r\n\r\n  const hints = [hints1, hints2];\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\n/**\r\n * generates random question that asks users to select the graph that best matches the limit\r\n * @returns title, question, options for question type\r\n */\r\nconst limitToGraph = (): Question => {\r\n  // title for question\r\n  const title = <></>// <h2>Which graph best represents the limit?</h2>\r\n\r\n  // random graph function\r\n  const g1 = generateRandomPolynomial(getRandomNumber(1, 4));\r\n  const node1 = g1.node;\r\n  const x1 = g1.x;\r\n  const f1 = x => node1.evaluate({ x });\r\n  const realY1 = Math.round(f1(x1));\r\n\r\n  // generate yval\r\n  let yvalNum = getRandomNumber(0, 2);\r\n  let y1 = null;\r\n  if (yvalNum === 0) {\r\n    y1 = getRandomNumber(-7, 7);\r\n  } else if (yvalNum === 1) {\r\n    y1 = realY1;\r\n  }\r\n\r\n  const question =\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h2>Which graph best represents the limit?</h2>\r\n    <Latex expression={` {\\\\lim}_{{x \\\\to ${x1}}}{g(x)} = ${realY1} `} inline={true} />\r\n  </div>\r\n\r\n  // generate options\r\n  const o1 = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <h3>Graph of <Latex expression={` g(x) `} inline={true} /></h3>\r\n      <LimitExampleGraph f={f1} xval={x1} y={y1} fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n    </div>,\r\n    correct: true\r\n  }\r\n\r\n  let x2 = realY1;\r\n  let y2 = x1;\r\n\r\n  if (x2 === y2) {\r\n    const n = getRandomNumber(0, 1);\r\n    if (n === 0) {\r\n      x2 = getRandomWithExclusions(-7, 7, [x2, -1, 0, 1]);\r\n    } else {\r\n      y2 = getRandomWithExclusions(-7, 7, [y2, -1, 0, 1]);\r\n    }\r\n  }\r\n\r\n  const g2 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), x2, y2);\r\n  const f2 = x => g2.evaluate({ x });\r\n\r\n  const o2 = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <h3>Graph of <Latex expression={` g(x) `} inline={true} /></h3>\r\n      <LimitExampleGraph f={f2} xval={x2} y={y2} fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n    </div>,\r\n    correct: false\r\n  }\r\n\r\n  const input = shuffleArray([o1, o2]);\r\n  const type = 'mc'\r\n\r\n  const hints1 = <div>Recall the definition of a limit:\r\n    <Latex expression={`\\\\ {\\\\lim}`} inline={true} />\r\n    <Latex expression={`_{x \\\\to a}`} inline={true} />\r\n    <Latex expression={`f(x)`} inline={true} />\r\n    <Latex expression={`\\\\ =\\\\ `} inline={true} />\r\n    <Latex expression={`\\\\ L `} inline={true} />\r\n  </div>\r\n\r\n\r\n  const hints2 = <div>Which graph accurately shows the correct <Latex expression={`x`} inline={true}/> value approaching the correct <Latex expression={`y`} inline={true}/> value?</div>\r\n\r\n  const hints = [hints1, hints2];\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(0, 1);\r\n  let q = null;\r\n  if (rand === 0) {\r\n    q = graphToLimit();\r\n  } else {\r\n    q = limitToGraph();\r\n  }\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion;"],"names":["_ref","f","xval","y","fColor","xColor","yColor","size","svgRef","useRef","useEffect","current","graphSize","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","yval","line","x","d","append","datum","attr","style","_createFunctionGraph","createFunctionGraph","data","id","textSize","createLimitLine","FAR_DIST","CLOSE_DIST","AXIS_OFFSET","dataUpToPoint","filter","pointId","uuidv4","functionLine","concat","node","pathLength","getTotalLength","leftLine","createFunctionLimitLine","rightLine","farPointOne","farPoint","farPointTwo","pointsText","convertScale","offsetsText","findOffsets","isNaN","Math","min","max","text","round","createAllLimitLines","_jsx","ref","q","getRandomNumber","title","_Fragment","_generateRandomPolyno","generateRandomPolynomial","evaluate","realY","yvalNum","question","_jsxs","className","children","Latex","expression","inline","LimitExampleGraph","GRAPH_SIZE","o1","component","correct","o2","ex","rand","getRandomWithExclusions","input","shuffleArray","type","hints","graphToLimit","g1","node1","x1","f1","realY1","y1","x2","y2","g2","generateRandomPolynomialWithPoint","limitToGraph","document","documentElement","setProperty","COLORS","length"],"sourceRoot":""}