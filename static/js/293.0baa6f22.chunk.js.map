{"version":3,"file":"static/js/293.0baa6f22.chunk.js","mappings":"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","sources":["topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.tsx"],"sourcesContent":["import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\"; \r\nimport React from \"react\"\r\nimport { Question } from \"../../../types/Question\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nconst limitByFactoring = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans: any = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified: any = null;\r\n  if (radical) {\r\n    const numeratorWithRoot: number = \r\n      getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = (ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\") \r\n      ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression: string = \r\n    `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (radical) {\r\n    hints.push(\r\n      <div>\r\n        This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} />, which gives us an expression in the form <Latex expression={`a + b`} />\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} />, and that will remove the radical!\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Try evaluating the limit again. Do you still get <Latex expression={`\\\\frac{0}{0}`} />?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      That's ok! There is a hole in the function that we need to remove. The next logical step is to factor both the top and bottom of the fraction.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      You should see where the hole is coming from now! Cancel these factors, and now try evaluating the limit. What do you get now?\r\n    </div>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nconst limitByTrig = (): any => {\r\n  const topVar: number = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar: number = !topVar ? 1 : 0;\r\n  const toExpand: number = getRandomNumber(0, 1); // whether top should be in 1 - form or trig^2\r\n  let ans: any = 0;\r\n  let numerator: string = \"\";\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator: string = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n\r\n  // decide xval so top/bottom are 0/0\r\n  let xVal: string = math.parse(xvals[topVar][plus]).toTex(); \r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [0]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [0]);\r\n\r\n  let toMultiply: number;\r\n  let first: string;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression: string = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (toExpand) {\r\n    hints.push(\r\n      <div>\r\n        Try factoring out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top.\r\n      </div>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`sin^2(x) + cos^2(x) = 1`} />? How can we use that to rewrite the top?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Can you factor the numerator now, and cancel a factor from top and bottom? Once you do that, try evaluating the limit again!\r\n    </div>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nconst limitByTrigSpecialCases = (): any => {\r\n  const numeratorDegree: number = getRandomNumber(0, 3); // total degree for numerator\r\n  const hints: React.JSX.Element[] = []\r\n\r\n  // initialization\r\n  let numerator: string = \"1\"; \r\n  let denominator: string = \"1\";\r\n  let ans = \"dne\";\r\n\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let denDegree = numeratorDegree;\r\n  \r\n  // generate random denominator degree occasionally\r\n  const same = getRandomNumber(0, 9); // whether degree is the same\r\n  if (numeratorDegree === 0 || same < 1) { \r\n    denDegree = getRandomNumber(1, 3);\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      <div>\r\n        Evaluating this with direct substitution, we get <Latex expression={`\\\\frac{0}{0}`} />. However, this doesn't look like factoring or rationalization. What is another technique that we learned?\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      Remember <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1?`} display={true} />\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      In order to use these, rememember that the <Latex expression={`x`} /> in the equations can be anything. Also rememember that we can manipulate the fractions to apply these limits.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      For example, we can multiply the fraction by <Latex expression={`\\\\frac{x}{x}`} /> or <Latex expression={`\\\\frac{2}{2}`} /> to try to fit the formulas we have!\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      After simplifying the whole thing, what is left? If there is still an expression left, try using direct substitution, and see if it still gives <Latex expression={`\\\\frac{0}{0}`} />. If not, you should have an answer! Otherwise, keep simplifying. \r\n    </div>\r\n  )\r\n\r\n  // generate terms based on degree\r\n  let obj = generateSpecialTrig(numeratorDegree, multipliedAns, false)\r\n  numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(denDegree, multipliedAns, true)\r\n  denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  // decide ans\r\n  if (denDegree < numeratorDegree) {\r\n    ans = \"0\"\r\n  } else if (denDegree > numeratorDegree) {\r\n    ans = \"dne\"\r\n  } else {\r\n    multipliedAns = \"(\" + multipliedAns + \")\"\r\n    ans = math.simplify(multipliedAns).toString()\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  return { ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = limitByFactoring();\r\n  } else if (rand <= 9) {\r\n    q = limitByTrigSpecialCases();\r\n  } else {\r\n    q = limitByTrig()\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * Generates one side of the fraction in trig limit problem involving sinx/x, x/sinx, (1 - cos x)/x\r\n * @param {number} degree of side (ex. 3 could mean x^2 sin x)\r\n * @param {string} multipliedAns used to keep trace of the current answer in generation process\r\n * @param {boolean} denominator whether we are generating a denminator (important since we can't have (1 - cos x) in the denominator and denominator will have 1 trig term or 1 poly term and at least another trig term)\r\n * @returns generated term and updated multipliedAns\r\n */\r\nconst generateSpecialTrig = \r\n  (degree: number, multipliedAns: string, denominator: boolean): any => {\r\n  let term = \"1\"; // initialize term\r\n  let exclusions = []; // coeffs that have already been used\r\n\r\n  // iterate over degree\r\n  for (let i = 0; i < degree;) {\r\n    // while we are less than degree, generate random term\r\n    const trig = getRandomNumber(0, 9) > 7 || i > 0; // whether term is poly or trig\r\n    const exp = getRandomNumber(1, denominator ? degree - i - 1 : degree - i) // exp of term\r\n    const expText = exp > 1 ? `^${exp}` : \"\";\r\n\r\n    // coeff of x in term, ex. 3 in sin(3x)\r\n    const coeff = getRandomWithExclusions(1, 4, exclusions); \r\n    const coeffText = coeff !== 1 ? coeff : \"\";\r\n\r\n    exclusions.push(coeff); // update coeff exclusions\r\n\r\n    if (trig === true) {\r\n      // update ans\r\n      const add = `(${Math.pow(coeff, exp)})`\r\n      multipliedAns = (denominator ? multipliedAns + add : add + multipliedAns)\r\n\r\n      // term to generate\r\n      if (getRandomNumber(0, 1) === 0 || denominator) {\r\n        term += `\\\\sin${expText}(${coeffText}x)`\r\n      } else {\r\n        term += `(1 - \\\\cos(${coeffText}x))${expText}`\r\n      }\r\n    } else {\r\n      // poly term\r\n      multipliedAns = denominator ? multipliedAns + `(${coeff})` : `(${coeff})` + multipliedAns \r\n      term += `${coeffText}x${expText}`\r\n    }\r\n    // increment i by degree that we added\r\n    i += exp;\r\n  }\r\n\r\n  // remove beginning 1 from term\r\n  if (term.length > 1) {\r\n    term = term.substring(1)\r\n  }\r\n  return { term, multipliedAns }\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nconst makeSquaredForLatex = (trigFunction: string): string => {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns object containing both root and b value in (a - b)\r\n */\r\nconst modifyToMakeRoot = (expression: string, x: number): any => {\r\n  // generate random linear function\r\n  let b: string = \r\n    sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["nerdamer","require","normalTrig","otherTrig","xvals","generateSpecialTrig","degree","multipliedAns","denominator","term","exclusions","i","trig","getRandomNumber","exp","expText","concat","coeff","getRandomWithExclusions","coeffText","push","add","Math","pow","length","substring","makeSquaredForLatex","trigFunction","modifyToMakeRoot","expression","x","b","sortPolynomialByDegree","getPolynomialFunction","expand","math","node","root","toString","charAt","rand","q","holeX","holeFactor","getStringFactorFromXval","topFactor","bottomFactor","topValue","bottomValue","numerator","ans","radical","modified","formatPolynomialToLatex","toTeX","replaceAll","nextToInput","_jsx","Latex","display","hints","_jsxs","children","type","limitByFactoring","numeratorDegree","denDegree","same","obj","limitByTrigSpecialCases","toMultiply","first","topVar","bottomVar","toExpand","plus","xVal","toTex","nconstant","dconstant","nerdamerFormatToLatex","limitByTrig","title","_Fragment","question","className"],"sourceRoot":""}