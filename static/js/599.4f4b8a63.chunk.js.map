{"version":3,"file":"static/js/599.4f4b8a63.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.tsx","components/content-components/graphs/FunctionGraph.tsx","components/content-components/tables/FunctionTable.tsx","components/latex/Piecewise.tsx","topics/01-limits/02-evaluating-limits-using-graphs/generate-question.tsx","topics/01-limits/03-estimating-limits-using-tables/generate-question.tsx","topics/01-limits/04-evaluating-limits-using-algebraic-properties/generate-question.tsx","topics/01-limits/05-evaluating-limits-using-direct-substitution/generate-question.tsx","topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.tsx","topics/01-limits/07-selecting-procedures-for-determining-limits/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\ninterface AsymptoticGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  x: number[], // xvalues of asymptotes where there will be dotted lines\r\n  y: number[] // y values of asymptotes where there will be dotted lines\r\n}\r\n\r\nconst AsymptoticGraph: React.FC<AsymptoticGraphProps> = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\nimport React from \"react\";\r\nimport { TableValue } from \"../../../@types/TableValue\";\r\n\r\ninterface FunctionTableProps {\r\n  xTitle: string, // title of x values\r\n  yTitle: string, // title of y values\r\n  data: TableValue[] // data to put in table\r\n}\r\n\r\nexport const FunctionTable: React.FC<FunctionTableProps> = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import Latex from \"../../../components/latex/Latex\";\r\nimport { getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport { fitPointsToQuadratic, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from 'mathjs'\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\";\r\nimport { COLORS, GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\n\r\n/**\r\n * generates random question that shows a graph with asymptote(s) and asks users to find the limit at an asymptotic point\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst asymptoticGraphQuestion = (): any => {\r\n  const randomNumbers = getRandomNumber(1, 2); // number of asymptotes\r\n  const xValues = []; // values at which there will be an asymptote\r\n  let f = `(${getRandomNumber(0, 1) === 0 ? \"-\" : \"\"}1/`; // function\r\n\r\n  // get random x values and build function\r\n  for (let i = 0; i < randomNumbers; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [-1, 0, 1, ...xValues]);\r\n    xValues[i] = num;\r\n    f = f + `(x ${num < 0 ? '+' : '-'} ${Math.abs(num)})`;\r\n  }\r\n  const verticalShift = getRandomNumber(-5, 5)\r\n  f = f + `) ${verticalShift > 0 ? '+' : '-'} ${Math.abs(verticalShift)}`\r\n\r\n  // sort x values in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n  const node = math.parse(f);\r\n\r\n  // generate functions array\r\n  // this generates an array that doesn't include the x values as the function is undefined at those points\r\n  const functions: GraphFunction[] = [];\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min: i === 0 ? -11 : xValues[i - 1],\r\n      max: i === xValues.length ? 11 : xValues[i],\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    }\r\n\r\n    functions[i] = curr;\r\n  }\r\n\r\n  // set all other question stuff\r\n  const ans = \"dne\";\r\n  const type = 'math';\r\n\r\n  // random x value to ask about\r\n  const val = xValues[getRandomNumber(0, xValues.length - 1)];\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <AsymptoticGraph functions={functions} size={GRAPH_SIZE} x={xValues} y={[verticalShift]} />\r\n  </div>\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${val}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div>\r\n      Focus on <Latex expression={`x = ${val}`} /> on the graph.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Recall that there are 3 cases when a limit doesn't exist:\r\n      </div>\r\n      <div>\r\n        <ol className=\"start\">\r\n          <li>\r\n            When the limit from the left does not equal the right.\r\n          </li>\r\n          <li>\r\n            When the graph is approaching positive or negative infinity at the point.\r\n          </li>\r\n          <li>\r\n            When the graph is oscillating at the point.\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        In this case, it is clear that the graph is approaching positive or negative infinity at <Latex expression={`x = ${val}`} />. Thus, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        dne\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of multiple functions, potentially with a jump.\r\n * Asks users to find limit from left, right, or both sides of a random point in graph\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst jumpGraphQuestion = (): any => {\r\n  const numFunctions = getRandomNumber(2, 3); // number of functions in graph\r\n  const xValues: number[] = []; // xvalues where there is a potential jump\r\n  const exclusions: number[] = []; // xvalues that should not be a jump\r\n\r\n  // generate random xvalues\r\n  for (let i = 1; i < numFunctions; i++) {\r\n    const num = getRandomWithExclusions(-8, 8, exclusions);\r\n    xValues[i - 1] = num;\r\n    exclusions.push(num - 2, num - 1, num, num + 1, num + 2) // exclude xvalue and +- 2\r\n  }\r\n\r\n  // sort xvalues in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n\r\n  const possibleXs = [...xValues]; // possiblexs that can be asked about\r\n\r\n  const functions = [];\r\n\r\n  // min/max variables of each function in function array\r\n  let min = -11;\r\n  let max = xValues[0] ? xValues[0] : 11;\r\n\r\n  // generate functions array\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    let x = null;\r\n    let node;\r\n\r\n    if (i === 0) {\r\n      // left most function\r\n      x = xValues[i] !== undefined ? xValues[i] : getRandomNumber(-8, 8);\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at right x value\r\n    } else if (i === numFunctions - 1) {\r\n      // right most function\r\n      x = xValues[i - 1]\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at left x value\r\n    } else {\r\n      // middle graph\r\n      x = xValues[i];\r\n      const midx = Math.round((xValues[i - 1] + xValues[i]) / 2) // midpoint of function domain\r\n\r\n      // points that should be in graph\r\n      const points = [\r\n        { x: xValues[i - 1], y: getRandomNumber(-7, 7) },\r\n        { x: midx, y: getRandomNumber(-7, 7) },\r\n        { x: xValues[i], y: getRandomNumber(-7, 7) }\r\n      ]\r\n      possibleXs.push(midx); // add midx as a potential xvalue to ask about\r\n      node = fitPointsToQuadratic(points) // generate graph that fits to points\r\n    }\r\n\r\n    max = xValues[i] !== undefined ? xValues[i] : 11; // update max\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min,\r\n      max,\r\n      includeLeft: i !== 0 ? !functions[i - 1].includeRight : false, // opposite of prev f right\r\n      includeRight: getRandomNumber(0, 1) === 0, // randomly decide\r\n      leftArrow: i === 0, // arrows on first and last graphs\r\n      rightArrow: i === numFunctions - 1,\r\n      classes: 'f',\r\n      leftCircle: i !== 0, // circle on both sides except first/last graphs which have arrows\r\n      rightCircle: i !== numFunctions - 1\r\n    }\r\n\r\n    min = xValues[i]; // update min\r\n    functions[i] = curr;\r\n  }\r\n\r\n  const qX = possibleXs[getRandomNumber(0, possibleXs.length - 1)]; // x to ask about\r\n  let ans: number | string;\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // get correct answer based on xvalue/sign\r\n  for (let i = 0; i < functions.length; i++) {\r\n    if (qX === functions[i].min) {\r\n      // qX on left side of graph, limit from right\r\n      if (sign === 1) {\r\n        ans = Math.round(functions[i].f(functions[i].min));\r\n      }\r\n    } else if (qX === functions[i].max) {\r\n      // qX on right side of graph\r\n      if (sign === 0) {\r\n        // limit from left\r\n        ans = functions[i].f(qX);\r\n      } else if (sign === 2) {\r\n        // limit from both sides\r\n        const currVal = Math.round(functions[i].f(qX));\r\n        const nextVal = Math.round(functions[i + 1].f(qX));\r\n        ans = currVal === nextVal ? currVal : 'dne';\r\n      }\r\n    } else if (qX > functions[i].min && qX < functions[i].max) {\r\n      // qX in the middle\r\n      ans = Math.round(functions[i].f(qX));\r\n    }\r\n  }\r\n\r\n  // set all other question stuff\r\n  const type = 'math'\r\n  ans = String(ans);\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const signText = sign === 0 ? `^{\\\\footnotesize\\\\texttt{-}}` : sign === 1 ? `^{\\\\footnotesize\\\\texttt{+}}` : ``;\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${qX + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hintsAnsComponent = <div className=\"hint-ans input correct ans\">\r\n    {ans}\r\n  </div>\r\n\r\n  const hints = [\r\n    <div>\r\n      First, look at the value we are trying to find. Are we interested in the limit from the left, right, or both directions?\r\n    </div>,\r\n    <div>\r\n      In this case, since we {sign === 2 ? \"don't\" : \"\"} see a {sign === 2 ? \"plus or minus\" : sign === 1 ? \"plus\" : \"minus\"} sign on the top right of the number <Latex expression=\"x\" /> is approaching, we are interested in the limit from {sign === 2 ? <strong>both sides</strong> : sign === 1 ? <>the <strong>right</strong></> : <>the <strong>left</strong></>}.\r\n    </div>,\r\n    <div>\r\n      Now, focus on <Latex expression={`x = ${qX}`} /> on the graph.\r\n    </div>\r\n  ]\r\n\r\n  if (sign === 2) {\r\n    if (ans === \"dne\") {\r\n      hints.push(\r\n        <div>\r\n          At <Latex expression={`x = ${qX}`} />, is the limit the same from the left and the right side?\r\n        </div>,\r\n        <>\r\n          <div>\r\n            Since the limits aren't the same from both sides, the limit doesn't exist. Thus, the correct answer is:\r\n          </div>\r\n          {hintsAnsComponent}\r\n        </>\r\n      )\r\n    } else {\r\n      hints.push(\r\n        <>\r\n          <div>\r\n            At <Latex expression={`x = ${qX}`} />, we can see the graph approaching <Latex classes=\"bold\" expression={ans} /> from both sides. Thus, the correct answer is:\r\n          </div>\r\n          {hintsAnsComponent}\r\n        </>\r\n      )\r\n    }\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          From the {sign === 1 ? \"right\" : \"left\"} of <Latex expression={`x = ${qX}`} />, we can see the graph is approaching <Latex classes=\"bold\" expression={ans} />. Thus, the correct answer is:\r\n        </div>\r\n        {hintsAnsComponent}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of an oscillating function\r\n * asks users to find limit where graph is oscillating\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst oscillatingGraphQuestion = (): any => {\r\n  // transformation variables\r\n  const horizShift = getRandomNumber(-8, 8);\r\n  const verticalShift = getRandomNumber(-7, 7)\r\n  const f = `(${getRandomWithExclusions(-3, 3, [0])}/${getRandomWithExclusions(-2, 2, [0])})sin(1/(x - ${horizShift})) + ${verticalShift}`\r\n\r\n  // set function\r\n  const node = math.parse(f);\r\n  const functions: GraphFunction[] = [{\r\n    f: (x: number) => node.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // set all other question stuff\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const ans = 'dne'\r\n  const type = 'math'\r\n\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${horizShift}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div>\r\n      Focus on <Latex expression={`x = ${horizShift}`} /> on the graph.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Recall that there are 3 cases when a limit doesn't exist:\r\n      </div>\r\n      <div>\r\n        <ol className=\"start\">\r\n          <li>\r\n            When the limit from the left does not equal the right.\r\n          </li>\r\n          <li>\r\n            When the graph is approaching positive or negative infinity at the point.\r\n          </li>\r\n          <li>\r\n            When the graph is oscillating at the point.\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        In this case, it is clear that the graph is oscillating at <Latex expression={`x = ${horizShift}`} />. Thus, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        dne\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 2) {\r\n    q = oscillatingGraphQuestion();\r\n  } else if (rand <= 5) {\r\n    q = asymptoticGraphQuestion();\r\n  } else {\r\n    q = jumpGraphQuestion();\r\n  }\r\n\r\n  q.title = <></>\r\n\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion","import { generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from 'mathjs'\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst functionToTable = (): Question => {\r\n  const title = <></>\r\n\r\n  // generate random function\r\n  const xVal = getRandomWithExclusions(-9, 9, [0]);\r\n\r\n  // get 2-3 factors on top\r\n  const factor1 = getStringFactorFromXval(xVal);\r\n  const factor2 = getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0]));\r\n  const factor3 = getRandomNumber(0, 1) === 0 ?\r\n    getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0])) : \"\";\r\n\r\n  // get expanded latex version of equation\r\n  const numerator = sortPolynomialByDegree(nerdamer(`${factor1}${factor2}${factor3}`).expand());\r\n  const equation = `(${numerator})/${factor1}`;\r\n  const latexEq = nerdamer(equation).toTeX().replaceAll(' \\\\cdot ', \"\")\r\n\r\n  // create question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Which table is best for estimating the limit of this function?</h2>\r\n      <div>Assume both tables have correct function values.</div>\r\n    </div>\r\n    <Latex expression={`g(x) = ${latexEq}`} classes={'large-font'} display={true} />\r\n  </div>\r\n\r\n  const node = math.parse(`${factor2}${factor3}`);\r\n  const f = (x: number) => node.evaluate({ x });\r\n\r\n  // create options\r\n  // first option\r\n  const data1 = [];\r\n  for (let i = xVal - 5; i <= xVal + 5; i++) {\r\n    data1.push({ x: i, y: xVal === i ? 'und' : Math.round(f(i)) });\r\n  }\r\n\r\n  // second option data\r\n  const data2 = [];\r\n  for (let i = xVal - 2; i <= xVal + 2; i++) {\r\n    if (i !== xVal) {\r\n      data2.push({ x: i, y: Math.round(f(i)) })\r\n    } else {\r\n      data2.push({ x: i - 0.1, y: fixRounding(f(i - 0.1), 10) });\r\n      data2.push({ x: i - 0.01, y: fixRounding(f(i - 0.01), 100) });\r\n      data2.push({ x: i - 0.001, y: fixRounding(f(i - 0.001), 1000) });\r\n      data2.push({ x: i, y: 'und' });\r\n      data2.push({ x: i + 0.001, y: fixRounding(f(i + 0.001), 1000) });\r\n      data2.push({ x: i + 0.01, y: fixRounding(f(i + 0.01), 100) });\r\n      data2.push({ x: i + 0.1, y: fixRounding(f(i + 0.1), 10) });\r\n    }\r\n  }\r\n\r\n  const option1 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data1} />,\r\n    correct: false\r\n  }\r\n\r\n  const option2 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data2} />,\r\n    correct: true\r\n  }\r\n\r\n  const input = shuffleArray([option1, option2])\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Focus on <Latex expression={`x = ${xVal}`} /> in both tables. Recall that a limit is about getting infinitely close to the <Latex expression=\"x\" /> value.\r\n      </div>\r\n      <div>\r\n        This means we really need to \"zoom in\" on our <Latex expression=\"x\" /> value.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Thus, looking at both tables, it is clear that the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {option2.component}\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nconst tableToLimit = (): Question => {\r\n  const xVal = getRandomNumber(-9, 9); // xval at which to evaluate limit\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // domain for table\r\n  const startX = xVal - (getRandomNumber(0, 1) === 0 ? 3 : 0);\r\n  const endX = xVal + ((getRandomNumber(0, 1) === 0 || xVal === startX) ? 3 : 0);\r\n\r\n  const increasing = Boolean(getRandomNumber(0, 1)); // whether table values are increasing or decreasing\r\n  const orderedValues = generateOrderedValues(endX - startX + 1, increasing); // values in table\r\n\r\n  // evaluate answer\r\n  let ans = String(orderedValues[xVal === startX ? 0 : 3]); // default answer\r\n  if ((xVal === startX && sign === 0) ||\r\n    (xVal === endX && sign === 1) ||\r\n    ((xVal === endX || xVal === startX) && sign === 2)) {\r\n    ans = \"dne\";\r\n  }\r\n\r\n  const { data } = generateLimitTableData(xVal, orderedValues, startX, endX) // data for table\r\n\r\n  // other question components\r\n  const title = <></> // no title as title is included in question\r\n\r\n  const signText = sign === 0 ? `^\\\\textbf{-}` : sign === 1 ? `^\\\\textbf{+}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${xVal + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Estimate the limit from the table.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist or cannot be evaluated from the table.</div>\r\n    </div>\r\n    <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data} />\r\n  </div>\r\n\r\n  const type = 'math';\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        We want to evaluate the limit as <Latex expression={`x`} /> approaches {xVal} from {sign === 0 ? <>the <strong>left</strong></> : sign === 1 ? <>the <strong>right</strong></> : <strong>both sides</strong>}. What side(s) do we see in the table?\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  if (ans === \"dne\") {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Looking at the table, we only have data to the <strong>{xVal === startX ? \"right\" : \"left\"}</strong> of <Latex expression={`x = ${xVal}`} />, not {xVal === endX ? \"the right\" : xVal === endX ? \"the left\" : \"both sides\"}. We don't have enough information to evaluate the limit.\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          dne\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          We have data on {xVal === endX ? <>the <strong>left</strong></> : xVal === startX ? <>the <strong>right</strong></> : <strong>both sides</strong>} of <Latex expression={`x = ${xVal}`} />.\r\n        </div>\r\n        <div>\r\n          This means we can estimate the limit!\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Remember that when finding limits, we want to focus on what the function is <strong>approaching</strong>, not necessarily the function value at that point.\r\n        </div>\r\n        <div>\r\n          Looking at the <Latex expression=\"y\" /> values near <Latex expression={`x = ${xVal}`} />, it looks like the function is approaching <Latex expression={ans} />.\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return { title, question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = tableToLimit();\r\n  } else {\r\n    q = functionToTable();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {Number} val value to round\r\n * @param {Number} degree of places to round to: ex. if you want to round to the tenths place, this should be 10\r\n * @returns rounded value\r\n */\r\nconst fixRounding = (val: number, degree: number): number => {\r\n  return Math.floor(val * degree * 10) / (degree * 10);\r\n}\r\n\r\nexport default generateRandomQuestion","import { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { generateLimitPropertyTerm, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { convertArrayToObject, generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from \"mathjs\"\r\nimport { GRAPH_SIZE, COLORS } from \"../../../helpers/constants\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { FunctionValue } from \"../../../@types/FunctionValue\";\r\n\r\n/**\r\n * generates random question that presents a table and a graph from which some limits can be evaluated, then generates expression with limit properties and asks user to solve\r\n */\r\nconst limitPropertyQuestion = (): Question => {\r\n  const functions: FunctionValue[] = []; // functions in expression, ex: {f: f(x), value: 2}\r\n  const xVal = getRandomWithExclusions(-9, 9, [-1, 0, 1]); // where to eval limit\r\n\r\n  // generate table\r\n  const tableValues = generateOrderedValues(5, Boolean(getRandomNumber(0, 1))); // values in table\r\n  const { data } = generateLimitTableData(xVal, tableValues, xVal - 2, xVal + 2);\r\n  const table = <FunctionTable xTitle={'x'} yTitle={'f(x)'} data={data} />\r\n\r\n  // generate graph with point at xVal\r\n  const graphFunction =\r\n    generateRandomPolynomialWithPoint(3, xVal, getRandomWithExclusions(-7, 7, [-1, 0, 1]));\r\n\r\n  // function to graph\r\n  let f: GraphFunction[] = [{\r\n    f: (x: number) => graphFunction.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // create graph\r\n  const graph = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={f} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {table}\r\n    {graph}\r\n  </div>\r\n\r\n  // populate functions array\r\n  functions.push({ f: 'x', value: tableValues[2] });\r\n  functions.push({ f: 'y', value: Math.round(graphFunction.evaluate({ x: xVal })) });\r\n\r\n  // get expression and answer\r\n  let expression = generateLimitPropertyTerm(functions, ['^', '+', '-', '*', '/']);\r\n  const ans = String(Math.round(math.evaluate(expression, convertArrayToObject(functions))));\r\n\r\n  // format expression\r\n  expression = math.simplifyCore(expression).toTex({ parenthesis: 'auto' });\r\n  const replacedWithVals = expression.replaceAll('x', `(${functions[0].value})`)\r\n    .replaceAll('y', `(${functions[1].value})`)\r\n    .replaceAll(`~`, '')\r\n    .replaceAll(`~{`, `{`)\r\n\r\n  expression = expression.replaceAll('x', 'f(x)')\r\n  expression = expression.replaceAll('y', 'g(x)')\r\n  expression = expression.replaceAll('~', '')\r\n  expression = expression.replaceAll(\"~{ \", \"{\")\r\n\r\n  // other question info\r\n  const title = <>\r\n    <h2>Evaluate the limit using the figures provided. </h2>\r\n  </>\r\n\r\n  const nextToInput = <Latex expression={`\\\\lim_{x \\\\to ${xVal}}\\\\left[${expression}\\\\right] = `} display={true} />\r\n\r\n  // hints\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        First, evaluate <Latex expression={`\\\\lim_{x \\\\to ${xVal}} f(x)`} /> using the table and <Latex expression={`\\\\lim_{x \\\\to ${xVal}} g(x)`} /> using the graph.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        You should find that <Latex expression={`\\\\lim_{x \\\\to ${xVal}} f(x) = ${functions[0].value}`} /> and <Latex expression={`\\\\lim_{x \\\\to ${xVal}} g(x) = ${functions[1].value}`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Now, remember we can just directly substitute in these values into the limit, like this:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${xVal}} \\\\left[${expression}\\\\right] = ${replacedWithVals}`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Simplifying this, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { question, title, ans, type: 'math', nextToInput, hints }\r\n\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return limitPropertyQuestion();\r\n}\r\n\r\nexport default generateRandomQuestion","import { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport * as math from \"mathjs\"\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\nimport React from \"react\";\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\nimport { Option } from \"../../../@types/Option\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport { LEFT_LIMIT, RIGHT_LIMIT } from \"../../../helpers/constants\";\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * generates random question with piecewise function, user is asked to find a limit using that function\r\n * @returns relevant question components\r\n */\r\nconst piecewiseToLimit = (): Question => {\r\n  const title = <></>\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const mathFs = []; // array of mathjs functions\r\n  const xValues = generateOrderedValues(2, true, -3, 2); // random xvalues\r\n  let yValues = [getRandomNumber(-7, 7), getRandomNumber(-7, 7)]; // random y values\r\n  let includes = getRandomNumber(0, 1); // whether current xval is included in domain\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1];\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      // random which xval functions are continuous at\r\n      const match = getRandomNumber(0, 1) ? i - 1 : i;\r\n      xVal = xValues[match];\r\n      yVal = yValues[match];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal,\r\n      getRandomNumber(0, 1) ? yVal : getRandomNumber(-7, 7));\r\n\r\n    // store function to evaluate f\r\n    const node = math.parse(f);\r\n    mathFs.push((x: number) => node.evaluate({ x }));\r\n\r\n    // format f\r\n    f = math.simplifyCore(f).toTex({ parenthesis: 'auto' }).replaceAll('\\\\cdot', \"\");\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const question = <>\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <Piecewise functions={functions} title={`f(x)`} />\r\n  </>\r\n\r\n  // find answer\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n  const x = xValues[getRandomNumber(0, xValues.length - 1)];\r\n  let ans: number | string;\r\n  const fsToUse = []\r\n  for (let i = 0; i < xValues.length; i++) {\r\n    if (x === xValues[i]) {\r\n      let f1 = Math.round(mathFs[i](x));\r\n      let f2 = Math.round(mathFs[i + 1](x));\r\n      if (sign === 0) {\r\n        ans = f1;\r\n        fsToUse.push({ f: functions[i].f, value: f1 })\r\n      } else if (sign === 1) {\r\n        ans = f2;\r\n        fsToUse.push({ f: functions[i + 1].f, value: f2 })\r\n      } else {\r\n        ans = f1 === f2 ? f1 : 'dne'\r\n        fsToUse.push({ f: functions[i].f, value: f1 })\r\n        fsToUse.push({ f: functions[i + 1].f, value: f2 })\r\n      }\r\n    }\r\n  }\r\n\r\n  // other relevant components\r\n  const signText = sign === 0 ? `^{\\\\footnotesize\\\\texttt{-}}` : sign === 1 ? `^{\\\\footnotesize\\\\texttt{+}}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        In this case, we want to evaluate the limit as <Latex expression=\"x\" /> approaches <Latex expression={`${x}`} /> from {sign === 2 ? <strong>both sides</strong> : sign === 1 ? <>the <strong>right</strong></> : <>the <strong>left</strong></>}.\r\n        Focus on the functions around <Latex expression={`x = ${x}`} />.\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  if (sign === 2) {\r\n    hints.push(\r\n      <div>\r\n        Since we want to evaluate the limit from both sides, we need to look at the limits from both the left and the right of <Latex expression={`x = ${x}`} />.\r\n      </div>,\r\n      <>\r\n        <div>\r\n          Evaluating from the left, you should get:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x}${LEFT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}${LEFT_LIMIT}} ${fsToUse[0].f} = ${fsToUse[0].value}`} display={true} />\r\n        </div>\r\n\r\n        <div>\r\n          Evaluating from the right, you should get:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x}${RIGHT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}${RIGHT_LIMIT}} ${fsToUse[1].f} = ${fsToUse[1].value}`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Since these limits are {ans === \"dne\" ? \"not\" : \"\"} equal, we know the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans}\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <div>\r\n        Since we want to evaluate the limit from the <strong>{sign === 0 ? \"left\" : \"right\"}</strong> of <Latex expression={`x = ${x}`} />, we should use the function <Latex expression={fsToUse[0].f} />.\r\n      </div>,\r\n      <>\r\n        <div>\r\n          Evaluating the limit, we get:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x}${sign === 0 ? LEFT_LIMIT : RIGHT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}${sign === 0 ? LEFT_LIMIT : RIGHT_LIMIT}} ${fsToUse[0].f} = ${fsToUse[0].value}`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return { title, question, ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random absolute value quadratic and user is asked to select which piecewise function corresponds to it.\r\n * @returns relevant question components\r\n */\r\nconst absValueToPiecewise = (): Question => {\r\n  const title = <></>\r\n\r\n  // get two factors\r\n  const x1 = getRandomNumber(-7, 7)\r\n  const xvalues = [x1, getRandomWithExclusions(-7, 7, [x1])]\r\n  xvalues.sort((a, b) => a - b)\r\n\r\n  const f1 = getStringFactorFromXval(xvalues[0])\r\n  const f2 = getStringFactorFromXval(xvalues[1])\r\n  const neg = getRandomNumber(0, 1); // whether provided function is negative or positive\r\n\r\n  // get normal expanded version and negative expanded version\r\n  let expanded = sortPolynomialByDegree(nerdamer(`${f1}${f2}`).expand());\r\n  expanded = nerdamer(expanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  let negExpanded = sortPolynomialByDegree(nerdamer(`-${f1}${f2}`).expand());\r\n  negExpanded = nerdamer(negExpanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  const question = <>\r\n    <h3>Select the piecewise function corresponding to this absolute value function: </h3>\r\n    <Latex expression={`g(x) = |${neg ? negExpanded : expanded}|`} classes={'large-font'} />\r\n  </>\r\n\r\n  // function arrays for each option\r\n  const piecewise1: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise2: PiecewiseFunction[] = [\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise3: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq 0`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x > 0`\r\n    }\r\n  ]\r\n\r\n  // create options array\r\n  const options: Option[] = [\r\n    {\r\n      component: <Piecewise functions={piecewise1} title={`g(x)`} />,\r\n      correct: true\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise2} title={`g(x)`} />,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise3} title={`g(x)`} />,\r\n      correct: false\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        In order to convert an absolute value function to a piecewise function, the first thing we have to do is find where the function inside is <Latex expression={`>`} /> or <Latex expression={`<`} /> 0.\r\n      </div>\r\n      <div>\r\n        In this case, we have a quadratic equation inside the absolute value. In order to find where this is above or below 0, first find its zeros.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        You should've found that the zeros are <Latex expression={`x = ${xvalues[0]}`} /> and <Latex expression={`x = ${xvalues[1]}`} />.\r\n      </div>\r\n      <div>\r\n        Now, think about whether the parabola is right side up or upside down.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Since the coefficient of the <Latex expression=\"x^2\" /> term is {neg ? \"negative\" : \"positive\"}, we know the parabola is {neg ? \"upside down\" : \"right side up\"}.\r\n      </div>\r\n      <div>\r\n        This means that when <Latex expression={`x < ${xvalues[0]}`} /> and <Latex expression={`x > ${xvalues[1]}`} />, the quadratic is {neg ? \"negative\" : \"positive\"}. When <Latex expression={`${xvalues[0]} < x < ${xvalues[1]}`} />, the quadratic is {!neg ? \"negative\" : \"positive\"}.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        We can use this to create our piecewise function. Absolute value basically means that negative values are made positive. Thus, wherever our quadratic is negative, for that domain only, we will multiply the quadratic by <Latex expression=\"-1\" />. \r\n      </div>\r\n      <div>\r\n        Basically, when {neg ? <><Latex expression={`x < ${xvalues[0]}`} /> and <Latex expression={`x > ${xvalues[1]}`} /></> : <Latex expression={`${xvalues[0]} < x < ${xvalues[1]}`} />}, our piecewise function will be <Latex expression={`${neg ? expanded : negExpanded}`} />. \r\n      </div>\r\n      <div>\r\n        Otherwise, when {!neg ? <><Latex expression={`x < ${xvalues[0]}`} /> and <Latex expression={`x > ${xvalues[1]}`} /></> : <Latex expression={`${xvalues[0]} < x < ${xvalues[1]}`} />} it will be <Latex expression={`${neg ? negExpanded : expanded}`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        This means that the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {options[0].component}\r\n      </div>\r\n    </>\r\n\r\n  ]\r\n\r\n  return { title, question, type: 'mc', input: shuffleArray(options), hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 6) {\r\n    q = piecewiseToLimit();\r\n  } else {\r\n    q = absValueToPiecewise()\r\n  }\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion;","import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction, generateSpecialTrig } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport React from \"react\"\r\nimport { Question } from \"../../../@types/Question\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nconst limitByFactoring = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let originalNumerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n  let originalDenominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans: any = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified: any = null;\r\n  const numeratorWithRoot: number =\r\n    getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n  if (radical) {\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = (ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\")\r\n      ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression: string =\r\n    `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints: React.JSX.Element[] = [\r\n    <>\r\n      <div>\r\n        First, evaluate the limit with direct substitution:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n  ]\r\n\r\n  const tempRadical = modified ? `(\\\\sqrt{${modified.root}} - (${formatPolynomialToLatex(modified.b)}))` : ''\r\n  if (radical) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} display={true} />\r\n        </div>\r\n        <div>\r\n          This gives us an expression in the form <Latex expression={`a + b`} />.\r\n        </div>\r\n      </>\r\n\r\n\r\n    )\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} /> and simplify. This should give you:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${holeX}}\\\\frac{(${originalNumerator})${!numeratorWithRoot ? tempRadical : ''}}{(${originalDenominator})${numeratorWithRoot ? tempRadical : ''}}`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        However, try evaluating the limit again, and you will still get <Latex expression={`\\\\frac{0}{0}`} />.\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Next, try factoring the top and bottom to see if we can cancel any factors.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        This should give you:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${holeX}}\\\\frac{${holeFactor}(${formatPolynomialToLatex(topFactor)})${!numeratorWithRoot ? tempRadical : ''}}{${holeFactor}(${formatPolynomialToLatex(bottomFactor)})${numeratorWithRoot ? tempRadical : ''}}`} display={true} />\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      Now we see that <Latex expression={holeFactor} /> is on the top and bottom! Cancel this, and evaluate the limit again.\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Evaluating again, you will find that the correct answer is{ans === \"dne\" ? \" a number over 0, which means\" : ''}:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nconst limitByTrig = (): any => {\r\n  const topVar: number = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar: number = !topVar ? 1 : 0;\r\n  const toExpand: number = getRandomNumber(0, 1); // whether top should be in 1 - form or trig^2\r\n  let ans: any = 0;\r\n  let numerator: string = \"\";\r\n  let latexNumerator: string = \"\"\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator: string = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n  let latexDenominator: string = `1 ${plus ? '+' : '-'} \\\\${normalTrig[bottomVar]}`\r\n  const otherDenominator: string = `1 ${plus ? '-' : '+'} \\\\${normalTrig[bottomVar]}`\r\n\r\n  // decide xval so top/bottom are 0/0\r\n  let xVal: string = math.parse(xvals[topVar][plus]).toTex().replaceAll('~', \"\");\r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [-1, 0, 1]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [-1, 0, 1]);\r\n\r\n  let toMultiply: number;\r\n  let first: string;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      latexNumerator = `(\\\\${makeSquaredForLatex(first)} - \r\n      \\\\${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      latexNumerator = `(\\\\${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    latexNumerator = `\\\\${makeSquaredForLatex(normalTrig[topVar])}`\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression: string = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints: React.JSX.Element[] = [\r\n    <>\r\n      <div>\r\n        First, evaluate the limit with direct substitution:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n  ]\r\n\r\n  let numeratorPrefix = \"\"\r\n  const limText = `\\\\lim_{x \\\\to ${xVal}}`\r\n  if (toExpand) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          In order to make things more convenient, first factor out the constants on the top and bottom:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${expression} = ${limText} \r\n          \\\\left(\\\\frac{${nconstant}${latexNumerator}}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, focus on the numerator. Rewrite it with <Latex expression={`\\\\sin`} /> and <Latex expression={`\\\\cos`} />.\r\n        </div>\r\n        <div>\r\n          We want to somehow get the expression into <Latex expression={`1 - \\\\${makeSquaredForLatex(normalTrig[bottomVar])}`} />.\r\n        </div>\r\n\r\n      </>,\r\n      <>\r\n        <div>\r\n          In order to do this, we can factor out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top. This should give you:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \r\n          \\\\left(\\\\frac{${nconstant}${latexNumerator}}{${dconstant}(${latexDenominator})}\\\\right) = ${limText} \\\\left(\\\\frac{${`${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}`}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can factor the numerator:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \\\\left(\\\\frac{${`${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}`}{${dconstant}(${latexDenominator})}\\\\right) = \r\n          ${limText} \\\\left(\\\\frac{${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}(1 - \\\\${normalTrig[1 - topVar]})(1 + \\\\${normalTrig[1 - topVar]})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    numeratorPrefix = `${nconstant}${nerdamerFormatToLatex(makeSquaredForLatex(first))}`\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Remember, we can use <Latex expression={`\\\\sin^2(x) + \\\\cos^2(x) = 1`} /> to rewrite the top like this:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${expression} = ${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can factor the numerator:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${makeSquaredForLatex(normalTrig[1 - topVar])})}{${dconstant}(${latexDenominator})}\\\\right) = \r\n          ${limText} \\\\left(\\\\frac{${nconstant}(1 - \\\\${normalTrig[1 - topVar]})(1 + \\\\${normalTrig[1 - topVar]})}{${dconstant}(${latexDenominator})}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n    numeratorPrefix = `${nconstant}`\r\n  }\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Now, we can cancel out the factors on the numerator and denominator to get:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${xVal}} \\\\left(\\\\frac{${numeratorPrefix}(${otherDenominator})}{${dconstant}}\\\\right)`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Lastly, evaluating the limit, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nconst limitByTrigSpecialCases = (): any => {\r\n  const numeratorDegree: number = getRandomNumber(1, 2); // total degree for numerator\r\n  const hints: React.JSX.Element[] = []\r\n\r\n  // initialization\r\n  let numerator: string = \"1\";\r\n  let denominator: string = \"1\";\r\n  let ans = \"dne\";\r\n\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let denDegree = numeratorDegree;\r\n\r\n  // generate random denominator degree occasionally\r\n  const same = getRandomNumber(0, 9); // whether degree is the same\r\n  if (numeratorDegree === 0 || same < 1) {\r\n    denDegree = getRandomNumber(1, 3);\r\n  }\r\n\r\n  // generate terms based on degree\r\n  let obj = generateSpecialTrig(numeratorDegree, multipliedAns, false)\r\n  numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n  const numeratorFunctions = obj.functions\r\n\r\n  obj = generateSpecialTrig(denDegree, multipliedAns, true)\r\n  denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n  const denominatorFunctions = obj.functions\r\n\r\n  // decide ans\r\n  if (denDegree < numeratorDegree) {\r\n    ans = \"0\"\r\n  } else if (denDegree > numeratorDegree) {\r\n    ans = \"dne\"\r\n  } else {\r\n    multipliedAns = \"(\" + multipliedAns + \")\"\r\n    ans = math.simplify(multipliedAns).toString()\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Evaluating this with direct substitution, you should get\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${expression} = \\\\frac{0}{0}`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        In order to solve this problem, we need to use these special trig limits:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1?`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Remember that we can always multiply the fraction by things equivalent to <Latex expression=\"1\" /> (ex. <Latex expression={`\\\\frac{2x}{2x}`} />) to simplify the limit.\r\n      </div>\r\n      <div>\r\n        To do this problem, we will examine each term and try to simplify it with the limits above.\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  let oldNumerator = numerator\r\n  let oldDenominator = denominator\r\n  for (let i = 0; i < numeratorFunctions.length; i++) {\r\n    let toMultiply = ''\r\n    const termToMultiply = `${numeratorFunctions[i].coeff > 1 ? numeratorFunctions[i].coeff : ''}x`\r\n\r\n    for (let j = 0; j < numeratorFunctions[i].exp; j++) {\r\n      toMultiply += `(${termToMultiply})`\r\n    }\r\n\r\n    let newNumerator = oldNumerator.replace(numeratorFunctions[i].term, '')\r\n\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Let's focus on <Latex expression={numeratorFunctions[i].term} /> on the top.\r\n        </div>\r\n        {numeratorFunctions[i].exp > 1 ?\r\n          <div>\r\n            Since this term has an exponent of <strong>{numeratorFunctions[i].exp}</strong>, we need to have <strong>{numeratorFunctions[i].exp}</strong> terms that are <Latex expression={`${numeratorFunctions[i].coeff}x`} /> on the bottom.\r\n          </div> :\r\n          <div>\r\n            In order to use our special limit properties, we need <Latex expression={`${termToMultiply}`} /> on the bottom.\r\n          </div>}\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, our new expression becomes:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${oldNumerator}}{${oldDenominator}}\\\\right) = \\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + oldNumerator}}{${toMultiply + oldDenominator}}\\\\right)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we can simplify <Latex expression={numeratorFunctions[i].term} /> on the top with <Latex expression={`${termToMultiply}`} /> on the bottom. This gives us:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + oldNumerator}}{${toMultiply + oldDenominator}}\\\\right) = \\\\lim_{x \\\\to 0} \\\\left(\\\\frac{${toMultiply + newNumerator}}{${oldDenominator}}\\\\right)`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n\r\n    oldNumerator = toMultiply + newNumerator\r\n  }\r\n\r\n  let bottomMultiply = ''\r\n  for (let i = 0; i < denominatorFunctions.length; i++) {\r\n    let toMultiply = ''\r\n    const termToMultiply = `${denominatorFunctions[i].coeff > 1 ? denominatorFunctions[i].coeff : ''}x`\r\n\r\n    for (let j = 0; j < denominatorFunctions[i].exp; j++) {\r\n      toMultiply += `(${termToMultiply})`\r\n    }\r\n    bottomMultiply += toMultiply\r\n  }\r\n\r\n  hints.push(<>\r\n    <div>\r\n      Applying a very similar process to the bottom, you should get the expression to be:\r\n    </div>\r\n    <div>\r\n      <Latex expression={`\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${oldNumerator}}{${bottomMultiply}}\\\\right)`} display={true} />\r\n    </div>\r\n  </>)\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Simplifying this and evaluating the limit, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  return { ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = limitByFactoring();\r\n  } else if (rand <= 9) {\r\n    q = limitByTrigSpecialCases();\r\n  } else {\r\n    q = limitByTrig()\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nconst makeSquaredForLatex = (trigFunction: string): string => {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns object containing both root and b value in (a - b)\r\n */\r\nconst modifyToMakeRoot = (expression: string, x: number): any => {\r\n  // generate random linear function\r\n  let b: string =\r\n    sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion","import g02 from \"../02-evaluating-limits-using-graphs/generate-question\";\r\nimport g03 from \"../03-estimating-limits-using-tables/generate-question\";\r\nimport g04 from \"../04-evaluating-limits-using-algebraic-properties/generate-question\";\r\nimport g05 from \"../05-evaluating-limits-using-direct-substitution/generate-question\";\r\nimport g06 from \"../06-evaluating-limits-using-algebraic-manipulation/generate-question\";\r\nimport { getRandomNumber } from \"../../../helpers/functions\";\r\nimport { Question } from \"../../../@types/Question\";\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  const rand = getRandomNumber(1, 10);\r\n  let q: Question = null;\r\n  if (rand <= 1) {\r\n    q = g02();\r\n  } else if (rand <= 2) {\r\n    q = g03();\r\n  } else if (rand <= 4) {\r\n    q = g04();\r\n  } else if (rand <= 7) {\r\n    q = g05();\r\n  } else {\r\n    q = g06();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","FunctionTable","xTitle","yTitle","data","tableRef","setWidth","useState","originalWidthRef","windowWidth","useWindowSize","display","setDisplay","element","resizeObserver","ResizeObserver","entries","entry","target","contentRect","observe","unobserve","disconnect","className","children","_jsxs","concat","Latex","expression","map","Piecewise","title","classes","setExpression","e","f","domain","_Fragment","generateRandomQuestion","rand","getRandomNumber","q","oscillatingGraphQuestion","horizShift","verticalShift","getRandomWithExclusions","node","math","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","leftCircle","rightCircle","question","inline","FunctionGraph","GRAPH_SIZE","ans","type","nextToInput","hints","asymptoticGraphQuestion","randomNumbers","xValues","num","Math","abs","sort","a","b","curr","val","AsymptoticGraph","jumpGraphQuestion","numFunctions","exclusions","push","possibleXs","undefined","generateRandomPolynomialWithPoint","midx","round","fitPointsToQuadratic","qX","sign","currVal","String","signText","hintsAnsComponent","document","documentElement","setProperty","COLORS","nerdamer","require","fixRounding","degree","floor","tableToLimit","xVal","startX","endX","increasing","Boolean","orderedValues","generateOrderedValues","generateLimitTableData","functionToTable","factor1","getStringFactorFromXval","factor2","factor3","numerator","sortPolynomialByDegree","expand","equation","latexEq","toTeX","replaceAll","data1","data2","option1","component","correct","option2","input","shuffleArray","limitPropertyQuestion","tableValues","table","graphFunction","graph","value","generateLimitPropertyTerm","convertArrayToObject","toTex","parenthesis","replacedWithVals","piecewiseToLimit","mathFs","yValues","includes","yVal","match","getPolynomialFunctionWithPoint","fsToUse","f1","f2","LEFT_LIMIT","RIGHT_LIMIT","absValueToPiecewise","x1","xvalues","neg","expanded","negExpanded","piecewise1","piecewise2","piecewise3","options","normalTrig","otherTrig","xvals","makeSquaredForLatex","trigFunction","substring","modifyToMakeRoot","getPolynomialFunction","root","toString","charAt","limitByFactoring","holeX","holeFactor","topFactor","bottomFactor","topValue","bottomValue","originalNumerator","denominator","originalDenominator","radical","modified","numeratorWithRoot","formatPolynomialToLatex","tempRadical","limitByTrigSpecialCases","numeratorDegree","multipliedAns","denDegree","same","obj","generateSpecialTrig","term","numeratorFunctions","denominatorFunctions","oldNumerator","oldDenominator","toMultiply","termToMultiply","coeff","j","exp","newNumerator","replace","bottomMultiply","limitByTrig","topVar","bottomVar","toExpand","latexNumerator","plus","latexDenominator","otherDenominator","nconstant","dconstant","first","nerdamerFormatToLatex","numeratorPrefix","limText","g02","g03","g04","g05","g06"],"sourceRoot":""}