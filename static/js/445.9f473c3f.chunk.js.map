{"version":3,"file":"static/js/445.9f473c3f.chunk.js","mappings":"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","sources":["topics/01-limits/14-limits-at-infinity-and-horizontal-asymptotes/generate-question.tsx"],"sourcesContent":["import { buildPolynomialFromCoeffs, formatPolynomialToLatex, getCoeffsOfPolynomial, getRandomNumber } from \"../../../helpers/functions\"\r\nimport { getPolynomialFunction } from \"../../../helpers/expression-generators\"\r\nimport React from \"react\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport * as math from \"mathjs\"\r\n\r\nconst generateAsymptoticFunction = () => {\r\n  // degree of top and bottom functions\r\n  const numDegree = getRandomNumber(1, 3)\r\n  const denDegree = getRandomNumber(1, 3)\r\n\r\n  // whether top/bottom will be sqrt\r\n  const topSqrt = Boolean(getRandomNumber(0, 1))\r\n  const bottomSqrt = Boolean(getRandomNumber(0, 1))\r\n\r\n  // leading coefficients of top and bottom\r\n  const topLC = getRandomNumber(2, 5)\r\n  const bottomLC = getRandomNumber(2, 5)\r\n\r\n  // get expressions for numerator and denominator\r\n  const numerator = getFunction(numDegree, topLC, topSqrt)\r\n  const withoutSqrtNum = topSqrt ? `|${topLC}x${numDegree > 1 ? `^${numDegree}` : ''}|` : numerator\r\n  const denominator = getFunction(denDegree, bottomLC, bottomSqrt)\r\n  const withoutSqrtDen = bottomSqrt ? `|${bottomLC}x${denDegree > 1 ? `^${denDegree}` : ''}|` : denominator\r\n\r\n  const approaches = Boolean(getRandomNumber(0, 1)) // false: approaches inf, true: approaches -inf\r\n  const limitText = `\\\\lim_{x \\\\to ${approaches ? `-` : ``}\\\\infty}`\r\n  const func = `${limitText} \\\\frac{${numerator}}{${denominator}}`\r\n\r\n  let ans: string\r\n  const topSign = topSqrt || numDegree % 2 === 0 || !approaches\r\n  const bottomSign = bottomSqrt || denDegree % 2 === 0 || !approaches\r\n  const overallSign = (topSign && bottomSign) || (!topSign && !bottomSign)\r\n  if (numDegree < denDegree) {\r\n    ans = \"0\"\r\n  } else {\r\n    ans = numDegree === denDegree ? math.simplify(`${topLC}/${bottomLC}`).toString() : `\\\\infty`\r\n    if (!overallSign) {\r\n      ans = `-${ans}`\r\n    }\r\n  }\r\n\r\n  const title = <></>\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Evaluate the limit.</h3>\r\n    <Latex expression={`${func} = `} display={true} />\r\n  </div>\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        In order to solve this, we need to find the horizontal asymptotes. Remember our 3 rules for that:\r\n      </div>\r\n      <ul className=\"text-start\">\r\n        <li>\r\n          If <Latex expression=\"n < d\" />, the horizontal asymptote is 0.\r\n        </li>\r\n        <li>\r\n          If <Latex expression=\"n = d\" />, the horizontal asymptote is the ratio of the leading coefficients.\r\n        </li>\r\n        <li>\r\n          If <Latex expression=\"n > d\" />, there is no horizontal asymptote.\r\n        </li>\r\n      </ul>\r\n    </>\r\n  ]\r\n\r\n  if (topSqrt || bottomSqrt) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Before we can do that, however, we need to get rid of the square roots. Remember, to simplify these, we want to focus on the highest degree term and take the root of that.\r\n        </div>\r\n        <div>\r\n          We also want to surround the result with an absolute value so we remember it is positive!\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Simplifying the square roots, you should get:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${limitText} \\\\frac{${numerator}}{${denominator}} \\\\approx ${limitText} \\\\frac{${withoutSqrtNum}}{${withoutSqrtDen}}`} display={true} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  if (numDegree < denDegree) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Since <Latex expression=\"n < d\" />, <Latex expression=\"f(x)\" /> has a horizontal asymptote of 0.\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans}\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    if (numDegree === denDegree) {\r\n      hints.push(\r\n        <>\r\n          <div>\r\n            In this case, since <Latex expression=\"n = d\" />, the horizontal asymptotes is the ratio of the leading coefficients.\r\n          </div>\r\n        </>\r\n      )\r\n    } else {\r\n      hints.push(\r\n        <>\r\n          <div>\r\n            Since <Latex expression=\"n > d\" />, there is no horizontal asymptote. However, we know the limit must be <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} />.\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n\r\n    if (topSqrt || bottomSqrt || numDegree > denDegree) {\r\n      hints.push(\r\n        <>\r\n          {numDegree > denDegree ? null :\r\n            <div>\r\n              Since there are absolute values, make sure you account for the sign of the answer.\r\n            </div>\r\n          }\r\n          <div>\r\n            Plugging in <Latex expression={`x = ${approaches ? '-' : ''}\\\\infty`} />, you should get a <strong>{topSign ? 'positive' : 'negative'}</strong> numerator and a <strong>{bottomSign ? 'positive' : 'negative'}</strong> denominator. This means the final answer should be <strong>{overallSign ? 'positive' : 'negative'}</strong>.\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans.includes('infty') ? <Latex expression={ans} /> : ans}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return { question, ans, type: 'math', title, hints, math_input_buttons: [\"infinity\"] }\r\n}\r\n\r\n/** Helper function to generate function for above problem */\r\nconst getFunction = (degree: number, leadingCoeff: number, sqrt: boolean) => {\r\n  let func = getPolynomialFunction(sqrt ? degree * 2 : degree, false, true)\r\n  const coeffs = getCoeffsOfPolynomial(func)\r\n  coeffs[coeffs.length - 1] = sqrt ? leadingCoeff ** 2 : leadingCoeff\r\n\r\n  // ensure max of 4 nonzero terms\r\n  // count num nonzeros\r\n  let numNonZeros = coeffs.filter(x => x !== 0).length\r\n  let zeros = numNonZeros - 4\r\n  for (let i = coeffs.length - 2; zeros > 0 && i >= 0; i--) {\r\n    if (coeffs[i] !== 0) {\r\n      coeffs[i] = 0\r\n      zeros--\r\n    }\r\n  }\r\n\r\n  func = buildPolynomialFromCoeffs(coeffs)\r\n  func = formatPolynomialToLatex(func)\r\n  return sqrt ? `\\\\sqrt{${func}}` : func\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  return generateAsymptoticFunction()\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["getFunction","degree","leadingCoeff","sqrt","func","getPolynomialFunction","coeffs","getCoeffsOfPolynomial","length","zeros","filter","x","i","buildPolynomialFromCoeffs","formatPolynomialToLatex","concat","generateRandomQuestion","generateAsymptoticFunction","numDegree","getRandomNumber","denDegree","topSqrt","Boolean","bottomSqrt","topLC","bottomLC","numerator","withoutSqrtNum","denominator","withoutSqrtDen","approaches","limitText","ans","topSign","bottomSign","overallSign","math","toString","title","_jsx","_Fragment","question","_jsxs","className","children","Latex","expression","display","hints","push","includes","type","math_input_buttons"],"sourceRoot":""}