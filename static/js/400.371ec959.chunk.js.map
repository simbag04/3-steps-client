{"version":3,"file":"static/js/400.371ec959.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/05-evaluating-limits-using-direct-substitution/generate-question.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string,\r\n  functions: PiecewiseFunction[],\r\n  display?: string | boolean,\r\n  classes?: string\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport * as math from \"mathjs\"\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\nimport React from \"react\";\r\nimport { PiecewiseFunction } from \"../../../types/PiecewiseFunction\";\r\nimport { Option } from \"../../../types/Option\";\r\nimport { Question } from \"../../../types/Question\";\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * generates random question with piecewise function, user is asked to find a limit using that function\r\n * @returns relevant question components\r\n */\r\nconst piecewiseToLimit = (): Question => {\r\n  const title = <></>\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const mathFs = []; // array of mathjs functions\r\n  const xValues = generateOrderedValues(2, true, -3, 2); // random xvalues\r\n  let yValues = [getRandomNumber(-7, 7), getRandomNumber(-7, 7)]; // random y values\r\n  let includes = getRandomNumber(0, 1); // whether current xval is included in domain\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1];\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      // random which xval functions are continuous at\r\n      const match = getRandomNumber(0, 1) ? i - 1 : i;\r\n      xVal = xValues[match];\r\n      yVal = yValues[match];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal,\r\n      getRandomNumber(0, 1) ? yVal : getRandomNumber(-7, 7));\r\n\r\n    // store function to evaluate f\r\n    const node = math.parse(f);\r\n    mathFs.push((x: number) => node.evaluate({ x }));\r\n\r\n    // format f\r\n    f = math.simplifyCore(f).toTex({ parenthesis: 'auto' }).replaceAll('\\\\cdot', \"\");\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const question = <>\r\n    <div className=\"flex vertical center\">\r\n      <h2>Evaluate the limit.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist.</div>\r\n    </div>\r\n    <Piecewise functions={functions} title={`f(x)`} />\r\n  </>\r\n\r\n  // find answer\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n  const x = xValues[getRandomNumber(0, xValues.length - 1)];\r\n  let ans: number | string;\r\n  for (let i = 0; i < xValues.length; i++) {\r\n    if (x === xValues[i]) {\r\n      let f1 = Math.round(mathFs[i](x));\r\n      let f2 = Math.round(mathFs[i + 1](x));\r\n      if (sign === 0) {\r\n        ans = f1;\r\n      } else if (sign === 1) {\r\n        ans = f2;\r\n      } else {\r\n        ans = f1 === f2 ? f1 : 'dne'\r\n      }\r\n    }\r\n  }\r\n\r\n  // other relevant components\r\n  const signText = sign === 0 ? `^{\\\\footnotesize\\\\texttt{-}}` : sign === 1 ? `^{\\\\footnotesize\\\\texttt{+}}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>\r\n        {question}\r\n      </div>\r\n      <div>\r\n        {nextToInput} ?\r\n      </div>\r\n      <div>\r\n        Focus on the functions around <Latex expression={`x = ${x}`} />.\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Which side(s) are we evaluating the limit from? Based on that, which function(s) should we use to find the limit?\r\n    </div>\r\n  ]\r\n\r\n  return { title, question, ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random absolute value quadratic and user is asked to select which piecewise function corresponds to it.\r\n * @returns relevant question components\r\n */\r\nconst absValueToPiecewise = (): Question => {\r\n  const title = <></>\r\n\r\n  // get two factors\r\n  const x1 = getRandomNumber(-7, 7)\r\n  const xvalues = [x1, getRandomWithExclusions(-7, 7, [x1])]\r\n  xvalues.sort((a, b) => a - b)\r\n\r\n  const f1 = getStringFactorFromXval(xvalues[0])\r\n  const f2 = getStringFactorFromXval(xvalues[1])\r\n  const neg = getRandomNumber(0, 1); // whether provided function is negative or positive\r\n\r\n  // get normal expanded version and negative expanded version\r\n  let expanded = sortPolynomialByDegree(nerdamer(`${f1}${f2}`).expand());\r\n  expanded = nerdamer(expanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  let negExpanded = sortPolynomialByDegree(nerdamer(`-${f1}${f2}`).expand());\r\n  negExpanded = nerdamer(negExpanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  const question = <>\r\n    <h3>Select the piecewise function corresponding to this absolute value function: </h3>\r\n    <Latex expression={`g(x) = |${neg ? negExpanded : expanded}|`} classes={'large-font'} />\r\n  </>\r\n\r\n  // function arrays for each option\r\n  const piecewise1: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise2: PiecewiseFunction[] = [\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise3: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq 0`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x > 0`\r\n    }\r\n  ]\r\n\r\n  // create options array\r\n  const options: Option[] = [\r\n    {\r\n      component: <Piecewise functions={piecewise1} title={`g(x)`} />,\r\n      correct: true\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise2} title={`g(x)`} />,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise3} title={`g(x)`} />,\r\n      correct: false\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>\r\n        Remember we need to find where the function inside the absolute value is <Latex expression={`>`} /> or <Latex expression={`<`} /> 0. How can we do that with a quadratic?\r\n      </div>\r\n      <Latex expression={`g(x) = |${neg ? negExpanded : expanded}|`} classes={'large-font'} />\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Once you've found when the function is <Latex expression={`>`} /> or <Latex expression={`<`} /> 0, how can we structure that in the piecewise format?\r\n      </div>\r\n      <div>\r\n        Remember we need to make the whole function negative for points where the function is <Latex expression={`<`} /> 0.\r\n      </div>\r\n    </>\r\n\r\n  ]\r\n\r\n  return { title, question, type: 'mc', input: shuffleArray(options), hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 6) {\r\n    q = piecewiseToLimit();\r\n  } else {\r\n    q = absValueToPiecewise()\r\n  }\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion;"],"names":["Piecewise","_ref","title","functions","display","classes","_useState","useState","_useState2","_slicedToArray","expression","setExpression","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","nerdamer","require","getRandomNumber","mathFs","xValues","generateOrderedValues","yValues","includes","_loop","xVal","yVal","match","degree","Math","abs","getPolynomialFunctionWithPoint","node","math","push","x","evaluate","toTex","parenthesis","replaceAll","ans","question","_jsxs","className","sign","f1","round","f2","signText","nextToInput","inline","type","hints","piecewiseToLimit","x1","xvalues","getRandomWithExclusions","sort","a","b","getStringFactorFromXval","neg","expanded","sortPolynomialByDegree","expand","toTeX","negExpanded","piecewise1","piecewise2","piecewise3","options","component","correct","input","shuffleArray","absValueToPiecewise"],"sourceRoot":""}