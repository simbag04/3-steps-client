{"version":3,"file":"static/js/104.e564a99f.chunk.js","mappings":"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","sources":["helpers/constants.ts","helpers/functions.ts","topics/01-limits/13-infinite-limits-and-vertical-asymptotes/generate-question.tsx"],"sourcesContent":["const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\nconst LEFT_LIMIT = `^{\\\\footnotesize\\\\texttt{-}}`\r\nconst RIGHT_LIMIT = `^{\\\\footnotesize\\\\texttt{+}}`\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS, LEFT_LIMIT, RIGHT_LIMIT }","import * as math from \"mathjs\"\r\nimport { FunctionValue } from \"../@types/FunctionValue\";\r\nimport { TableValue } from \"../@types/TableValue\";\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * Shuffles an array\r\n * @param {array} array array to be shuffled\r\n * @returns shuffled array\r\n */\r\nconst shuffleArray = (array: Array<any>): Array<any> => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1)); // Generate a random index from 0 to i\r\n\r\n    // Swap elements at i and j\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * generates a random number\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @returns random number in the range [min, max]\r\n */\r\nconst getRandomNumber = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * generates a random number with exclusions\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @param {array} exclusions numbers to be excluded from generation\r\n * @returns random number in the range [min, max] excluding exclusions\r\n */\r\nconst getRandomWithExclusions =\r\n  (min: number, max: number, exclusions: Array<number>): number => {\r\n    const validValues = [];\r\n    for (let i = min; i <= max; i++) {\r\n      if (!exclusions.includes(i)) {\r\n        validValues.push(i);\r\n      }\r\n    }\r\n\r\n    if (validValues.length === 0) {\r\n      return max;\r\n    }\r\n\r\n    const randomIndex = getRandomNumber(0, validValues.length - 1);\r\n    return validValues[randomIndex];\r\n  }\r\n\r\n/**\r\n * @param {Number} n number of values to generate\r\n * @param {boolean} increasing true if values should be increasing, false if decreasing\r\n * @returns array of n ordered numbers \r\n */\r\nconst generateOrderedValues =\r\n  (n: number, increasing: boolean, extreme: number = 10,\r\n    increment: number = 4): Array<number> => {\r\n    if (n <= 0) {\r\n      return [];\r\n    }\r\n\r\n    const values = [Math.floor(Math.random() * extreme) + 1]; // Initialize with a random value\r\n\r\n    while (values.length < n) {\r\n      // generate a value greater than the last one\r\n      const nextDiff = getRandomNumber(1, increment) * (increasing ? 1 : -1);\r\n      const nextValue = values[values.length - 1] + nextDiff;\r\n      values.push(nextValue);\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n/**\r\n * \r\n * @param {String} polynomial string with a polynomial\r\n * @returns polynomial sorted in order of degree\r\n */\r\nconst sortPolynomialByDegree = (polynomial: string): string => {\r\n  // get coefficients with nerdamer\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  let ans = \"\";\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(nerdamer(e).toString());\r\n  })\r\n\r\n  // build expression\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Returns polynomial expression given coefficients of polynomial\r\n * @param coeffs to use in building polynomial\r\n * @returns expression\r\n */\r\nconst buildPolynomialFromCoeffs = (coeffs: any[]): string => {\r\n  for (let i = 0; i < coeffs.length; i++) {\r\n    coeffs[i] = String(coeffs[i])\r\n  }\r\n\r\n  let ans = ''\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number.isNaN(Number(coeffs[i])) || Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Extracts coefficients of polynomial in increasing order of degree\r\n * @param polynomial string with polynomial expression\r\n * @returns Coefficients of polynomial in increasing order of degree\r\n */\r\nconst getCoeffsOfPolynomial = (polynomial: string): number[] => {\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(Number(nerdamer(e).toString()));\r\n  })\r\n\r\n  return coeffs\r\n}\r\n\r\n/**\r\n * Finds roots of given polynomial expression (works only with polynomials of degree 2)\r\n * @param polynomial string wth polynomial expression to find roots\r\n * @returns vector of roots of polynomial as decimals\r\n * if there is only 1 root, it will return a vector of length 2 with both values the same root\r\n */\r\nconst getRootsOfPolynomial = (polynomial: string): string[] => {\r\n  const roots = nerdamer(`roots(${polynomial})`)\r\n  const elements = roots.symbol.elements\r\n  const r1 = convertToDecimal(elements[0].toString())\r\n  const r2 = elements[1] === undefined ? r1 : convertToDecimal(elements[1].toString())\r\n  return [r1, r2]\r\n}\r\n\r\n/**\r\n * converts provided number (potentially a fraction) to a decimal\r\n * @param number string of number to convert to decimal\r\n * @returns decimal equivalent of number\r\n */\r\nconst convertToDecimal = (number: string): string => {\r\n  return nerdamer(number).text(`decimals`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} xval xvalue from which to create factor\r\n * @returns String in form (x - p), where p is the xval\r\n */\r\nconst getStringFactorFromXval = (xval: number): string => {\r\n  if (xval < 0) {\r\n    return `(x + ${Math.abs(xval)})`\r\n  } else if (xval > 0) {\r\n    return `(x - ${xval})`\r\n  } else {\r\n    return `(x)`\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array where each element is in the form {f: String, value: Number}\r\n * @returns object with keys as all the f Strings, values as the value of that String\r\n */\r\nconst convertArrayToObject = (array: Array<FunctionValue>): FunctionValue => {\r\n  const obj = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    const currentObj = array[i];\r\n    if (currentObj.hasOwnProperty('f')) {\r\n      const key = currentObj['f'];\r\n      obj[key] = currentObj['value'];\r\n    }\r\n  }\r\n  return obj as FunctionValue;\r\n}\r\n\r\n/**\r\n * @param {Number} a \r\n * @param {Number} b \r\n * @returns least common multiple of a and b\r\n */\r\nconst findLCM = (a: number, b: number): number => {\r\n  // Calculate the greatest common divisor (GCD) using Euclidean algorithm\r\n  function findGCD(x, y) {\r\n    if (y === 0) {\r\n      return x;\r\n    }\r\n    return findGCD(y, x % y);\r\n  }\r\n\r\n  // LCM is the product of the two numbers divided by their GCD\r\n  return (a * b) / findGCD(a, b);\r\n}\r\n\r\n/**\r\n * @param {Number} xVal at which table will \"zoom in\"\r\n * @param {Array} values to use as yvalues in table\r\n * @param {Number} start of xs in table\r\n * @param {Number} end of xs in table\r\n * @returns data array containing x, y pairs for points that could be used in a limit table\r\n */\r\nconst generateLimitTableData =\r\n  (xVal: number, values: Array<number>, start: number, end: number): { data: TableValue[] } => {\r\n    const increasing = values[1] - values[0] >= 0;\r\n    const data: TableValue[] = [];\r\n    // build table data\r\n    for (let i = start; i <= end; i++) {\r\n      const val = values[i - start];\r\n\r\n      // zooming in to the left of xVal\r\n      if (i === xVal && xVal !== start) {\r\n        data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n        data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n        data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n      }\r\n\r\n      data.push({ x: i, y: val });  // other xvalues\r\n\r\n      // zooming in to the right of xval\r\n      if (i === xVal && xVal !== end) {\r\n        data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n        data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n        data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n      }\r\n    }\r\n\r\n    return { data }\r\n  }\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with mathjs\r\n */\r\nconst formatPolynomialToLatex = (polynomial: string): string => {\r\n  const str: String = math.simplifyCore(polynomial).toTex()\r\n  return str.replaceAll('\\\\cdot', '').replaceAll('~', '');\r\n}\r\n\r\n/**\r\n * @param {String} expression to format\r\n * @returns formatted latex polynomial formatted with nerdamer\r\n */\r\nconst nerdamerFormatToLatex = (expression: string): string => {\r\n  return nerdamer(expression).toTeX().replaceAll('\\\\cdot', '').replaceAll('~', '')\r\n}\r\n\r\nexport { getRandomNumber, getRandomWithExclusions, generateOrderedValues, shuffleArray, sortPolynomialByDegree, getStringFactorFromXval, convertArrayToObject, findLCM, generateLimitTableData, formatPolynomialToLatex, nerdamerFormatToLatex, getCoeffsOfPolynomial, getRootsOfPolynomial, convertToDecimal, buildPolynomialFromCoeffs }","import Latex from \"../../../components/latex/Latex\"\r\nimport { getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, sortPolynomialByDegree } from \"../../../helpers/functions\"\r\nimport React from \"react\"\r\nimport * as math from \"mathjs\"\r\nimport { Option } from \"../../../@types/Option\"\r\nimport { LEFT_LIMIT, RIGHT_LIMIT } from \"../../../helpers/constants\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst asymptoticLimitQuestion = () => {\r\n  const bottomFactors = getRandomNumber(1, 2)\r\n  const topFactors = getRandomNumber(1, 2)\r\n  const bottomXs = []\r\n  const topXs = []\r\n  let denominator = \"\"\r\n  let numerator = \"\"\r\n\r\n  // get x values for denominator\r\n  for (let i = 0; i < bottomFactors; i++) {\r\n    const num = getRandomNumber(-7, 7)\r\n    bottomXs.push(num)\r\n    denominator += getStringFactorFromXval(num)\r\n  }\r\n\r\n  bottomXs.sort((a, b) => a - b);\r\n  const xIndex = getRandomNumber(0, bottomXs.length - 1)\r\n  const x = bottomXs[xIndex] // x to ask about\r\n\r\n  // get x values for denominator\r\n  // exclude asymptotic x to ask about so factors can't cancel\r\n  for (let i = 0; i < topFactors; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [x])\r\n    topXs.push(num)\r\n    numerator += getStringFactorFromXval(num)\r\n  }\r\n\r\n  // add coeffs to top and bottom\r\n  const top = Boolean(getRandomNumber(0, 1)) // false: top coeff negative, true: positive\r\n  const bottom = Boolean(getRandomNumber(0, 1)) // false: bottom coeff negative, true: positive\r\n  const topCoeff = top ? getRandomNumber(1, 7) : getRandomNumber(-7, -1)\r\n  const bottomCoeff = bottom ? getRandomNumber(1, 7) : getRandomNumber(-7, -1)\r\n  const factoredTop = `${topCoeff}${numerator}`\r\n  const factoredBottom = `${bottomCoeff}${denominator}`\r\n\r\n  // create numerator/denominator\r\n  numerator = sortPolynomialByDegree(nerdamer(`${factoredTop}`).expand())\r\n  denominator = sortPolynomialByDegree(nerdamer(`${factoredBottom}`).expand())\r\n\r\n  const expression = `f(x) = \\\\frac{${numerator}}{${denominator}}`\r\n  const leftLimit = `\\\\lim_{x \\\\to ${x}${LEFT_LIMIT}} f(x)`\r\n  const rightLimit = `\\\\lim_{x \\\\to ${x}${RIGHT_LIMIT}} f(x)`\r\n\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>Which of the following statements is true about <Latex expression=\"f(x)\" />?</h3>\r\n    <Latex expression={expression} display={true} />\r\n  </>\r\n\r\n  const leftNum = Number(math.evaluate(numerator, { x: x - 0.1 }).toString())\r\n  const leftDen = Number(math.evaluate(denominator, { x: x - 0.1 }).toString())\r\n  const rightNum = Number(math.evaluate(numerator, { x: x + 0.1 }).toString())\r\n  const rightDen = Number(math.evaluate(denominator, { x: x + 0.1 }).toString())\r\n  const leftAns = leftNum * leftDen\r\n  const rightAns = rightNum * rightDen\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = \\\\infty`} /> and <Latex expression={`${rightLimit} = \\\\infty`} />\r\n      </>,\r\n      correct: leftAns > 0 && rightAns > 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = \\\\infty`} /> and <Latex expression={`${rightLimit} = -\\\\infty`} />\r\n      </>,\r\n      correct: leftAns > 0 && rightAns < 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = -\\\\infty`} /> and <Latex expression={`${rightLimit} = \\\\infty`} />\r\n      </>,\r\n      correct: leftAns < 0 && rightAns > 0\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`${leftLimit} = -\\\\infty`} /> and <Latex expression={`${rightLimit} = -\\\\infty`} />\r\n      </>,\r\n      correct: leftAns < 0 && rightAns < 0\r\n    }\r\n  ]\r\n\r\n  const correctAns = options.filter((opt) => opt.correct)\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Plugging in <Latex expression={`x = ${x}`} />, you should get a denominator of 0, which means there's an asymptote at <Latex expression={`x = ${x}`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Since there's an asymptote, the limits must be either <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} />.\r\n      </div>\r\n      <div>\r\n        The first step to figuring out whether it's <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} /> is to factor <Latex expression=\"f(x)\" />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        This should give you:\r\n      </div>\r\n      <Latex expression={`f(x) = \\\\frac{${factoredTop}}{${factoredBottom}}`} display={true} />\r\n      <div>\r\n        Now, remember that \"as <Latex expression=\"x\" /> approaches {x} from the left\" is another way of saying <Latex expression=\"x\" /> is extremely close to {x} on the left side. You could use <Latex expression={`${x - 0.1}`} /> to represent this.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Using this <Latex expression=\"x\" /> value, plug this into the factored <Latex expression=\"f(x)\" /> equation.\r\n      </div>\r\n      <div>\r\n        This should give you a <strong>{leftNum > 0 ? \"positive\" : \"negative\"}</strong> numerator and a <strong>{leftDen > 0 ? \"positive\" : \"negative\"}</strong> denominator.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        This means the left-sided limit must be <strong>{leftAns > 0 ? \"positive\" : \"negative\"}</strong>. Thus,\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${leftLimit} = ${leftAns > 0 ? '' : '-'}\\\\infty`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Now, repeat this process with <Latex expression={`${x + 0.1}`} /> for the right-sided limit.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        You should get a <strong>{rightNum > 0 ? \"positive\" : \"negative\"}</strong> numerator and a <strong>{rightDen > 0 ? \"positive\" : \"negative\"}</strong> denominator.\r\n      </div>\r\n      <div>\r\n        This means the right-sided limit must be <strong>{rightAns > 0 ? \"positive\" : \"negative\"}</strong>. Thus,\r\n      </div>\r\n      <div>\r\n        <Latex expression={`${rightLimit} = ${rightAns > 0 ? '' : '-'}\\\\infty`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Thus, the correct answer is: \r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {correctAns[0].component}\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { type: 'mc', title, question, input: options, hints }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  return asymptoticLimitQuestion()\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","LEFT_LIMIT","RIGHT_LIMIT","nerdamer","require","shuffleArray","array","i","length","j","Math","floor","random","getRandomNumber","min","max","getRandomWithExclusions","exclusions","validValues","includes","push","generateOrderedValues","n","increasing","extreme","arguments","undefined","increment","values","nextDiff","nextValue","sortPolynomialByDegree","polynomial","coefficients","coeffs","ans","each","e","toString","Number","concat","buildPolynomialFromCoeffs","String","isNaN","getCoeffsOfPolynomial","getRootsOfPolynomial","elements","symbol","r1","convertToDecimal","number","text","getStringFactorFromXval","xval","abs","convertArrayToObject","obj","currentObj","hasOwnProperty","findLCM","a","b","findGCD","x","y","generateLimitTableData","xVal","start","end","data","val","formatPolynomialToLatex","math","toTex","replaceAll","nerdamerFormatToLatex","expression","toTeX","generateRandomQuestion","asymptoticLimitQuestion","bottomFactors","topFactors","bottomXs","topXs","denominator","numerator","num","sort","top","Boolean","bottom","topCoeff","bottomCoeff","factoredTop","factoredBottom","expand","leftLimit","rightLimit","title","_jsx","_Fragment","question","_jsxs","children","Latex","display","leftNum","leftDen","rightNum","rightDen","leftAns","rightAns","options","component","correct","correctAns","filter","opt","type","input","hints","className"],"sourceRoot":""}