{"version":3,"file":"static/js/269.d8b47fe8.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","components/content-components/graphs/FunctionGraph.tsx","components/latex/Latex.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/09-exploring-types-of-discontinuities/Sections.tsx","topics/01-limits/09-exploring-types-of-discontinuities/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[],\r\n  size: number,\r\n  minx?: number,\r\n  maxx?: number,\r\n  miny?: number,\r\n  maxy?: number,\r\n  points?: GraphPoint[]\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Latex component that uses katex to render math in latex font\r\n * Parameters: \r\n *  - classes: custom classes to be added to returned html\r\n *  - expression: math to be rendered as latex\r\n *  - inline: boolean value indicating whether latex should be rendered inline or block mode\r\n */\r\n\r\nimport 'katex/dist/katex.min.css';  // Import KaTeX styles\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\nimport React from 'react';\r\n\r\ninterface LatexProps {\r\n  classes? : string,\r\n  expression: string,\r\n  display?: string | boolean,\r\n  inline?: any\r\n}\r\nconst Latex: React.FC<LatexProps> = ({classes, expression, display}) => {\r\n  return (\r\n    <span className={classes}>\r\n      {!display ? \r\n      <InlineMath math={expression} /> :\r\n      <BlockMath math={expression} /> }\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Latex","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport * as math from \"mathjs\"\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\n\r\nconst f1 = math.parse(\"x^2\")\r\nconst f2 = math.parse(\"x\")\r\nconst f3 = math.parse(\"-1/(x - 1) + 1\")\r\nconst f4 = math.parse(\"x + 2\")\r\n\r\nconst removableFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c1\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c1\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst removablePoints: GraphPoint[] = [\r\n  {\r\n    x: 2,\r\n    y: 1,\r\n    classes: \"c1\"\r\n  }\r\n]\r\n\r\nconst jumpFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c2\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f2.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c2\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst asymptoticFunctions = [\r\n  {\r\n    f: (x: number) => f3.evaluate({ x }),\r\n    min: -11,\r\n    max: 1,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c3',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  },\r\n  {\r\n    f: (x: number) => f3.evaluate({ x }),\r\n    min: 1,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c3',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  }\r\n]\r\n\r\nconst continuousFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c4\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f4.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c4\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    Now that we are comfortable evaluating limits, we can discuss what it means for a graph to be <strong>continuous</strong>.\r\n  </div>\r\n  <div>\r\n    In order to better understand continuous graphs, let's first explore some discontinuous graphs.\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    Let's consider this graph that has a <strong>removable</strong> discontinuity:\r\n  </div>\r\n  <div className=\"flex vertical center small-gap\">\r\n    <h3>Graph with Removable Discontinuity </h3>\r\n    <FunctionGraph functions={removableFunctions} size={GRAPH_SIZE} points={removablePoints} ></FunctionGraph>\r\n  </div>\r\n\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    We call this discontinuity removable because we just need to fix the value of the function at <Latex expression=\"x = 2\" /> to make the function continuous again.\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    Let's look at another type of discontinuity: a <strong>jump</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center small-gap\">\r\n    <h3>Graph with Jump Discontinuity </h3>\r\n    <FunctionGraph functions={jumpFunctions} size={GRAPH_SIZE}></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    This is a jump discontinuity as there is a jump between two sections of the graph, causing the graph to be discontinuous.\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Lastly, let's look at a graph with an <strong>infinite</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center small-gap\">\r\n    <h3>Graph with Infinite Discontinuity </h3>\r\n    <AsymptoticGraph functions={asymptoticFunctions} size={GRAPH_SIZE} x={[1]} y={[1]}></AsymptoticGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    This is an infinite discontinuity as the graph seems to be going to <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} /> at <Latex expression=\"x = 1\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    If a graph doesn't fall into one of these categories, it is continuous. Now that we've looked at so many discontinuous graphs, let's look at a continuous one too:\r\n  </div>\r\n  <div className=\"flex vertical center small-gap\">\r\n    <h3>Continuous Graph</h3>\r\n    <FunctionGraph functions={continuousFunctions} size={GRAPH_SIZE}></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    This graph is continuous even though it is a piecewise graph, because there are no removable, jump, or infinite discontinuities.\r\n  </div>\r\n  <div>\r\n    We will explore how to more formally define continuity in the next section!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 }","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\";\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9\r\n\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","classes","expression","display","className","children","BlockMath","math","InlineMath","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","f","min","max","dataGap","arguments","undefined","data","push","createFunctionGraph","color","leftArrow","rightArrow","type","filter","Math","findIntersections","unshift","name","concat","uuidv4","createArrowMarker","id","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","f2","f3","f4","removableFunctions","evaluate","jumpFunctions","asymptoticFunctions","continuousFunctions","_jsxs","_Fragment","FunctionGraph","Latex","AsymptoticGraph"],"sourceRoot":""}