{"version":3,"file":"static/js/561.a618824e.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/15-the-intermediate-value-theorem-(ivt)/generate-question.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string,\r\n  functions: PiecewiseFunction[],\r\n  display?: string | boolean,\r\n  classes?: string\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, shuffleArray } from \"../../../helpers/functions\"\r\nimport { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\"\r\nimport { Option } from \"../../../types/Option\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport React from \"react\"\r\nimport { PiecewiseFunction } from \"../../../types/PiecewiseFunction\"\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\nimport * as math from \"mathjs\"\r\n\r\nconst applyIVT = () => {\r\n  const x1 = getRandomNumber(-8, 3)\r\n  const x2 = getRandomNumber(x1 + 1, 8)\r\n  const y1 = getRandomNumber(-7, 7)\r\n  const y2 = getRandomWithExclusions(-7, 7, [y1 - 1, y1, y1 + 1])\r\n\r\n  const withinYVal = getRandomNumber(Math.min(y1, y2) + 1, Math.max(y1, y2) - 1)\r\n  const outsideYVal = Boolean(getRandomNumber(0, 1)) ?\r\n    getRandomNumber(-10, Math.min(y1, y2) - 1) :\r\n    getRandomNumber(Math.max(y1, y2) + 1, 10)\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${withinYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </>,\r\n      correct: true\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${withinYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${Math.min(y1, y2)}, ${Math.max(y1, y2)}]`} />.\r\n      </>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${outsideYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${outsideYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${Math.min(y1, y2)}, ${Math.max(y1, y2)}]`} />.\r\n      </>,\r\n      correct: false\r\n    }\r\n  ]\r\n\r\n  const title = <></>\r\n  const question = <>\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        Let <Latex expression=\"f(x)\" /> be a continuous function over all real numbers.\r\n      </div>\r\n      <div>\r\n        Suppose that <Latex expression={`f(${x1}) = ${y1}`} /> and <Latex expression={`f(${x2}) = ${y2}`} />.\r\n      </div>\r\n      <strong>Which of the following is guaranteed by the IVT?</strong>\r\n    </div>\r\n  </>\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        The IVT guarantees that for any <Latex expression=\"L\" /> between <Latex expression=\"f(a)\" /> and <Latex expression=\"f(b)\" />, there exists a number <Latex expression=\"c\" /> in <Latex expression=\"[a, b]\" /> for which <Latex expression=\"f(c) = L\" />.\r\n      </div>\r\n    </>,\r\n    <div>\r\n      Thus, the <Latex expression=\"c\" /> value should be in between the <Latex expression=\"x\" /> values and the <Latex expression=\"L\" /> value should be in between the <Latex expression=\"y\" /> values. \r\n    </div>,\r\n    <div>\r\n      Match these up in the options to find the correct answer!\r\n    </div>\r\n  ]\r\n\r\n  return { type: 'mc', input: shuffleArray(options), title, question, hints }\r\n}\r\n\r\nconst checkIfIVTApplies = () => {\r\n  const continuityCheck = getRandomNumber(0, 2) // 0: check left, 1: check middle, 2: check right\r\n  const isContinuous = Boolean(getRandomNumber(0, 1)) // whether function will be contiuous\r\n  let x1 = getRandomNumber(-8, 3)\r\n  let x2 = getRandomNumber(x1 + 2, 8)\r\n  const midX = getRandomNumber(x1 + 1, x2 - 1) // find x in the middle to potentially ask about\r\n\r\n  // determine ys based on whether function is continuous\r\n  const y1 = getRandomNumber(-7, 7)\r\n  const y2 = isContinuous ? y1 : getRandomWithExclusions(-7, 7, [y1 - 1, y1, y1 + 1])\r\n\r\n  // generate functions \r\n  const xToGenerate = continuityCheck === 0 ? x1 : continuityCheck === 1 ? midX : x2\r\n  const f1 = getPolynomialFunctionWithPoint(getRandomNumber(1, 2), xToGenerate, y1)\r\n  const f2 = getPolynomialFunctionWithPoint(getRandomNumber(1, 2), xToGenerate, y2)\r\n\r\n  // get y values at interval endpoints\r\n  let intervalY1 = Math.round(Number(math.evaluate(f1, { x: x1 }).toString()))\r\n  let intervalY2 = Math.round(Number(math.evaluate(f2, { x: x2 }).toString()))\r\n\r\n  // ensure that intervalY1 and intervalY2 are far enough apart that there can be a value in between them to ask about\r\n  while (Math.abs(intervalY1 - intervalY2) < 2) {\r\n    if (xToGenerate === x1) {\r\n      x2 = x2 + 1\r\n      intervalY2 = Math.round(Number(math.evaluate(f2, { x: x2 }).toString()))\r\n    } else {\r\n      x1 -= 1\r\n      intervalY1 = Math.round(Number(math.evaluate(f1, { x: x1 }).toString()))\r\n    }\r\n  }\r\n\r\n  // get yval within and outside f(x1) and f(x2)\r\n  const withinYVal = getRandomNumber(Math.min(intervalY1, intervalY2) + 1, Math.max(intervalY1, intervalY2) - 1)\r\n  const outsideYVal = Boolean(getRandomNumber(0, 1)) ?\r\n    getRandomNumber(-10, Math.min(intervalY1, intervalY2) - 1) :\r\n    getRandomNumber(Math.max(intervalY1, intervalY2) + 1, 10)\r\n\r\n  const yToAsk = Boolean(getRandomNumber(0, 1)) ? withinYVal : outsideYVal // which y to use\r\n  const piecewiseFunctions: PiecewiseFunction[] = [\r\n    {\r\n      f: formatPolynomialToLatex(f1),\r\n      domain: continuityCheck === 0 ? `x \\\\leq ${xToGenerate}` : `x < ${xToGenerate}`\r\n    },\r\n    {\r\n      f: formatPolynomialToLatex(f2),\r\n      domain: continuityCheck === 2 ? `x \\\\geq ${xToGenerate}` : `x > ${xToGenerate}`\r\n    }\r\n  ]\r\n\r\n  // all other question components\r\n  const title = <></>\r\n  const question = <>\r\n    Consider:\r\n    <Piecewise title=\"f(x)\" functions={piecewiseFunctions} />\r\n    <strong>\r\n      Does the IVT guarantee a <Latex expression=\"c\" /> on <Latex expression={`[${x1}, ${x2}]`} /> such that <Latex expression={`f(c) = ${yToAsk}`} />?\r\n    </strong>\r\n  </>\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} /> and <Latex expression={`${yToAsk}`} /> is in between <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>,\r\n      correct: isContinuous && yToAsk === withinYVal\r\n    },\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </div>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} />, but <Latex expression={`${yToAsk}`} /> is not in between <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>,\r\n      correct: isContinuous && yToAsk === outsideYVal\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression=\"f(x)\" /> is not continuous on <Latex expression={`[${x1}, ${x2}]`} />, so IVT does not apply.\r\n      </div>,\r\n      correct: !isContinuous\r\n    },\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        In order to apply the IVT, first we need to confirm that <Latex expression=\"f(x)\" /> is continuous over the interval <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewiseFunctions} display={true} />\r\n    </div>,\r\n    <div>\r\n      Remember, in order to confirm continuity over this interval, we need to check 3 things:\r\n      <ul className=\"text-start\">\r\n        <li>\r\n          <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`(${x1}, ${x2})`} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x1}^{\\\\footnotesize\\\\texttt{+}}} = f(${x1})`} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x2}^{\\\\footnotesize\\\\texttt{-}}} = f(${x2})`} />\r\n        </li>\r\n      </ul>\r\n    </div>,\r\n    <>\r\n      <div>\r\n        If you were not able to verify continuity, then IVT cannot be applied.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        However, if you were able to verify continuity, you can check the <Latex expression=\"y\" /> values for which IVT applies. Do this by finding <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>\r\n      <div>\r\n        If the <Latex expression=\"y\" /> value is in between these 2 values, we know IVT can be applied. Otherwise, it cannot be.\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { title, type: 'mc', question, input: shuffleArray(options), hints }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  const rand = getRandomNumber(0, 9)\r\n  if (rand <= 4) {\r\n    return checkIfIVTApplies()\r\n  } else {\r\n    return applyIVT()\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","_useState","useState","_useState2","_slicedToArray","expression","setExpression","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","getRandomNumber","continuityCheck","isContinuous","Boolean","x1","x2","midX","y1","y2","getRandomWithExclusions","xToGenerate","f1","getPolynomialFunctionWithPoint","f2","intervalY1","Math","round","Number","math","x","toString","intervalY2","abs","withinYVal","min","max","outsideYVal","yToAsk","piecewiseFunctions","formatPolynomialToLatex","question","_jsxs","options","component","correct","hints","className","type","input","shuffleArray","checkIfIVTApplies","applyIVT"],"sourceRoot":""}