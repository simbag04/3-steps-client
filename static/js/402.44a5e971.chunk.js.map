{"version":3,"file":"static/js/402.44a5e971.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","components/content-components/tables/FunctionTable.tsx","topics/01-limits/04-evaluating-limits-using-algebraic-properties/LimitPropertyRules.tsx","topics/01-limits/04-evaluating-limits-using-algebraic-properties/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\nimport React from \"react\";\r\nimport { TableValue } from \"../../../@types/TableValue\";\r\n\r\ninterface FunctionTableProps {\r\n  xTitle: string, // title of x values\r\n  yTitle: string, // title of y values\r\n  data: TableValue[] // data to put in table\r\n}\r\n\r\nexport const FunctionTable: React.FC<FunctionTableProps> = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","/**\r\n * List of all properties of limits\r\n */\r\n\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport React from \"react\"\r\n\r\nexport const LimitPropertyRules = () => {\r\n  return (\r\n    <div className=\"important\">\r\n      <h3>Rules</h3>\r\n      <ol className=\"text-start display\">\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[c f(x)] = c \\\\cdot {\\\\lim}_{x \\\\to a} f(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\pm g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\pm {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\cdot g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\cdot {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\frac{f(x)}{g(x)}\\\\right] = \\\\frac{{\\\\lim}_{x \\\\to a} f(x)}{{\\\\lim}_{x \\\\to a} g(x)}, \\\\text{given } {{\\\\lim}_{x \\\\to a} g(x)} \\\\neq 0`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x)]^n = \\\\left[{\\\\lim}_{x \\\\to a} f(x)\\\\right]^n`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\sqrt[n]{f(x)}\\\\right] = \\\\sqrt[n]{{\\\\lim}_{x \\\\to a} f(x)}`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a} c = c`} display={true} />\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  )\r\n}","import { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { generateLimitPropertyTerm, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { convertArrayToObject, generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from \"mathjs\"\r\nimport { GRAPH_SIZE, COLORS } from \"../../../helpers/constants\";\r\nimport { LimitPropertyRules } from \"./LimitPropertyRules\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { FunctionValue } from \"../../../@types/FunctionValue\";\r\n\r\n/**\r\n * generates random question that presents a table and a graph from which some limits can be evaluated, then generates expression with limit properties and asks user to solve\r\n */\r\nconst limitPropertyQuestion = (): Question => {\r\n  const functions: FunctionValue[] = []; // functions in expression, ex: {f: f(x), value: 2}\r\n  const xVal = getRandomWithExclusions(-9, 9, [-1, 0, 1]); // where to eval limit\r\n\r\n  // generate table\r\n  const tableValues = generateOrderedValues(5, Boolean(getRandomNumber(0, 1))); // values in table\r\n  const { data } = generateLimitTableData(xVal, tableValues, xVal - 2, xVal + 2);\r\n  const table = <FunctionTable xTitle={'x'} yTitle={'f(x)'} data={data} />\r\n\r\n  // generate graph with point at xVal\r\n  const graphFunction =\r\n    generateRandomPolynomialWithPoint(3, xVal, getRandomWithExclusions(-7, 7, [-1, 0, 1]));\r\n\r\n  // function to graph\r\n  let f: GraphFunction[] = [{\r\n    f: (x: number) => graphFunction.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // create graph\r\n  const graph = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={f} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {table}\r\n    {graph}\r\n  </div>\r\n\r\n  // populate functions array\r\n  functions.push({ f: 'x', value: tableValues[2] });\r\n  functions.push({ f: 'y', value: Math.round(graphFunction.evaluate({ x: xVal })) });\r\n\r\n  // get expression and answer\r\n  let expression = generateLimitPropertyTerm(functions, ['^', '+', '-', '*', '/']);\r\n  const ans = String(Math.round(math.evaluate(expression, convertArrayToObject(functions))));\r\n\r\n  // format expression\r\n  expression = math.simplifyCore(expression).toTex({ parenthesis: 'auto' });\r\n  expression = expression.replaceAll('x', 'f(x)')\r\n  expression = expression.replaceAll('y', 'g(x)')\r\n  expression = expression.replaceAll('~', '')\r\n  expression = expression.replaceAll(\"~{ \", \"{\")\r\n\r\n  // other question info\r\n  const title = <>\r\n    <h2>Evaluate the limit using the figures provided. </h2>\r\n  </>\r\n\r\n  const nextToInput = <Latex expression={`\\\\lim_{x \\\\to ${xVal}}\\\\left[${expression}\\\\right] = `} display={true} />\r\n\r\n  // hints\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <span>First, evaluate <Latex expression={`\\\\lim_{x \\\\to ${xVal}} f(x)`} /> using the table and <Latex expression={`\\\\lim_{x \\\\to ${xVal}} g(x)`} /> using the graph. </span>\r\n      {table} \r\n      {graph}\r\n    </div>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      Now, what is the easiest way to evaluate the limit, knowing the below list of properties? \r\n      <LimitPropertyRules />\r\n    </div>\r\n  ]\r\n  \r\n  return { question, title, ans, type: 'math', nextToInput, hints }\r\n\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return limitPropertyQuestion();\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","FunctionTable","xTitle","yTitle","data","tableRef","setWidth","useState","originalWidthRef","windowWidth","useWindowSize","display","setDisplay","element","resizeObserver","ResizeObserver","entries","entry","target","contentRect","observe","unobserve","disconnect","className","children","_jsxs","concat","Latex","expression","map","d","i","x","y","LimitPropertyRules","generateRandomQuestion","document","documentElement","style","setProperty","COLORS","getRandomNumber","length","limitPropertyQuestion","xVal","getRandomWithExclusions","tableValues","generateOrderedValues","Boolean","generateLimitTableData","table","graphFunction","generateRandomPolynomialWithPoint","f","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","graph","inline","FunctionGraph","GRAPH_SIZE","question","push","value","Math","round","generateLimitPropertyTerm","ans","String","math","convertArrayToObject","toTex","parenthesis","replaceAll","title","_Fragment","type","nextToInput","hints"],"sourceRoot":""}