{"version":3,"file":"static/js/938.8005d7c6.chunk.js","mappings":"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","sources":["components/content-components/graphs/LimitExampleGraph.tsx","topics/01-limits/01-understanding-limits/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates graph of function f showing limit at xval\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createFunctionGraph, createBlankCanvas, createFunctionLimitLine, createLimitLine, convertScale, findOffsets } from \"../../../helpers/graph-helpers\";\r\nimport { AXIS_OFFSET, CLOSE_DIST, FAR_DIST } from \"../../../helpers/constants\";\r\nimport * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../../../styles/graph.css'\r\nimport React from \"react\";\r\n\r\ninterface LimitExampleGraphProps {\r\n  f: Function, // function to generate graph of\r\n  xval: number, // xvalue at which to show limit\r\n  y: number, // y of function - could be different from f(xval) if there's a hole, or null if f is undefined at xval\r\n  fColor: string, //classes to add to function graph\r\n  xColor: string, // classes to add to x limit arrows\r\n  yColor: string, // classes to add to y limit arrows\r\n  size: number // size of graph\r\n}\r\n\r\nconst LimitExampleGraph: React.FC<LimitExampleGraphProps> = ({ f, xval, y, fColor, xColor, yColor, size }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const textSize = 11;\r\n      const graphSize = size;\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(graphSize, graphSize, svgRef, textSize);\r\n\r\n      const svg = d3.select(svgRef.current)\r\n      const yval = f(xval);\r\n\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      // dashed lines going to x and y axes\r\n      svg.append('path')\r\n        .datum([{ x: 0, y: yval }, { x: xval, y: yval }])\r\n        .attr('class', 'stroke ' + yColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      svg.append('path')\r\n        .datum([{ x: xval, y: yval }, { x: xval, y: 0 }])\r\n        .attr('class', 'stroke ' + xColor)\r\n        .attr('stroke-width', 2)\r\n        .style('stroke-dasharray', 2)\r\n        .attr('d', line)\r\n\r\n      const { data, id } = createFunctionGraph(svg, f, width, height, null, xScale, yScale, fColor, -11, 11, true, true);\r\n      createAllLimitLines(svg, line, xval, yval,\r\n        xColor, yColor, fColor,\r\n        xScale, yScale, data, id, textSize);\r\n\r\n      // hole at xval, yval\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'hole fill stroke ' + fColor)\r\n        .attr('cx', xScale(xval))\r\n        .attr('cy', yScale(yval))\r\n        .attr('r', 3)\r\n\r\n      // point at xval, y\r\n      if (y !== null) {\r\n        svg\r\n          .append('circle')\r\n          .attr('class', 'fill stroke ' + fColor)\r\n          .attr('cx', xScale(xval))\r\n          .attr('cy', yScale(y))\r\n          .attr('r', 3)\r\n      }\r\n    }\r\n\r\n  }, [svgRef, f, fColor, xColor, xval, y, yColor, size])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg to append lmit lines to\r\n * @param {function} line functionthat creates 'd' attribute in svg path\r\n * @param {number} xval xvalue of point where limit is being generated\r\n * @param {number} yval yvalue of point\r\n * @param {string} xColor classes to be added to x limit lines\r\n * @param {string} yColor classes to be added to y limit lines\r\n * @param {string} fColor classes to be added to f limit lines\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {Array} data array of data for original function\r\n * @param {id} id id of function path\r\n * @param {number} textSize text size of label\r\n */\r\nfunction createAllLimitLines(svg, line, xval, yval,\r\n  xColor, yColor, fColor,\r\n  xScale, yScale, data, id, textSize) {\r\n\r\n  // horizontal and vertical arrows\r\n  createLimitLine(svg, line, xval - FAR_DIST,\r\n    xval - CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n  createLimitLine(svg, line, xval + FAR_DIST,\r\n    xval + CLOSE_DIST,\r\n    AXIS_OFFSET, AXIS_OFFSET, 'x-limits', xColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + xColor)\r\n    .attr('cx', xScale(xval))\r\n    .attr('cy', yScale(0))\r\n    .attr('r', 1)\r\n\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval - FAR_DIST, yval - CLOSE_DIST, 'y-limits', yColor)\r\n  createLimitLine(svg, line, AXIS_OFFSET,\r\n    AXIS_OFFSET,\r\n    yval + FAR_DIST, yval + CLOSE_DIST, 'y-limits', yColor)\r\n\r\n  svg.append('circle')\r\n    .attr('class', 'fill stroke ' + yColor)\r\n    .attr('cx', xScale(0))\r\n    .attr('cy', yScale(yval))\r\n    .attr('r', 1)\r\n\r\n  // function arrows\r\n  const dataUpToPoint = data.filter((d) => d.x < xval);\r\n\r\n  // create path up to point to get its length\r\n  const pointId = uuidv4();\r\n  svg.append('path')\r\n    .datum(dataUpToPoint)\r\n    .attr('data-uuid', pointId)\r\n    .attr('fill', 'none')\r\n    .attr('d', line);\r\n\r\n  // get path length and use that to find points at which to genrate limit arrows\r\n  const functionLine = d3.select(`[data-uuid=\"${id}\"]`).node();\r\n  const pathLength = d3.select(`[data-uuid=\"${pointId}\"]`).node().getTotalLength();\r\n\r\n  const leftLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, false);\r\n  const rightLine = createFunctionLimitLine(\r\n    svg, functionLine, pathLength, xScale, yScale, line, fColor, true);\r\n\r\n  const farPointOne = leftLine.farPoint;\r\n  const farPointTwo = rightLine.farPoint;\r\n\r\n  // text at point\r\n\r\n  // get offset values\r\n  const pointsText = convertScale(farPointOne, farPointTwo, xScale, yScale);\r\n  const offsetsText = findOffsets(pointsText, 3 * AXIS_OFFSET);\r\n\r\n  // adjust offset values by ensuring they are a minimum distance away from line\r\n  offsetsText.y = isNaN(offsetsText.y) ? 0.7 : offsetsText.y;\r\n  if (offsetsText.y <= 0) {\r\n    offsetsText.y = Math.min(-0.5, offsetsText.y);\r\n  } else {\r\n    offsetsText.y = Math.max(0.5, offsetsText.y);\r\n  }\r\n\r\n  if (offsetsText.x <= 0) {\r\n    offsetsText.x = Math.min(-1.2, offsetsText.x);\r\n  } else {\r\n    offsetsText.x = Math.max(1.2, offsetsText.x);\r\n  }\r\n\r\n  // if text is too close to axes, move it on the other side of the line\r\n  if ((xval <= 3 && xval >= 0) && offsetsText.x < 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  if (xval >= -3 && xval < 0 && offsetsText.x > 0) {\r\n    offsetsText.x = (offsetsText.x * -1);\r\n    offsetsText.y = offsetsText.y * -1;\r\n  }\r\n\r\n  // add text\r\n  svg.append('text')\r\n    .attr('x', xScale(xval + offsetsText.x))\r\n    .attr('y', yScale(yval + offsetsText.y))\r\n    .attr('text-anchor', 'middle')\r\n    .attr('alignment-baseline', 'middle')\r\n    .attr('class', 'text')\r\n    .style('font-size', textSize)\r\n    .text(`(${xval}, ${Math.round(yval)})`)\r\n}\r\n\r\nexport default LimitExampleGraph","import { COLORS } from \"../../../helpers/constants\";\r\nimport { getRandomNumber, getRandomWithExclusions, shuffleArray } from \"../../../helpers/functions\";\r\nimport { generateRandomPolynomial, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport LimitExampleGraph from \"../../../components/content-components/graphs/LimitExampleGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\n\r\n/**\r\n * generates random question that asks users to select the limit that best matches the graph\r\n * @returns title, question, options for question type\r\n */\r\nconst graphToLimit = (): Question => {\r\n  // title for question\r\n  const title = <></> // <h2>Which limit best represents the graph?</h2>\r\n\r\n  // generate random graph function\r\n  const { node, x } = generateRandomPolynomial(getRandomNumber(1, 4))\r\n  const f = (x) => node.evaluate({ x });\r\n  const realY = Math.round(f(x));\r\n\r\n  // generate yval - function undefined, hole, or function continuous at x val\r\n  const yvalNum = getRandomNumber(0, 2);\r\n  let y = null;\r\n  if (yvalNum === 0) {\r\n    y = getRandomNumber(-7, 7);\r\n  } else if (yvalNum === 1) {\r\n    y = realY;\r\n  }\r\n\r\n  // question content\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h2>Which limit best represents the graph?</h2>\r\n    <h3>Graph of <Latex expression={` g(x) `} ></Latex></h3>\r\n    <LimitExampleGraph f={f} xval={x} y={y}\r\n      fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // generate options\r\n  const o1 = {\r\n    component: <Latex expression={` {\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${realY} `} />,\r\n    correct: true\r\n  }\r\n\r\n  const o2 = {\r\n    component: null,\r\n    correct: false\r\n  }\r\n\r\n  let ex = \"\";\r\n  const o2Num = getRandomNumber(0, 1);\r\n  if (o2Num === 0 && yvalNum === 0 && y !== realY) {\r\n    ex = `{\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${y}`;\r\n  } else if (x !== realY) {\r\n    ex = `{\\\\lim}_{{x \\\\to ${realY}}}{g(x)} = ${x}`;\r\n  } else {\r\n    const rand = getRandomWithExclusions(-7, 7, [realY])\r\n    ex = `{\\\\lim}_{{x \\\\to ${x}}}{g(x)} = ${rand}`;\r\n  }\r\n  o2.component = <Latex expression={` ${ex} `} />\r\n\r\n  const input = shuffleArray([o1, o2]);\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Recall the definition of a limit: <Latex expression={`\\\\lim_{x \\\\to a} f(x) = L`} />\r\n      </div>\r\n      <div>\r\n        This is read as \"the limit of <Latex expression=\"f(x)\" /> as <Latex expression=\"x\" /> approaches <Latex expression=\"a\" /> is <Latex expression=\"L\" />.\"\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        This means that the <Latex expression=\"x\" /> value the function is approaching is <Latex expression=\"a\" />, and the <Latex expression=\"y\" /> value is <Latex expression=\"L\" />.\r\n      </div>\r\n      <div>\r\n        In this graph, what value is <Latex expression={`x`} /> approaching? What is <Latex expression={`y`} /> approaching?\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Looking at the arrows on the graph, it is clear that <Latex expression=\"x\" /> is approaching <Latex classes=\"bold\" expression={`${x}`} />, and <Latex expression=\"y\" /> is approaching <Latex classes=\"bold\" expression={`${realY}`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        Thus, the correct answer is:\r\n        <div className=\"hint-ans input correct ans\">\r\n          {o1.component}\r\n        </div>\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\n/**\r\n * generates random question that asks users to select the graph that best matches the limit\r\n * @returns title, question, options for question type\r\n */\r\nconst limitToGraph = (): Question => {\r\n  // title for question\r\n  const title = <></>// <h2>Which graph best represents the limit?</h2>\r\n\r\n  // random graph function\r\n  const g1 = generateRandomPolynomial(getRandomNumber(1, 4));\r\n  const node1 = g1.node;\r\n  const x1 = g1.x;\r\n  const f1 = x => node1.evaluate({ x });\r\n  const realY1 = Math.round(f1(x1));\r\n\r\n  // generate yval\r\n  let yvalNum = getRandomNumber(0, 2);\r\n  let y1 = null;\r\n  if (yvalNum === 0) {\r\n    y1 = getRandomNumber(-7, 7);\r\n  } else if (yvalNum === 1) {\r\n    y1 = realY1;\r\n  }\r\n\r\n  const question =\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <h2>Which graph best represents the limit?</h2>\r\n      <Latex expression={` {\\\\lim}_{{x \\\\to ${x1}}}{g(x)} = ${realY1} `} />\r\n    </div>\r\n\r\n  // generate options\r\n  const o1 = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <h3>Graph of <Latex expression={` g(x) `} /></h3>\r\n      <LimitExampleGraph f={f1} xval={x1} y={y1} fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n    </div>,\r\n    correct: true\r\n  }\r\n\r\n  let x2 = realY1;\r\n  let y2 = x1;\r\n\r\n  if (x2 === y2) {\r\n    const n = getRandomNumber(0, 1);\r\n    if (n === 0) {\r\n      x2 = getRandomWithExclusions(-7, 7, [x2, -1, 0, 1]);\r\n    } else {\r\n      y2 = getRandomWithExclusions(-7, 7, [y2, -1, 0, 1]);\r\n    }\r\n  }\r\n\r\n  const g2 = generateRandomPolynomialWithPoint(getRandomNumber(1, 4), x2, y2);\r\n  const f2 = x => g2.evaluate({ x });\r\n\r\n  const o2 = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <h3>Graph of <Latex expression={` g(x) `} /></h3>\r\n      <LimitExampleGraph f={f2} xval={x2} y={y2} fColor={\"f\"} xColor={\"x\"} yColor={\"y\"} size={GRAPH_SIZE} />\r\n    </div>,\r\n    correct: false\r\n  }\r\n\r\n  const input = shuffleArray([o1, o2]);\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Recall the definition of a limit: <Latex expression={`\\\\lim_{x \\\\to a} f(x) = L`} />\r\n      </div>\r\n      <div>\r\n        This is read as \"the limit of <Latex expression=\"f(x)\" /> as <Latex expression=\"x\" /> approaches <Latex expression=\"a\" /> is <Latex expression=\"L\" />.\"\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        This means that the <Latex expression=\"x\" /> value the function is approaching is <Latex expression=\"a\" />, and the <Latex expression=\"y\" /> value is <Latex expression=\"L\" />.\r\n      </div>\r\n      <div>\r\n        Thus, we are looking for a graph where <Latex expression=\"x\" /> is approaching <Latex classes=\"bold\" expression={`${x1}`} />, and <Latex expression=\"y\" /> is approaching <Latex classes=\"bold\" expression={`${realY1}`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        Looking at both graphs, the correct answer is:\r\n        <div className=\"hint-ans input correct ans\">\r\n          {o1.component}\r\n        </div>\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(0, 1);\r\n  let q = null;\r\n  if (rand === 0) {\r\n    q = graphToLimit();\r\n  } else {\r\n    q = limitToGraph();\r\n  }\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion;"],"names":["_ref","f","xval","y","fColor","xColor","yColor","size","svgRef","useRef","useEffect","current","textSize","graphSize","height","width","xScale","yScale","createBlankCanvas","svg","d3","yval","line","x","d","append","datum","attr","style","data","id","createFunctionGraph","createLimitLine","FAR_DIST","CLOSE_DIST","AXIS_OFFSET","dataUpToPoint","filter","pointId","uuidv4","functionLine","concat","node","pathLength","getTotalLength","leftLine","createFunctionLimitLine","rightLine","farPointOne","farPoint","farPointTwo","pointsText","convertScale","offsetsText","findOffsets","isNaN","Math","min","max","text","round","createAllLimitLines","_jsx","ref","generateRandomQuestion","q","getRandomNumber","graphToLimit","title","_Fragment","generateRandomPolynomial","evaluate","realY","yvalNum","question","_jsxs","className","children","Latex","expression","LimitExampleGraph","GRAPH_SIZE","o1","component","correct","o2","ex","rand","getRandomWithExclusions","input","shuffleArray","type","hints","classes","limitToGraph","g1","node1","x1","f1","realY1","y1","x2","y2","g2","generateRandomPolynomialWithPoint","document","documentElement","setProperty","COLORS","length"],"sourceRoot":""}