{"version":3,"file":"static/js/402.5765efb8.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","components/content-components/tables/FunctionTable.js","topics/01-limits/04-evaluating-limits-using-algebraic-properties/LimitPropertyRules.tsx","topics/01-limits/04-evaluating-limits-using-algebraic-properties/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[],\r\n  size: number,\r\n  minx?: number,\r\n  maxx?: number,\r\n  miny?: number,\r\n  maxy?: number,\r\n  points?: GraphPoint[]\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n * Parameters:\r\n *  - xTitle: title of x values\r\n *  - yTitle: title of y values\r\n *  - data: array data to put in table in { x: Number, y: Number } format\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\n\r\nexport const FunctionTable = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","/**\r\n * List of all properties of limits\r\n */\r\n\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport React from \"react\"\r\n\r\nexport const LimitPropertyRules = () => {\r\n  return (\r\n    <div className=\"important\">\r\n      <h3>Rules</h3>\r\n      <ol className=\"text-start display\">\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[c f(x)] = c \\\\cdot {\\\\lim}_{x \\\\to a} f(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\pm g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\pm {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\cdot g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\cdot {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\frac{f(x)}{g(x)}\\\\right] = \\\\frac{{\\\\lim}_{x \\\\to a} f(x)}{{\\\\lim}_{x \\\\to a} g(x)}, \\\\text{given } {{\\\\lim}_{x \\\\to a} g(x)} \\\\neq 0`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x)]^n = \\\\left[{\\\\lim}_{x \\\\to a} f(x)\\\\right]^n`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\sqrt[n]{f(x)}\\\\right] = \\\\sqrt[n]{{\\\\lim}_{x \\\\to a} f(x)}`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a} c = c`} display={true} />\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  )\r\n}","import { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { generateLimitPropertyTerm, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { convertArrayToObject, generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from \"mathjs\"\r\nimport { GRAPH_SIZE, COLORS } from \"../../../helpers/constants\";\r\nimport { LimitPropertyRules } from \"./LimitPropertyRules\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../types/Question\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\n\r\n/**\r\n * generates random question that presents a table and a graph from which some limits can be evaluated, then generates expression with limit properties and asks user to solve\r\n */\r\nconst limitPropertyQuestion = (): Question => {\r\n  const functions = []; // functions in expression, ex: {f: f(x), value: 2}\r\n  const xVal = getRandomWithExclusions(-9, 9, [-1, 0, 1]); // where to eval limit\r\n\r\n  // generate table\r\n  const tableValues = generateOrderedValues(5, Boolean(getRandomNumber(0, 1))); // values in table\r\n  const { data } = generateLimitTableData(xVal, tableValues, xVal - 2, xVal + 2);\r\n  const table = <FunctionTable xTitle={'x'} yTitle={'f(x)'} data={data} />\r\n\r\n  // generate graph with point at xVal\r\n  const graphFunction =\r\n    generateRandomPolynomialWithPoint(3, xVal, getRandomWithExclusions(-7, 7, [-1, 0, 1]));\r\n\r\n  // function to graph\r\n  let f: GraphFunction[] = [{\r\n    f: (x: number) => graphFunction.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // create graph\r\n  const graph = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={f} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {table}\r\n    {graph}\r\n  </div>\r\n\r\n  // populate functions array\r\n  functions.push({ f: 'x', value: tableValues[2] });\r\n  functions.push({ f: 'y', value: Math.round(graphFunction.evaluate({ x: xVal })) });\r\n\r\n  // get expression and answer\r\n  let expression = generateLimitPropertyTerm(functions, ['^', '+', '-', '*', '/']);\r\n  const ans = String(Math.round(math.evaluate(expression, convertArrayToObject(functions))));\r\n\r\n  // format expression\r\n  expression = math.simplifyCore(expression).toTex({ parenthesis: 'auto' });\r\n  expression = expression.replaceAll('x', 'f(x)')\r\n  expression = expression.replaceAll('y', 'g(x)')\r\n  expression = expression.replaceAll('~', '')\r\n  expression = expression.replaceAll(\"~{ \", \"{\")\r\n\r\n  // other question info\r\n  const title = <>\r\n    <h2>Evaluate the limit using the figures provided. </h2>\r\n  </>\r\n\r\n  const nextToInput = <Latex expression={`\\\\lim_{x \\\\to ${xVal}}\\\\left[${expression}\\\\right] = `} display={true} />\r\n\r\n  // hints\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <span>First, evaluate <Latex expression={`\\\\lim_{x \\\\to ${xVal}} f(x)`} /> using the table and <Latex expression={`\\\\lim_{x \\\\to ${xVal}} g(x)`} /> using the graph. </span>\r\n      {table} \r\n      {graph}\r\n    </div>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      Now, what is the easiest way to evaluate the limit, knowing the below list of properties? \r\n      <LimitPropertyRules />\r\n    </div>\r\n  ]\r\n  \r\n  return { question, title, ans, type: 'math', nextToInput, hints }\r\n\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return limitPropertyQuestion();\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","FunctionTable","xTitle","yTitle","data","tableRef","_useState","useState","_useState2","_slicedToArray","setWidth","originalWidthRef","windowWidth","useWindowSize","_useState3","_useState4","display","setDisplay","element","resizeObserver","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","entry","value","target","contentRect","err","e","f","observe","unobserve","disconnect","className","children","_jsxs","concat","Latex","expression","map","d","i","x","y","LimitPropertyRules","document","documentElement","style","setProperty","COLORS","getRandomNumber","length","xVal","getRandomWithExclusions","tableValues","generateOrderedValues","Boolean","generateLimitTableData","table","graphFunction","generateRandomPolynomialWithPoint","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","graph","inline","FunctionGraph","GRAPH_SIZE","question","push","Math","round","generateLimitPropertyTerm","ans","String","math","convertArrayToObject","toTex","parenthesis","replaceAll","title","_Fragment","type","nextToInput","hints","limitPropertyQuestion"],"sourceRoot":""}