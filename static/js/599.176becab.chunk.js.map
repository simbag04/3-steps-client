{"version":3,"file":"static/js/599.176becab.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","components/content-components/graphs/FunctionGraph.js","components/content-components/tables/FunctionTable.js","components/latex/Piecewise.tsx","topics/01-limits/02-evaluating-limits-using-graphs/generate-question.tsx","topics/01-limits/03-estimating-limits-using-tables/generate-question.tsx","topics/01-limits/04-evaluating-limits-using-algebraic-properties/LimitPropertyRules.js","topics/01-limits/04-evaluating-limits-using-algebraic-properties/generate-question.tsx","topics/01-limits/05-evaluating-limits-using-direct-substitution/generate-question.tsx","topics/01-limits/06-evaluating-limits-using-algebraic-manipulation/generate-question.tsx","topics/01-limits/07-selecting-procedures-for-determining-limits/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst FunctionGraph = ({ functions, size, minx, maxx, miny, maxy}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n * Parameters:\r\n *  - xTitle: title of x values\r\n *  - yTitle: title of y values\r\n *  - data: array data to put in table in { x: Number, y: Number } format\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\n\r\nexport const FunctionTable = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string,\r\n  functions: PiecewiseFunction[],\r\n  display?: string\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import Latex from \"../../../components/latex/Latex\";\r\nimport { getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport { fitPointsToQuadratic, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from 'mathjs'\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\";\r\nimport { COLORS, GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../types/Question\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\n\r\n/**\r\n * generates random question that shows a graph with asymptote(s) and asks users to find the limit at an asymptotic point\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst asymptoticGraphQuestion = (): any => {\r\n  const randomNumbers = getRandomNumber(1, 2); // number of asymptotes\r\n  const xValues = []; // values at which there will be an asymptote\r\n  let f = `(${getRandomNumber(0, 1) === 0 ? \"-\" : \"\"}1/`; // function\r\n\r\n  // get random x values and build function\r\n  for (let i = 0; i < randomNumbers; i++) {\r\n    const num = getRandomWithExclusions(-7, 7, [-1, 0, 1, ...xValues]);\r\n    xValues[i] = num;\r\n    f = f + `(x ${num < 0 ? '+' : '-'} ${Math.abs(num)})`;\r\n  }\r\n  const verticalShift = getRandomNumber(-5, 5)\r\n  f = f + `) ${verticalShift > 0 ? '+' : '-'} ${Math.abs(verticalShift)}`\r\n\r\n  // sort x values in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n  const node = math.parse(f);\r\n\r\n  // generate functions array\r\n  // this generates an array that doesn't include the x values as the function is undefined at those points\r\n  const functions: GraphFunction[] = [];\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min: i === 0 ? -11 : xValues[i - 1],\r\n      max: i === xValues.length ? 11 : xValues[i],\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'f',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      type: \"asymptotic\"\r\n    }\r\n\r\n    functions[i] = curr;\r\n  }\r\n\r\n  // set all other question stuff\r\n  const ans = \"dne\";\r\n  const type = 'math';\r\n\r\n  // random x value to ask about\r\n  const val = xValues[getRandomNumber(0, xValues.length - 1)];\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <AsymptoticGraph functions={functions} size={GRAPH_SIZE} x={xValues} y={[verticalShift]} />\r\n  </div>\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${val}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {val} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit at a point where the function appears to be boundless?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of multiple functions, potentially with a jump.\r\n * Asks users to find limit from left, right, or both sides of a random point in graph\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst jumpGraphQuestion = (): any => {\r\n  const numFunctions = getRandomNumber(2, 3); // number of functions in graph\r\n  const xValues: number[] = []; // xvalues where there is a potential jump\r\n  const exclusions: number[] = []; // xvalues that should not be a jump\r\n\r\n  // generate random xvalues\r\n  for (let i = 1; i < numFunctions; i++) {\r\n    const num = getRandomWithExclusions(-8, 8, exclusions);\r\n    xValues[i - 1] = num;\r\n    exclusions.push(num - 2, num - 1, num, num + 1, num + 2) // exclude xvalue and +- 2\r\n  }\r\n\r\n  // sort xvalues in ascending order\r\n  xValues.sort((a, b) => a - b);\r\n\r\n  const possibleXs = [...xValues]; // possiblexs that can be asked about\r\n\r\n  const functions = [];\r\n\r\n  // min/max variables of each function in function array\r\n  let min = -11;\r\n  let max = xValues[0] ? xValues[0] : 11;\r\n\r\n  // generate functions array\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    let x = null;\r\n    let node;\r\n \r\n    if (i === 0) {\r\n      // left most function\r\n      x = xValues[i] !== undefined ? xValues[i] : getRandomNumber(-8, 8);\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at right x value\r\n    } else if (i === numFunctions - 1) {\r\n      // right most function\r\n      x = xValues[i - 1]\r\n      node = generateRandomPolynomialWithPoint(\r\n        getRandomNumber(1, 4), x, getRandomNumber(-7, 7)) // graph with point at left x value\r\n    } else {\r\n      // middle graph\r\n      x = xValues[i];\r\n      const midx = Math.round((xValues[i - 1] + xValues[i]) / 2) // midpoint of function domain\r\n\r\n      // points that should be in graph\r\n      const points = [\r\n        { x: xValues[i - 1], y: getRandomNumber(-7, 7) },\r\n        { x: midx, y: getRandomNumber(-7, 7) },\r\n        { x: xValues[i], y: getRandomNumber(-7, 7) }\r\n      ]\r\n      possibleXs.push(midx); // add midx as a potential xvalue to ask about\r\n      node = fitPointsToQuadratic(points) // generate graph that fits to points\r\n    }\r\n\r\n    max = xValues[i] !== undefined ? xValues[i] : 11; // update max\r\n    let curr = {\r\n      f: (x: number) => node.evaluate({ x }),\r\n      min,\r\n      max,\r\n      includeLeft: i !== 0 ? !functions[i - 1].includeRight : false, // opposite of prev f right\r\n      includeRight: getRandomNumber(0, 1) === 0, // randomly decide\r\n      leftArrow: i === 0, // arrows on first and last graphs\r\n      rightArrow: i === numFunctions - 1,\r\n      classes: 'f',\r\n      leftCircle: i !== 0, // circle on both sides except first/last graphs which have arrows\r\n      rightCircle: i !== numFunctions - 1\r\n    }\r\n\r\n    min = xValues[i]; // update min\r\n    functions[i] = curr;\r\n  }\r\n\r\n  const qX = possibleXs[getRandomNumber(0, possibleXs.length - 1)]; // x to ask about\r\n  let ans: number | string;\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // get correct answer based on xvalue/sign\r\n  for (let i = 0; i < functions.length; i++) {\r\n    if (qX === functions[i].min) {\r\n      // qX on left side of graph, limit from right\r\n      if (sign === 1) {\r\n        ans = Math.round(functions[i].f(functions[i].min));\r\n      }\r\n    } else if (qX === functions[i].max) {\r\n      // qX on right side of graph\r\n      if (sign === 0) {\r\n        // limit from left\r\n        ans = functions[i].f(qX);\r\n      } else if (sign === 2) {\r\n        // limit from both sides\r\n        const currVal = Math.round(functions[i].f(qX));\r\n        const nextVal = Math.round(functions[i + 1].f(qX));\r\n        ans = currVal === nextVal ? currVal : 'dne';\r\n      }\r\n    } else if (qX > functions[i].min && qX < functions[i].max) {\r\n      // qX in the middle\r\n      ans = Math.round(functions[i].f(qX));\r\n    }\r\n  }\r\n\r\n  // set all other question stuff\r\n  const type = 'math'\r\n  ans = String(ans);\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const signText = sign === 0 ? `^{-}` : sign === 1 ? `^{+}` : ``;\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${qX + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {qX} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      Are we interested in the limit from the left, right, or both directions?\r\n    </div>,\r\n    <div>\r\n      {ans === 'dne' ? \"What do we know about limits at point where there is a jump in the graph?\" :\r\n        sign === 2 ? `Looking at the graph, what do we know about the asked limit?` :\r\n          \"Which sub-function graph should we look at to get our answer?\"}\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random question that shows a graph of an oscillating function\r\n * asks users to find limit where graph is oscillating\r\n * @returns question, answer, text next to input, hints\r\n */\r\nconst oscillatingGraphQuestion = (): any => {\r\n  // transformation variables\r\n  const horizShift = getRandomNumber(-8, 8);\r\n  const verticalShift = getRandomNumber(-7, 7)\r\n  const f = `(${getRandomWithExclusions(-3, 3, [0])}/${getRandomWithExclusions(-2, 2, [0])})sin(1/(x - ${horizShift})) + ${verticalShift}`\r\n\r\n  // set function\r\n  const node = math.parse(f);\r\n  const functions: GraphFunction[] = [{\r\n    f: (x: number) => node.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // set all other question stuff\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  const ans = 'dne'\r\n  const type = 'math'\r\n\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${horizShift}} g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <span>{nextToInput} ?</span>\r\n      Focus on x = {horizShift} on the graph.\r\n      {question}\r\n    </div>,\r\n    <div>\r\n      What can we say about the limit of a function at a point where the function is oscillating?\r\n    </div>\r\n  ]\r\n\r\n  return { question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 2) {\r\n    q = oscillatingGraphQuestion();\r\n  } else if (rand <= 5) {\r\n    q = asymptoticGraphQuestion();\r\n  } else {\r\n    q = jumpGraphQuestion();\r\n  }\r\n\r\n  // set title since it's the same for everything\r\n  q.title = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion","import { generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from 'mathjs'\r\nimport React from \"react\";\r\nimport { Question } from \"../../../types/Question\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst functionToTable = (): Question => {\r\n  const title = <></>\r\n\r\n  // generate random function\r\n  const xVal = getRandomWithExclusions(-9, 9, [0]);\r\n\r\n  // get 2-3 factors on top\r\n  const factor1 = getStringFactorFromXval(xVal);\r\n  const factor2 = getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0]));\r\n  const factor3 = getRandomNumber(0, 1) === 0 ?\r\n    getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0])) : \"\";\r\n\r\n  // get expanded latex version of equation\r\n  const numerator = sortPolynomialByDegree(nerdamer(`${factor1}${factor2}${factor3}`).expand());\r\n  const equation = `(${numerator})/${factor1}`;\r\n  const latexEq = nerdamer(equation).toTeX().replaceAll(' \\\\cdot ', \"\")\r\n\r\n  // create question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Which table is best for estimating the limit of this function?</h2>\r\n      <div>Assume both tables have correct function values.</div>\r\n    </div>\r\n    <Latex expression={`g(x) = ${latexEq}`} classes={'large-font'} display={true} />\r\n  </div>\r\n\r\n  const node = math.parse(`${factor2}${factor3}`);\r\n  const f = (x: number) => node.evaluate({ x });\r\n\r\n  // create options\r\n  // first option\r\n  const data1 = [];\r\n  for (let i = xVal - 5; i <= xVal + 5; i++) {\r\n    data1.push({ x: i, y: xVal === i ? 'und' : Math.round(f(i)) });\r\n  }\r\n\r\n  // second option data\r\n  const data2 = [];\r\n  for (let i = xVal - 2; i <= xVal + 2; i++) {\r\n    if (i !== xVal) {\r\n      data2.push({ x: i, y: Math.round(f(i)) })\r\n    } else {\r\n      data2.push({ x: i - 0.1, y: fixRounding(f(i - 0.1), 10) });\r\n      data2.push({ x: i - 0.01, y: fixRounding(f(i - 0.01), 100) });\r\n      data2.push({ x: i - 0.001, y: fixRounding(f(i - 0.001), 1000) });\r\n      data2.push({ x: i, y: 'und' });\r\n      data2.push({ x: i + 0.001, y: fixRounding(f(i + 0.001), 1000) });\r\n      data2.push({ x: i + 0.01, y: fixRounding(f(i + 0.01), 100) });\r\n      data2.push({ x: i + 0.1, y: fixRounding(f(i + 0.1), 10) });\r\n    }\r\n  }\r\n\r\n  const option1 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data1} />,\r\n    correct: false\r\n  }\r\n\r\n  const option2 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data2} />,\r\n    correct: true\r\n  }\r\n\r\n  const input = shuffleArray([option1, option2])\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>Focus on <Latex expression={`x = ${xVal}`} />. Recall that a limit is about getting infinitely close to the xvalue.</div>\r\n      <div className=\"flex vertical center small-gap\">\r\n        {option1.component}\r\n        {option2.component}\r\n      </div>\r\n    </div>,\r\n    <>\r\n      <div>When using a table, we really need to \"zoom in\" near the x-value. Which table does that?</div>\r\n    </>\r\n  ]\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nconst tableToLimit = (): Question => {\r\n  const xVal = getRandomNumber(-9, 9); // xval at which to evaluate limit\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // domain for table\r\n  const startX = xVal - (getRandomNumber(0, 1) === 0 ? 3 : 0);\r\n  const endX = xVal + ((getRandomNumber(0, 1) === 0 || xVal === startX) ? 3 : 0);\r\n\r\n  const increasing = Boolean(getRandomNumber(0, 1)); // whether table values are increasing or decreasing\r\n  const orderedValues = generateOrderedValues(endX - startX + 1, increasing); // values in table\r\n\r\n  // evaluate answer\r\n  let ans = String(orderedValues[xVal === startX ? 0 : 3]); // default answer\r\n  if ((xVal === startX && sign === 0) ||\r\n    (xVal === endX && sign === 1) ||\r\n    ((xVal === endX || xVal === startX) && sign === 2)) {\r\n    ans = \"dne\";\r\n  }\r\n\r\n  const { data } = generateLimitTableData(xVal, orderedValues, startX, endX) // data for table\r\n\r\n  // other question components\r\n  const title = <></> // no title as title is included in question\r\n\r\n  const signText = sign === 0 ? `^\\\\textbf{-}` : sign === 1 ? `^\\\\textbf{+}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${xVal + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Estimate the limit from the table.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist or cannot be evaluated from the table</div>\r\n    </div>\r\n    <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data} />\r\n  </div>\r\n\r\n  const type = 'math';\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>We are focused on evaluating the limit as <Latex expression={`x`} /> approaches {xVal} from {sign === 0 ? \"the left\" : sign === 1 ? \"the right\" : \"both sides\"}. What side(s) do we see in the table?</div>\r\n      <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data} />\r\n    </div>,\r\n    <>\r\n      {ans === \"dne\" ?\r\n        <div>\r\n          Does the table show the sides that we need?\r\n        </div> :\r\n        <div>\r\n          Look closely at the values in the table near <Latex expression={`x = ${xVal}`} />. What do they seem to be approaching?\r\n        </div>}\r\n    </>\r\n  ]\r\n\r\n  return { title, question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = tableToLimit();\r\n  } else {\r\n    q = functionToTable();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {Number} val value to round\r\n * @param {Number} degree of places to round to: ex. if you want to round to the tenths place, this should be 10\r\n * @returns rounded value\r\n */\r\nconst fixRounding = (val: number, degree: number): number => {\r\n  return Math.floor(val * degree * 10) / (degree * 10);\r\n}\r\n\r\nexport default generateRandomQuestion","/**\r\n * List of all properties of limits\r\n */\r\n\r\nimport Latex from \"../../../components/latex/Latex\"\r\nexport const LimitPropertyRules = () => {\r\n  return (\r\n    <div className=\"important\">\r\n      <h3>Rules</h3>\r\n      <ol className=\"text-start display\">\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[c f(x)] = c \\\\cdot {\\\\lim}_{x \\\\to a} f(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\pm g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\pm {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x) \\\\cdot g(x)] = {\\\\lim}_{x \\\\to a} f(x) \\\\cdot {\\\\lim}_{x \\\\to a} g(x)`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\frac{f(x)}{g(x)}\\\\right] = \\\\frac{{\\\\lim}_{x \\\\to a} f(x)}{{\\\\lim}_{x \\\\to a} g(x)}, \\\\text{given } {{\\\\lim}_{x \\\\to a} g(x)} \\\\neq 0`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}[f(x)]^n = \\\\left[{\\\\lim}_{x \\\\to a} f(x)\\\\right]^n`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a}\\\\left[\\\\sqrt[n]{f(x)}\\\\right] = \\\\sqrt[n]{{\\\\lim}_{x \\\\to a} f(x)}`} display={true} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`{\\\\lim}_{x \\\\to a} c = c`} display={true} />\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  )\r\n}","import { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { generateLimitPropertyTerm, generateRandomPolynomialWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { convertArrayToObject, generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from \"mathjs\"\r\nimport { GRAPH_SIZE, COLORS } from \"../../../helpers/constants\";\r\nimport { LimitPropertyRules } from \"./LimitPropertyRules\";\r\nimport React from \"react\";\r\nimport { Question } from \"../../../types/Question\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\n\r\n/**\r\n * generates random question that presents a table and a graph from which some limits can be evaluated, then generates expression with limit properties and asks user to solve\r\n */\r\nconst limitPropertyQuestion = (): Question => {\r\n  const functions = []; // functions in expression, ex: {f: f(x), value: 2}\r\n  const xVal = getRandomWithExclusions(-9, 9, [-1, 0, 1]); // where to eval limit\r\n\r\n  // generate table\r\n  const tableValues = generateOrderedValues(5, Boolean(getRandomNumber(0, 1))); // values in table\r\n  const { data } = generateLimitTableData(xVal, tableValues, xVal - 2, xVal + 2);\r\n  const table = <FunctionTable xTitle={'x'} yTitle={'f(x)'} data={data} />\r\n\r\n  // generate graph with point at xVal\r\n  const graphFunction =\r\n    generateRandomPolynomialWithPoint(3, xVal, getRandomWithExclusions(-7, 7, [-1, 0, 1]));\r\n\r\n  // function to graph\r\n  let f: GraphFunction[] = [{\r\n    f: (x: number) => graphFunction.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'f',\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }]\r\n\r\n  // create graph\r\n  const graph = <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression={`g(x)`} inline={true} /></h3>\r\n    <FunctionGraph functions={f} size={GRAPH_SIZE} />\r\n  </div>\r\n\r\n  // question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    {table}\r\n    {graph}\r\n  </div>\r\n\r\n  // populate functions array\r\n  functions.push({ f: 'x', value: tableValues[2] });\r\n  functions.push({ f: 'y', value: Math.round(graphFunction.evaluate({ x: xVal })) });\r\n\r\n  // get expression and answer\r\n  let expression = generateLimitPropertyTerm(functions, ['^', '+', '-', '*', '/']);\r\n  const ans = String(Math.round(math.evaluate(expression, convertArrayToObject(functions))));\r\n\r\n  // format expression\r\n  expression = math.simplifyCore(expression).toTex({ parenthesis: 'auto' });\r\n  expression = expression.replaceAll('x', 'f(x)')\r\n  expression = expression.replaceAll('y', 'g(x)')\r\n  expression = expression.replaceAll('~', '')\r\n  expression = expression.replaceAll(\"~{ \", \"{\")\r\n\r\n  // other question info\r\n  const title = <>\r\n    <h2>Evaluate the limit using the figures provided. </h2>\r\n  </>\r\n\r\n  const nextToInput = <Latex expression={`\\\\lim_{x \\\\to ${xVal}}\\\\left[${expression}\\\\right] = `} display={true} />\r\n\r\n  // hints\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <span>First, evaluate <Latex expression={`\\\\lim_{x \\\\to ${xVal}} f(x)`} /> using the table and <Latex expression={`\\\\lim_{x \\\\to ${xVal}} g(x)`} /> using the graph. </span>\r\n      {table} \r\n      {graph}\r\n    </div>,\r\n    <div className=\"flex vertical center medium-gap\">\r\n      Now, what is the easiest way to evaluate the limit, knowing the below list of properties? \r\n      <LimitPropertyRules />\r\n    </div>\r\n  ]\r\n  \r\n  return { question, title, ans, type: 'math', nextToInput, hints }\r\n\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // set color of graph\r\n  document.documentElement.style.setProperty('--random-color',\r\n    COLORS[getRandomNumber(0, COLORS.length - 1)])\r\n\r\n  return limitPropertyQuestion();\r\n}\r\n\r\nexport default generateRandomQuestion","import { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport * as math from \"mathjs\"\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\nimport React from \"react\";\r\nimport { PiecewiseFunction } from \"../../../types/PiecewiseFunction\";\r\nimport { Option } from \"../../../types/Option\";\r\nimport { Question } from \"../../../types/Question\";\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * generates random question with piecewise function, user is asked to find a limit using that function\r\n * @returns relevant question components\r\n */\r\nconst piecewiseToLimit = (): Question => {\r\n  const title: React.JSX.Element = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const mathFs = []; // array of mathjs functions\r\n  const xValues = generateOrderedValues(2, true, -3, 2); // random xvalues\r\n  let yValues = [getRandomNumber(-7, 7), getRandomNumber(-7, 7)]; // random y values\r\n  let includes = getRandomNumber(0, 1); // whether current xval is included in domain\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1];\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      // random which xval functions are continuous at\r\n      const match = getRandomNumber(0, 1) ? i - 1 : i;\r\n      xVal = xValues[match];\r\n      yVal = yValues[match];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal,\r\n      getRandomNumber(0, 1) ? yVal : getRandomNumber(-7, 7));\r\n\r\n    // store function to evaluate f\r\n    const node = math.parse(f);\r\n    mathFs.push((x: number) => node.evaluate({ x }));\r\n\r\n    // format f\r\n    f = math.simplifyCore(f).toTex({ parenthesis: 'auto' }).replaceAll('\\\\cdot', \"\");\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const question = <Piecewise functions={functions} title={`f(x)`} />\r\n\r\n  // find answer\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n  const x = xValues[getRandomNumber(0, xValues.length - 1)];\r\n  let ans: number | string;\r\n  for (let i = 0; i < xValues.length; i++) {\r\n    if (x === xValues[i]) {\r\n      let f1 = Math.round(mathFs[i](x));\r\n      let f2 = Math.round(mathFs[i + 1](x));\r\n      if (sign === 0) {\r\n        ans = f1;\r\n      } else if (sign === 1) {\r\n        ans = f2;\r\n      } else {\r\n        ans = f1 === f2 ? f1 : 'dne'\r\n      }\r\n    }\r\n  }\r\n\r\n  // other relevant components\r\n  const signText = sign === 0 ? `^\\\\textbf{-}` : sign === 1 ? `^\\\\textbf{+}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${x + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>\r\n        {question}\r\n      </div>\r\n      <div>\r\n        {nextToInput} ?\r\n      </div>\r\n      <div>\r\n        Focus on the functions around <Latex expression={`x = ${x}`} />.\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      Which side(s) are we evaluating the limit from? Based on that, which function(s) should we use to find the limit?\r\n    </div>\r\n  ]\r\n\r\n  return { title, question, ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates random absolute value quadratic and user is asked to select which piecewise function corresponds to it.\r\n * @returns relevant question components\r\n */\r\nconst absValueToPiecewise = (): Question => {\r\n  const title = <></>\r\n\r\n  // get two factors\r\n  const x1 = getRandomNumber(-7, 7)\r\n  const xvalues = [x1, getRandomWithExclusions(-7, 7, [x1])]\r\n  xvalues.sort((a, b) => a - b)\r\n\r\n  const f1 = getStringFactorFromXval(xvalues[0])\r\n  const f2 = getStringFactorFromXval(xvalues[1])\r\n  const neg = getRandomNumber(0, 1); // whether provided function is negative or positive\r\n\r\n  // get normal expanded version and negative expanded version\r\n  let expanded = sortPolynomialByDegree(nerdamer(`${f1}${f2}`).expand());\r\n  expanded = nerdamer(expanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  let negExpanded = sortPolynomialByDegree(nerdamer(`-${f1}${f2}`).expand());\r\n  negExpanded = nerdamer(negExpanded).toTeX().replaceAll(`\\\\cdot`, '')\r\n\r\n  const question = <>\r\n    <h3>Select the piecewise function corresponding to this absolute value function: </h3>\r\n    <Latex expression={`g(x) = |${neg ? negExpanded : expanded}|`} classes={'large-font'} />\r\n  </>\r\n\r\n  // function arrays for each option\r\n  const piecewise1: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise2: PiecewiseFunction[] = [\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\leq ${xvalues[0]}`\r\n    },\r\n    {\r\n      f: expanded,\r\n      domain: `${xvalues[0]} < x < ${xvalues[1]}`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x \\\\geq ${xvalues[1]}`\r\n    }\r\n  ]\r\n\r\n  const piecewise3: PiecewiseFunction[] = [\r\n    {\r\n      f: expanded,\r\n      domain: `x \\\\leq 0`\r\n    },\r\n    {\r\n      f: negExpanded,\r\n      domain: `x > 0`\r\n    }\r\n  ]\r\n\r\n  // create options array\r\n  const options: Option[] = [\r\n    {\r\n      component: <Piecewise functions={piecewise1} title={`g(x)`} />,\r\n      correct: true\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise2} title={`g(x)`} />,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <Piecewise functions={piecewise3} title={`g(x)`} />,\r\n      correct: false\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>\r\n        Remember we need to find where the function inside the absolute value is <Latex expression={`>`} /> or <Latex expression={`<`} /> 0. How can we do that with a quadratic?\r\n      </div>\r\n      <Latex expression={`g(x) = |${neg ? negExpanded : expanded}|`} classes={'large-font'} />\r\n    </div>,\r\n    <>\r\n      <div>\r\n        Once you've found when the function is <Latex expression={`>`} /> or <Latex expression={`<`} /> 0, how can we structure that in the piecewise format?\r\n      </div>\r\n      <div>\r\n        Remember we need to make the whole function negative for points where the function is <Latex expression={`<`} /> 0.\r\n      </div>\r\n    </>\r\n\r\n  ]\r\n\r\n  return { title, question, type: 'mc', input: shuffleArray(options), hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 6) {\r\n    q = piecewiseToLimit();\r\n  } else {\r\n    q = absValueToPiecewise()\r\n  }\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion;","import * as math from \"mathjs\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { getPolynomialFunction } from \"../../../helpers/expression-generators\";\r\nimport { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, nerdamerFormatToLatex, sortPolynomialByDegree } from \"../../../helpers/functions\"; \r\nimport React from \"react\"\r\nimport { Question } from \"../../../types/Question\"\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n// helpful constants for trig questions\r\nconst normalTrig = [\"sin(x)\", \"cos(x)\"]\r\nconst otherTrig = [[\"csc(x)\", \"sec(x)\"], [\"cot(x)\", \"tan(x)\"]]\r\nconst xvals = [[\"0\", \"pi\"], [\"pi/2\", \"3pi/2\"]];\r\n\r\n/**\r\n * generates random 0/0 limit question involving factoring and removing roots.\r\n * @returns relevant question components\r\n */\r\nconst limitByFactoring = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and both top and bottom aren't 0\r\n  while (bottomFactor === topFactor || (topValue === 0 && topValue === bottomValue)) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  // find numerator and denominator for limit function\r\n  let numerator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string = \r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  // evaluate ans\r\n  let ans: any = 0;\r\n  let radical = getRandomNumber(0, 1);\r\n  let modified: any = null;\r\n  if (radical) {\r\n    const numeratorWithRoot: number = \r\n      getRandomNumber(0, 1); // 0 if numerator has root, 1 if denominator\r\n\r\n    // add root to either numerator or denominator\r\n    if (numeratorWithRoot) {\r\n      modified = modifyToMakeRoot(numerator, holeX)\r\n      numerator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})/((${bottomFactor})(sqrt(${modified.root}) - (${modified.b})))`,\r\n        { x: holeX });\r\n    } else {\r\n      modified = modifyToMakeRoot(denominator, holeX)\r\n      denominator = formatPolynomialToLatex(`sqrt(${modified.root})${modified.b}`)\r\n      ans = math.simplify( // evaluate ans\r\n        `(${topFactor})(sqrt(${modified.root}) - (${modified.b}))/(${bottomFactor})`,\r\n        { x: holeX });\r\n    }\r\n\r\n    // fix ans if it should be dne\r\n    ans = (ans.toString() === \"Infinity\" || ans.toString() === \"-Infinity\") \r\n      ? \"dne\" : ans.toString();\r\n  } else {\r\n    if (topValue === 0) {\r\n      ans = 0;\r\n    } else if (bottomValue === 0) {\r\n      ans = 'dne'\r\n    } else {\r\n      ans = math.simplify(`(${topFactor})/${bottomValue}`, { x: holeX }).toString();\r\n    }\r\n\r\n    numerator = nerdamer(numerator).toTeX().replaceAll(`\\\\cdot`, '')\r\n    denominator = nerdamer(denominator).toTeX().replaceAll(`\\\\cdot`, '')\r\n  }\r\n\r\n  const expression: string = \r\n    `\\\\lim_{x \\\\to ${holeX}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (radical) {\r\n    hints.push(\r\n      <div>\r\n        This is a question with a radical, so the first thing we should do is get rid of the radical! We can rewrite the radical as <Latex expression={`${formatPolynomialToLatex(`sqrt(${modified.root})`)} + (${formatPolynomialToLatex(`${modified.b}`)})`} />, which gives us an expression in the form <Latex expression={`a + b`} />\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`(a + b)(a - b) = a^2 - b^2`} />? We can multiply top and bottom by <Latex expression={`(a - b)`} />, and that will remove the radical!\r\n      </div>\r\n    )\r\n    hints.push(\r\n      <div>\r\n        Try evaluating the limit again. Do you still get <Latex expression={`\\\\frac{0}{0}`} />?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      That's ok! There is a hole in the function that we need to remove. The next logical step is to factor both the top and bottom of the fraction.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      You should see where the hole is coming from now! Cancel these factors, and now try evaluating the limit. What do you get now?\r\n    </div>\r\n  )\r\n\r\n  return { type: 'math', ans, nextToInput, hints }\r\n}\r\n\r\n/**\r\n * generates 0/0 limit problems involving trig functions. User is asked to evaluate limit.\r\n * @returns relevant question components\r\n */\r\nconst limitByTrig = (): any => {\r\n  const topVar: number = getRandomNumber(0, 1); // what the top is (cos^2x or sin^2x)\r\n  const bottomVar: number = !topVar ? 1 : 0;\r\n  const toExpand: number = getRandomNumber(0, 1); // whether top should be in 1 - form or trig^2\r\n  let ans: any = 0;\r\n  let numerator: string = \"\";\r\n\r\n  const plus = getRandomNumber(0, 1); // whether factor is 1 + [trig] or 1 - trig\r\n  let denominator: string = `1 ${plus ? '+' : '-'} ${normalTrig[bottomVar]}`\r\n\r\n  // decide xval so top/bottom are 0/0\r\n  let xVal: string = math.parse(xvals[topVar][plus]).toTex(); \r\n\r\n  // constants to multiply by\r\n  const nconstant = getRandomWithExclusions(-4, 4, [0]);\r\n  const dconstant = getRandomWithExclusions(-4, 4, [0]);\r\n\r\n  let toMultiply: number;\r\n  let first: string;\r\n  if (toExpand) { // numerator will be 1 - bottomVar^2\r\n    toMultiply = getRandomNumber(0, 1); // multiply inverses or tans\r\n    first = otherTrig[toMultiply][bottomVar] // pick something that cancels with bottomvar\r\n    if (toMultiply) { // multiplying tans\r\n      numerator = `(${makeSquaredForLatex(first)} - \r\n      ${makeSquaredForLatex(normalTrig[topVar])})`;\r\n      ans = 0;\r\n    } else {\r\n      numerator = `(${makeSquaredForLatex(first)} - 1)`;\r\n      ans = 2;\r\n    }\r\n  } else {\r\n    numerator = `${makeSquaredForLatex(normalTrig[topVar])}` // no change as top will be trig^2\r\n    ans = 2\r\n  }\r\n\r\n  // format numerator/denominator\r\n  numerator = nerdamer(`${nconstant}(${numerator})`).expand();\r\n  numerator = nerdamerFormatToLatex(numerator);\r\n  denominator = nerdamer(`${dconstant}(${denominator})`).expand();\r\n  denominator = nerdamerFormatToLatex(denominator);\r\n\r\n  // fix ans\r\n  ans = math.simplify(`${nconstant}(${ans})/${dconstant}`).toString()\r\n\r\n  const expression: string = `\\\\lim_{x \\\\to ${xVal}} \r\n  \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput: React.JSX.Element =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  // generate hints\r\n  const hints: React.JSX.Element[] = [\r\n    <div>\r\n      First, evaluate the limit: <Latex expression={expression} /> with direct substitution. Do you get <Latex expression={`\\\\frac{0}{0}`} /> ?\r\n    </div>\r\n  ]\r\n\r\n  if (toExpand) {\r\n    hints.push(\r\n      <div>\r\n        Try factoring out <Latex expression={nerdamerFormatToLatex(makeSquaredForLatex(first))} /> on the top.\r\n      </div>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <div>\r\n        Remember <Latex expression={`sin^2(x) + cos^2(x) = 1`} />? How can we use that to rewrite the top?\r\n      </div>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      Can you factor the numerator now, and cancel a factor from top and bottom? Once you do that, try evaluating the limit again!\r\n    </div>\r\n  )\r\n\r\n  return { nextToInput, type: 'math', ans, hints }\r\n}\r\n\r\nconst limitByTrigSpecialCases = (): any => {\r\n  const numeratorDegree: number = getRandomNumber(0, 3); // total degree for numerator\r\n  const hints: React.JSX.Element[] = []\r\n\r\n  // initialization\r\n  let numerator: string = \"1\"; \r\n  let denominator: string = \"1\";\r\n  let ans = \"dne\";\r\n\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let denDegree = numeratorDegree;\r\n  \r\n  // generate random denominator degree occasionally\r\n  const same = getRandomNumber(0, 9); // whether degree is the same\r\n  if (numeratorDegree === 0 || same < 1) { \r\n    denDegree = getRandomNumber(1, 3);\r\n  }\r\n\r\n  hints.push(\r\n    <div>\r\n      <div>\r\n        Evaluating this with direct substitution, we get <Latex expression={`\\\\frac{0}{0}`} />. However, this doesn't look like factoring or rationalization. What is another technique that we learned?\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      Remember <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1?`} display={true} />\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      In order to use these, rememember that the <Latex expression={`x`} /> in the equations can be anything. Also rememember that we can manipulate the fractions to apply these limits.\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      For example, we can multiply the fraction by <Latex expression={`\\\\frac{x}{x}`} /> or <Latex expression={`\\\\frac{2}{2}`} /> to try to fit the formulas we have!\r\n    </div>\r\n  )\r\n\r\n  hints.push(\r\n    <div>\r\n      After simplifying the whole thing, what is left? If there is still an expression left, try using direct substitution, and see if it still gives <Latex expression={`\\\\frac{0}{0}`} />. If not, you should have an answer! Otherwise, keep simplifying. \r\n    </div>\r\n  )\r\n\r\n  // generate terms based on degree\r\n  let obj = generateSpecialTrig(numeratorDegree, multipliedAns, false)\r\n  numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(denDegree, multipliedAns, true)\r\n  denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  // decide ans\r\n  if (denDegree < numeratorDegree) {\r\n    ans = \"0\"\r\n  } else if (denDegree > numeratorDegree) {\r\n    ans = \"dne\"\r\n  } else {\r\n    multipliedAns = \"(\" + multipliedAns + \")\"\r\n    ans = math.simplify(multipliedAns).toString()\r\n  }\r\n\r\n  const expression = `\\\\lim_{x \\\\to ${0}}\\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right)`\r\n\r\n  const nextToInput =\r\n    <Latex expression={`${expression} = `} display={true} />\r\n\r\n  return { ans, type: 'math', nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10);\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = limitByFactoring();\r\n  } else if (rand <= 9) {\r\n    q = limitByTrigSpecialCases();\r\n  } else {\r\n    q = limitByTrig()\r\n  }\r\n\r\n  // set title and question as they are the same for everything\r\n  q.title = <></>\r\n  q.question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Enter \"dne\" if the limit doesn't exist</div>\r\n  </div>\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * Generates one side of the fraction in trig limit problem involving sinx/x, x/sinx, (1 - cos x)/x\r\n * @param {number} degree of side (ex. 3 could mean x^2 sin x)\r\n * @param {string} multipliedAns used to keep trace of the current answer in generation process\r\n * @param {boolean} denominator whether we are generating a denminator (important since we can't have (1 - cos x) in the denominator and denominator will have 1 trig term or 1 poly term and at least another trig term)\r\n * @returns generated term and updated multipliedAns\r\n */\r\nconst generateSpecialTrig = \r\n  (degree: number, multipliedAns: string, denominator: boolean): any => {\r\n  let term = \"1\"; // initialize term\r\n  let exclusions = []; // coeffs that have already been used\r\n\r\n  // iterate over degree\r\n  for (let i = 0; i < degree;) {\r\n    // while we are less than degree, generate random term\r\n    const trig = getRandomNumber(0, 9) > 7 || i > 0; // whether term is poly or trig\r\n    const exp = getRandomNumber(1, denominator ? degree - i - 1 : degree - i) // exp of term\r\n    const expText = exp > 1 ? `^${exp}` : \"\";\r\n\r\n    // coeff of x in term, ex. 3 in sin(3x)\r\n    const coeff = getRandomWithExclusions(1, 4, exclusions); \r\n    const coeffText = coeff !== 1 ? coeff : \"\";\r\n\r\n    exclusions.push(coeff); // update coeff exclusions\r\n\r\n    if (trig === true) {\r\n      // update ans\r\n      const add = `(${Math.pow(coeff, exp)})`\r\n      multipliedAns = (denominator ? multipliedAns + add : add + multipliedAns)\r\n\r\n      // term to generate\r\n      if (getRandomNumber(0, 1) === 0 || denominator) {\r\n        term += `\\\\sin${expText}(${coeffText}x)`\r\n      } else {\r\n        term += `(1 - \\\\cos(${coeffText}x))${expText}`\r\n      }\r\n    } else {\r\n      // poly term\r\n      multipliedAns = denominator ? multipliedAns + `(${coeff})` : `(${coeff})` + multipliedAns \r\n      term += `${coeffText}x${expText}`\r\n    }\r\n    // increment i by degree that we added\r\n    i += exp;\r\n  }\r\n\r\n  // remove beginning 1 from term\r\n  if (term.length > 1) {\r\n    term = term.substring(1)\r\n  }\r\n  return { term, multipliedAns }\r\n}\r\n\r\n/**\r\n * @param {String} trigFunction like \"sin(x)\"\r\n * @returns squared notation, ex. sin^2(x)\r\n */\r\nconst makeSquaredForLatex = (trigFunction: string): string => {\r\n  return `${trigFunction.substring(0, 3)}^2${trigFunction.substring(3)}`\r\n}\r\n\r\n/**\r\n * @param {String} expression to modify\r\n * @param {Number} x value at which root should be 0\r\n * @returns object containing both root and b value in (a - b)\r\n */\r\nconst modifyToMakeRoot = (expression: string, x: number): any => {\r\n  // generate random linear function\r\n  let b: string = \r\n    sortPolynomialByDegree(nerdamer(getPolynomialFunction(getRandomNumber(0, 1))).expand())\r\n\r\n  // make b negative to ensure root evaluates to 0\r\n  if (math.evaluate(b, { x }) > 0) {\r\n    b = sortPolynomialByDegree(nerdamer(`-1(${b})`).expand())\r\n  }\r\n\r\n  const node = math.simplify(`${expression} + (${b})^2`); // evaluate node\r\n  return {\r\n    root: sortPolynomialByDegree(nerdamer(`(${node.toString()})`).expand()), // expand and format\r\n    b: b.charAt(0) !== '-' ? `+${b}` : b\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion","import g02 from \"../02-evaluating-limits-using-graphs/generate-question\";\r\nimport g03 from \"../03-estimating-limits-using-tables/generate-question\";\r\nimport g04 from \"../04-evaluating-limits-using-algebraic-properties/generate-question\";\r\nimport g05 from \"../05-evaluating-limits-using-direct-substitution/generate-question\";\r\nimport g06 from \"../06-evaluating-limits-using-algebraic-manipulation/generate-question\";\r\nimport { getRandomNumber } from \"../../../helpers/functions\";\r\nimport { Question } from \"../../../types/Question\";\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  const rand = getRandomNumber(1, 10);\r\n  let q: Question = null;\r\n  if (rand <= 1) {\r\n    q = g02();\r\n  } else if (rand <= 2) {\r\n    q = g03();\r\n  } else if (rand <= 4) {\r\n    q = g04();\r\n  } else if (rand <= 7) {\r\n    q = g05();\r\n  } else {\r\n    q = g06();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","FunctionTable","xTitle","yTitle","data","tableRef","_useState","useState","_useState2","_slicedToArray","setWidth","originalWidthRef","windowWidth","useWindowSize","_useState3","_useState4","display","setDisplay","element","resizeObserver","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","entry","value","target","contentRect","err","e","f","observe","unobserve","disconnect","className","children","_jsxs","concat","Latex","expression","map","Piecewise","title","setExpression","domain","_Fragment","rand","getRandomNumber","q","horizShift","verticalShift","getRandomWithExclusions","node","math","evaluate","min","max","includeLeft","includeRight","leftArrow","rightArrow","classes","leftCircle","rightCircle","question","inline","FunctionGraph","GRAPH_SIZE","nextToInput","ans","type","hints","oscillatingGraphQuestion","randomNumbers","xValues","num","Math","abs","sort","a","b","curr","val","AsymptoticGraph","asymptoticGraphQuestion","numFunctions","exclusions","push","possibleXs","_loop","undefined","generateRandomPolynomialWithPoint","midx","round","points","fitPointsToQuadratic","qX","sign","currVal","String","signText","jumpGraphQuestion","document","documentElement","setProperty","COLORS","nerdamer","require","fixRounding","degree","floor","xVal","startX","endX","increasing","Boolean","orderedValues","generateOrderedValues","generateLimitTableData","tableToLimit","factor1","getStringFactorFromXval","factor2","factor3","numerator","sortPolynomialByDegree","expand","equation","latexEq","toTeX","replaceAll","data1","data2","option1","component","correct","option2","input","shuffleArray","functionToTable","LimitPropertyRules","tableValues","table","graphFunction","graph","generateLimitPropertyTerm","convertArrayToObject","toTex","parenthesis","limitPropertyQuestion","mathFs","yValues","includes","yVal","match","getPolynomialFunctionWithPoint","f1","f2","piecewiseToLimit","x1","xvalues","neg","expanded","negExpanded","piecewise1","piecewise2","piecewise3","options","absValueToPiecewise","normalTrig","otherTrig","xvals","generateSpecialTrig","multipliedAns","denominator","term","trig","exp","expText","coeff","coeffText","add","pow","substring","makeSquaredForLatex","trigFunction","modifyToMakeRoot","getPolynomialFunction","root","toString","charAt","holeX","holeFactor","topFactor","bottomFactor","topValue","bottomValue","radical","modified","formatPolynomialToLatex","limitByFactoring","numeratorDegree","denDegree","same","obj","limitByTrigSpecialCases","toMultiply","first","topVar","bottomVar","toExpand","plus","nconstant","dconstant","nerdamerFormatToLatex","limitByTrig","g02","g03","g04","g05","g06"],"sourceRoot":""}