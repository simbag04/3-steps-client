{"version":3,"file":"static/js/358.f0d3b806.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/12-removing-discontinuities/generate-question.tsx"],"sourcesContent":["/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { buildPolynomialFromCoeffs, formatPolynomialToLatex, getCoeffsOfPolynomial, getRandomNumber } from \"../../../helpers/functions\";\r\nimport { getStringFactorFromXval, sortPolynomialByDegree, getRandomWithExclusions, generateOrderedValues } from \"../../../helpers/functions\";\r\nimport { getPolynomialFunction, generateSpecialTrig, getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\"\r\nimport * as math from \"mathjs\"\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport React from \"react\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\nimport { LEFT_LIMIT, RIGHT_LIMIT } from \"../../../helpers/constants\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst factoringFunctionValueDiscontinuity = () => {\r\n  const holeX: number = getRandomNumber(-5, 5); // xvalue to ask about\r\n  const holeFactor: string = getStringFactorFromXval(holeX); // xval hole factor\r\n\r\n  // generate the other factor(s) on top and bottom\r\n  let topFactor: string = getRandomNumber(0, 1) === 0 ? getPolynomialFunction(1) : \"1\";\r\n  let bottomFactor: string = topFactor;\r\n\r\n  // evaluate values for top and bottom factor\r\n  const topValue: number = math.evaluate(topFactor, { x: holeX });\r\n  let bottomValue: number = math.evaluate(bottomFactor, { x: holeX });\r\n\r\n  // make sure bottom factor is different from top factor and bottom isn't 0 as we dont want dne\r\n  while (bottomFactor === topFactor || bottomValue === 0) {\r\n    bottomFactor = (getRandomNumber(0, 1) === 0 || topFactor === \"1\") ? getPolynomialFunction(1) : \"1\";\r\n    bottomValue = math.evaluate(bottomFactor, { x: holeX });\r\n  }\r\n\r\n  let numerator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${topFactor})`).expand());\r\n  let denominator: string =\r\n    sortPolynomialByDegree(nerdamer(`${holeFactor}(${bottomFactor})`).expand());\r\n\r\n  const ans = math.simplify(`(${topValue})/${bottomValue}`, { x: holeX }).toString();\r\n\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq ${holeX}`\r\n    },\r\n    {\r\n      f: `b`,\r\n      domain: `x = ${holeX}`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Remember limits are about a function is <strong>approaching</strong>, not necessarily the function value at a point.\r\n      </div>\r\n      <div>\r\n        Thus, use the top equation to find <Latex expression={`\\\\lim_{x \\\\to ${holeX}} f(x)`} />.\r\n      </div>\r\n      <div>\r\n        You will need to factor the top and bottom and cancel a factor to find the correct limit.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        You should have gotten:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${holeX}} \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right) = ${math.parse(ans).toTex()}`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Now, you need <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${holeX}} f(x) = f(${holeX})`} />\r\n      </div>\r\n      <div>\r\n        This means that:\r\n      </div>\r\n      <div>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${holeX}} f(x) = ${math.parse(ans).toTex()} = f(${holeX}) = b`} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Thus, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  ]\r\n  const nextToInput = <Latex expression={`b = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"b\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${holeX}`} />?</h3>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst trigFunctionValueDiscontinuity = () => {\r\n  const degree = getRandomNumber(1, 3)\r\n  let multipliedAns = \"1)/(1\"; // expanded ans based on coeffs of problem\r\n  let obj = generateSpecialTrig(degree, multipliedAns, false)\r\n  let numerator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  obj = generateSpecialTrig(degree, multipliedAns, true)\r\n  let denominator = obj.term\r\n  multipliedAns = obj.multipliedAns\r\n\r\n  multipliedAns = \"(\" + multipliedAns + \")\"\r\n  const ans = math.simplify(multipliedAns).toString()\r\n  const piecewise: PiecewiseFunction[] = [\r\n    {\r\n      f: `\\\\frac{${numerator}}{${denominator}}`,\r\n      domain: `x \\\\neq 0`\r\n    },\r\n    {\r\n      f: `b`,\r\n      domain: `x = 0`\r\n    }\r\n  ]\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Remember limits are about a function is <strong>approaching</strong>, not necessarily the function value at a point.\r\n      </div>\r\n      <div>\r\n        Thus, use the top equation to find <Latex expression={`\\\\lim_{x \\\\to ${0}} f(x)`} />.\r\n      </div>\r\n      <div>\r\n        You will need to use the following special trig limits to find the correct limit:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{x}{\\\\sin x} = 1, \\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 1`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        You should have gotten:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${0}} \\\\left(\\\\frac{${numerator}}{${denominator}}\\\\right) = ${math.parse(ans).toTex()}`} display={true} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Now, you need <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${0}} f(x) = f(${0})`} />\r\n      </div>\r\n      <div>\r\n        This means that:\r\n      </div>\r\n      <div>\r\n        <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${0}} f(x) = ${math.parse(ans).toTex()} = f(${0}) = b`} />\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Thus, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  const nextToInput = <Latex expression={`b = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h4>For what value of <Latex expression=\"b\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = 0`} />?</h4>\r\n    <Piecewise classes=\"large-font\" title=\"f(x)\" functions={piecewise} display={true}></Piecewise>\r\n  </>\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst limitDiscontinuity = () => {\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const numFunctions = getRandomNumber(0, 10) <= 6 ? 1 : 2\r\n  const xValues = generateOrderedValues(numFunctions, true, -3, 2); // random xvalues\r\n  let yValues = []; // array for random y values\r\n  let xIndex = getRandomNumber(0, xValues.length - 1); // index of x val to ask about \r\n\r\n  // ensure xval isn't 0\r\n  if (xValues[xIndex] === 0) {\r\n    if (xValues.length === 1) {\r\n      xValues[0] = getRandomWithExclusions(-3, 3, [0])\r\n    } else {\r\n      xIndex = getRandomWithExclusions(0, xValues.length - 1, [xIndex])\r\n    }\r\n  }\r\n  const x = xValues[xIndex] // actual x val to ask about\r\n\r\n  // generate y values\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    yValues.push(getRandomNumber(-7, 7))\r\n  }\r\n\r\n  // whether there is a separate value at the function\r\n  const separateFunctionVal = (numFunctions === 1) ? getRandomNumber(0, 10) <= 6 : false\r\n  // 0: ask left limit, 1: ask right limit, 2: ask about function val\r\n  const continuous = separateFunctionVal ? getRandomNumber(0, 2) : getRandomNumber(0, 1)\r\n  let includes = xIndex === 0 && separateFunctionVal ? 0 : getRandomNumber(0, 1); // whether current xval is included in domain - don't include if there is a separate function value\r\n  let ans;\r\n  const fsToUse = []\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n    let addF = false\r\n    let simplifiedF = ''\r\n\r\n    // add number at function\r\n    if (i - 1 === xIndex && separateFunctionVal) {\r\n      const y = continuous !== 2 ? String(yValues[xIndex]) : `b`\r\n      functions.push({ f: y, domain: `x = ${x}` })\r\n      includes = 1 // don't include xval in next function\r\n      if (continuous === 2) {\r\n        ans = yValues[xIndex]\r\n      }\r\n      fsToUse.push({ type: 1, f: y, value: y, replaced: false })\r\n\r\n    }\r\n\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n      addF = includes && i === xIndex\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = yValues[i - 1]\r\n      addF = !includes && i - 1 === xIndex\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      addF = i - 1 === xIndex && !includes\r\n      includes = xIndex === i && separateFunctionVal ? 0 : getRandomNumber(0, 1);\r\n      addF = addF || (includes && xIndex === i)\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      xVal = xValues[xIndex];\r\n      yVal = yValues[xIndex];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal, yVal, true);\r\n    f = math.simplifyCore(f).toString().replaceAll(' * ', '') // simplify f before finding coeffs\r\n\r\n    // replace coefficient if this is the correct function to change\r\n    if (continuous !== 2 && continuous + xIndex === i) {\r\n      const obj = replaceCoefficientWithVar(f, xVal)\r\n      f = obj.f\r\n      ans = obj.ans\r\n      simplifiedF = obj.simplified\r\n    }\r\n\r\n    // format f\r\n    const replaced = f.includes('x')\r\n    const bFunction = f.includes('b')\r\n    let newf = f.replaceAll('x', `(${xVal})`)\r\n    newf = newf.replaceAll('b', `(${ans})`)\r\n    f = formatPolynomialToLatex(f).replaceAll(`\\\\mathrm`, '');\r\n    functions.push({ f, domain });\r\n\r\n    if (addF) {\r\n      fsToUse.push({ type: 1, f: newf, value: yVal, simplified: bFunction ? simplifiedF : yVal, replaced })\r\n    }\r\n\r\n    if (i === xIndex || i - 1 === xIndex) {\r\n      fsToUse.push({ type: i === xIndex ? 0 : 2, f, value: yVal, simplified: bFunction ? simplifiedF : yVal })\r\n    }\r\n  }\r\n\r\n  fsToUse.sort((a, b) => a.type - b.type)\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        In order to determine if <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}} f(x)`} /> <strong>exists</strong>, we need <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}${LEFT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}${RIGHT_LIMIT}} f(x)`} />.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        We can evaluate:\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${x}${LEFT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}} \\\\left(${fsToUse[0].f}\\\\right) = ${fsToUse[0].simplified}`} display={true} />\r\n      </div>\r\n      <div>\r\n        <Latex expression={`\\\\lim_{x \\\\to ${x}${RIGHT_LIMIT}} f(x) = \\\\lim_{x \\\\to ${x}} \\\\left(${fsToUse[2].f}\\\\right) = ${fsToUse[2].simplified}`} display={true} />\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  if (continuous !== 2) {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Since both limits need to be equal, we have:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`${fsToUse[0].simplified} = ${fsToUse[2].simplified}`} display={true} />\r\n          {fsToUse[0].simplified.length > 1 || fsToUse[2].simplified.length > 1 ?\r\n            <Latex expression={`b = ${ans}`} display={true} /> : null}\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Now, we need to verify <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}} f(x) = f(${x})`} />{separateFunctionVal ? '' : <> with this value of <Latex expression=\"b\" /></>}:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`f(${x}) = ${fsToUse[1].f}\r\n          ${fsToUse[1].replaced ? `= ${fsToUse[1].value}` : ''} = \\\\lim_{x \\\\to ${x}} f(x)`} display={true} />\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          When <Latex expression={`b = ${ans}`} />, both conditions of continuity are satisfied!\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          The limits equal each other, so the first condition is satisfied. Now, we just need <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}} f(x) = f(${x})`} />:\r\n        </div>\r\n        <div>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x) = ${fsToUse[0].value} = f(${x}) = b`} display={true} />\r\n          <Latex expression={`b = ${ans}`} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  hints.push(\r\n    <>\r\n      <div>\r\n        Thus, the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {ans}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n  const nextToInput = <Latex expression={`b = `} display={true} />\r\n  const title = <></>\r\n  const question = <>\r\n    <h3>For what value of <Latex expression=\"b\" /> will <Latex expression=\"f(x)\" /> be continuous at <Latex expression={`x = ${x}`} />?</h3>\r\n    <Piecewise title=\"f(x)\" functions={functions} display={true}></Piecewise>\r\n  </>\r\n\r\n  return { title, question, nextToInput, ans, hints, type: 'math' }\r\n}\r\n\r\nconst replaceCoefficientWithVar = (f: string, xval: number) => {\r\n  const coeffs: any[] = getCoeffsOfPolynomial(f)\r\n  let toChange = getRandomNumber(0, coeffs.length - 1)\r\n\r\n  // ensure a value isn't 0\r\n  while (coeffs[toChange] === 0) {\r\n    toChange = getRandomNumber(0, coeffs.length - 1)\r\n  }\r\n\r\n  const oldAns = coeffs[toChange]\r\n  coeffs[toChange] = 'b'\r\n\r\n  // find simplified version\r\n  let total = 0\r\n  let simplified = ''\r\n  for (let i = 0; i < coeffs.length; i++) {\r\n    if (coeffs[i] === 'b') {\r\n      const bcoeff = xval ** i\r\n      simplified += `${bcoeff === 1 ? 'b' : bcoeff === -1 ? '-b' : `${bcoeff}b`}`\r\n    } else {\r\n      total += coeffs[i] * (xval ** i)\r\n    }\r\n  }\r\n  simplified += `${total > 0 ? `+${total}` : total < 0 ? `${total}` : ''}`\r\n\r\n  return { ans: oldAns, f: buildPolynomialFromCoeffs(coeffs), simplified }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  const rand = 8 // getRandomNumber(0, 9)\r\n  if (rand <= 1) {\r\n    return factoringFunctionValueDiscontinuity()\r\n  } else if (rand <= 3) {\r\n    return trigFunctionValueDiscontinuity()\r\n  } else {\r\n    return limitDiscontinuity()\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","expression","setExpression","useState","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","require","replaceCoefficientWithVar","xval","coeffs","getCoeffsOfPolynomial","toChange","getRandomNumber","oldAns","total","simplified","bcoeff","ans","buildPolynomialFromCoeffs","generateRandomQuestion","limitDiscontinuity","numFunctions","xValues","generateOrderedValues","yValues","xIndex","getRandomWithExclusions","x","push","separateFunctionVal","continuous","includes","fsToUse","xVal","yVal","addF","simplifiedF","y","String","type","value","replaced","degree","Math","abs","getPolynomialFunctionWithPoint","math","toString","replaceAll","obj","bFunction","newf","formatPolynomialToLatex","sort","a","b","hints","_jsxs","className","LEFT_LIMIT","RIGHT_LIMIT","nextToInput","question"],"sourceRoot":""}