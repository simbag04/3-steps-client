{"version":3,"file":"static/js/871.f338ba3a.chunk.js","mappings":"+KAiBO,MAAMA,EAA8CC,IAA+B,IAA9B,OAAEC,EAAM,OAAEC,EAAM,KAAEC,GAAMH,EAClF,MAAMI,GAAWC,EAAAA,EAAAA,QAAO,OACjBC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAC7BC,GAAmBJ,EAAAA,EAAAA,QAAO,MAC1BK,GAAcC,EAAAA,EAAAA,KAAgB,IAC7BC,EAASC,IAAcL,EAAAA,EAAAA,UAAS,cAmCvC,OAhCAM,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAUX,EAASY,QACzB,IAAKD,EAAS,OAEd,MAAME,EAAiB,IAAIC,gBAAeC,IACxC,IAAK,MAAMC,KAASD,EACdC,EAAMC,SAAWN,IACH,eAAZH,IACFH,EAAiBO,QAAUI,EAAME,YAAYhB,OAE/CC,EAASa,EAAME,YAAYhB,OAE/B,IAKF,OAFAW,EAAeM,QAAQR,GAEhB,KACLE,EAAeO,UAAUT,GACzBE,EAAeQ,YAAY,CAC5B,GACA,CAACrB,EAAUM,EAAaE,KAG3BE,EAAAA,EAAAA,YAAU,KACJR,EAAQ,GAAMI,EAChBG,EAAW,YACFJ,GAAoBA,EAAiBO,SAAWP,EAAiBO,QAAU,GAAMN,GAC1FG,EAAW,aACb,GACC,CAACP,EAAOI,KAGTgB,EAAAA,EAAAA,KAAA,SAAOC,IAAKvB,EAAUwB,UAAS,iBAAmBC,UAChDC,EAAAA,EAAAA,MAAA,SAAOF,UAAS,QAAAG,OAAUnB,GAAUiB,SAAA,EAElCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAAG,UAAIH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAYhC,OACvByB,EAAAA,EAAAA,KAAA,MAAAG,UAAIH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAY/B,SAGxBC,EAAK+B,KAAI,CAACC,EAAGC,KAEVN,EAAAA,EAAAA,MAAA,MAAYF,UAAWQ,EAAI,IAAM,EAAI,gBAAkB,gBAAgBP,SAAA,EACrEH,EAAAA,EAAAA,KAAA,MAAAG,SAAKM,EAAEE,KACPX,EAAAA,EAAAA,KAAA,MAAAG,SAAKM,EAAEG,MAFAF,SAOT,C,uKCxEZ,MAAMG,EAAWC,EAAQ,OAOnBC,EAAgBC,IACpB,IAAK,IAAIN,EAAIM,EAAMC,OAAS,EAAGP,EAAI,EAAGA,IAAK,CACzC,MAAMQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYX,EAAI,KAGzCM,EAAMN,GAAIM,EAAME,IAAM,CAACF,EAAME,GAAIF,EAAMN,GAC1C,CACA,OAAOM,CAAK,EASRM,EAAkBA,CAACC,EAAaC,IAC7BL,KAAKC,MAAMD,KAAKE,UAAYG,EAAMD,EAAM,IAAMA,EAUjDE,EACJA,CAACF,EAAaC,EAAaE,KACzB,MAAMC,EAAc,GACpB,IAAK,IAAIjB,EAAIa,EAAKb,GAAKc,EAAKd,IACrBgB,EAAWE,SAASlB,IACvBiB,EAAYE,KAAKnB,GAIrB,GAA2B,IAAvBiB,EAAYV,OACd,OAAOO,EAIT,OAAOG,EADaL,EAAgB,EAAGK,EAAYV,OAAS,GAC7B,EAQ7Ba,EACJ,SAACC,EAAWC,GACgC,IADXC,EAAeC,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACjDE,EAAiBF,UAAAjB,OAAA,QAAAkB,IAAAD,UAAA,GAAAA,UAAA,GAAG,EACpB,GAAIH,GAAK,EACP,MAAO,GAGT,MAAMM,EAAS,CAAClB,KAAKC,MAAMD,KAAKE,SAAWY,GAAW,GAEtD,KAAOI,EAAOpB,OAASc,GAAG,CAExB,MAAMO,EAAWhB,EAAgB,EAAGc,IAAcJ,EAAa,GAAK,GAC9DO,EAAYF,EAAOA,EAAOpB,OAAS,GAAKqB,EAC9CD,EAAOR,KAAKU,EACd,CAEA,OAAOF,CACT,EAOIG,EAA0BC,IAE9B,MAAMC,EAAe7B,EAAS8B,OAAOF,EAAY,KACjD,IAAIG,EAAM,GACV,MAAMD,EAAS,GACfD,EAAaG,MAAK,SAAUC,GAC1BH,EAAOd,KAAKhB,EAASiC,GAAGC,WAC1B,IAGA,IAAK,IAAIrC,EAAIiC,EAAO1B,OAAS,EAAGP,GAAK,EAAGA,IACpB,MAAdiC,EAAOjC,KAGPA,IAAMiC,EAAO1B,OAAS,GACpB+B,OAAOL,EAAOjC,IAAM,IACtBkC,GAAO,MAIO,MAAdD,EAAOjC,IAA6B,MAAdiC,EAAOjC,IAAoB,IAANA,KAC7CkC,GAAqB,OAAdD,EAAOjC,GAAoB,IAANA,EAAU,KAAO,IAAMiC,EAAOjC,IAGxDA,EAAI,EACNkC,GAAG,KAAAvC,OAASK,GACG,IAANA,IACTkC,GAAO,MAGX,OAAOA,CAAG,EAQNK,EAA6BN,IACjC,IAAK,IAAIjC,EAAI,EAAGA,EAAIiC,EAAO1B,OAAQP,IACjCiC,EAAOjC,GAAKwC,OAAOP,EAAOjC,IAG5B,IAAIkC,EAAM,GACV,IAAK,IAAIlC,EAAIiC,EAAO1B,OAAS,EAAGP,GAAK,EAAGA,IACpB,MAAdiC,EAAOjC,KAGPA,IAAMiC,EAAO1B,OAAS,IACpB+B,OAAOG,MAAMH,OAAOL,EAAOjC,MAAQsC,OAAOL,EAAOjC,IAAM,KACzDkC,GAAO,MAIO,MAAdD,EAAOjC,IAA6B,MAAdiC,EAAOjC,IAAoB,IAANA,KAC7CkC,GAAqB,OAAdD,EAAOjC,GAAoB,IAANA,EAAU,KAAO,IAAMiC,EAAOjC,IAGxDA,EAAI,EACNkC,GAAG,KAAAvC,OAASK,GACG,IAANA,IACTkC,GAAO,MAGX,OAAOA,CAAG,EAQNQ,EAAyBX,IAC7B,MAAMC,EAAe7B,EAAS8B,OAAOF,EAAY,KAC3CE,EAAS,GAKf,OAJAD,EAAaG,MAAK,SAAUC,GAC1BH,EAAOd,KAAKmB,OAAOnC,EAASiC,GAAGC,YACjC,IAEOJ,CAAM,EASTU,EAAwBZ,IAC5B,MACMa,EADQzC,EAAS,SAADR,OAAUoC,EAAU,MACnBc,OAAOD,SACxBE,EAAKC,EAAiBH,EAAS,GAAGP,YAExC,MAAO,CAACS,OADmBrB,IAAhBmB,EAAS,GAAmBE,EAAKC,EAAiBH,EAAS,GAAGP,YAC1D,EAQXU,EAAoBC,GACjB7C,EAAS6C,GAAQC,KAAK,YAQzBC,EAA2BC,GAC3BA,EAAO,EACH,QAANxD,OAAec,KAAK2C,IAAID,GAAK,KACpBA,EAAO,EACV,QAANxD,OAAewD,EAAI,KAEb,MAQJE,EAAwB/C,IAC5B,MAAMgD,EAAM,CAAC,EACb,IAAK,IAAItD,EAAI,EAAGA,EAAIM,EAAMC,OAAQP,IAAK,CACrC,MAAMuD,EAAajD,EAAMN,GACzB,GAAIuD,EAAWC,eAAe,KAAM,CAElCF,EADYC,EAAc,GACfA,EAAkB,KAC/B,CACF,CACA,OAAOD,CAAG,EAQNG,EAAUA,CAACC,EAAWC,IAUlBD,EAAIC,EARZ,SAASC,EAAQ3D,EAAGC,GAClB,OAAU,IAANA,EACKD,EAEF2D,EAAQ1D,EAAGD,EAAIC,EACxB,CAGiB0D,CAAQF,EAAGC,GAUxBE,EACJA,CAACC,EAAcnC,EAAuBoC,EAAeC,KACnD,MAAM1C,EAAaK,EAAO,GAAKA,EAAO,IAAM,EACtC5D,EAAqB,GAE3B,IAAK,IAAIiC,EAAI+D,EAAO/D,GAAKgE,EAAKhE,IAAK,CACjC,MAAMiE,EAAMtC,EAAO3B,EAAI+D,GAGnB/D,IAAM8D,GAAQA,IAASC,IACzBhG,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,GAAKE,EAAG+D,GAAO3C,EAAa,IAAO,MACtDvD,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,IAAME,EAAG+D,GAAO3C,EAAa,KAAQ,OACxDvD,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,KAAOE,EAAG+D,GAAO3C,EAAa,MAAS,SAG5DvD,EAAKoD,KAAK,CAAElB,EAAGD,EAAGE,EAAG+D,IAGjBjE,IAAM8D,GAAQA,IAASE,IACzBjG,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,KAAOE,EAAG+D,GAAO3C,EAAa,MAAS,QAC1DvD,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,IAAME,EAAG+D,GAAO3C,EAAa,KAAQ,OACxDvD,EAAKoD,KAAK,CAAElB,EAAGD,EAAI,GAAKE,EAAG+D,GAAO3C,EAAa,IAAO,MAE1D,CAEA,MAAO,CAAEvD,OAAM,EAObmG,EAA2BnC,GACXoC,EAAAA,GAAkBpC,GAAYqC,QACvCC,WAAW,SAAU,IAAIA,WAAW,IAAK,IAOhDC,EAAyBzE,GACtBM,EAASN,GAAY0E,QAAQF,WAAW,SAAU,IAAIA,WAAW,IAAK,G,qHCvR/E,MAAMlE,EAAWC,EAAQ,OA4MnBoE,EAAcA,CAACP,EAAaQ,IACzBhE,KAAKC,MAAMuD,EAAMQ,EAAS,KAAgB,GAATA,GAG1C,EAtB+BC,KAG7B,IAAIC,EAAI,KAOR,OALEA,GAHW/D,EAAAA,EAAAA,IAAgB,EAAG,KAEpB,EArGOgE,MACnB,MAAMd,GAAOlD,EAAAA,EAAAA,KAAiB,EAAG,GAG3BiE,GAAOjE,EAAAA,EAAAA,IAAgB,EAAG,GAG1BkE,EAAShB,GAAkC,KAA1BlD,EAAAA,EAAAA,IAAgB,EAAG,GAAW,EAAI,GACnDmE,EAAOjB,GAAmC,KAA1BlD,EAAAA,EAAAA,IAAgB,EAAG,IAAYkD,IAASgB,EAAU,EAAI,GAEtExD,EAAa0D,SAAQpE,EAAAA,EAAAA,IAAgB,EAAG,IACxCqE,GAAgB7D,EAAAA,EAAAA,IAAsB2D,EAAOD,EAAS,EAAGxD,GAG/D,IAAIY,EAAMM,OAAOyC,EAAcnB,IAASgB,EAAS,EAAI,KAChDhB,IAASgB,GAAmB,IAATD,GACrBf,IAASiB,GAAiB,IAATF,IAChBf,IAASiB,GAAQjB,IAASgB,IAAoB,IAATD,KACvC3C,EAAM,OAGR,MAAM,KAAEnE,IAAS8F,EAAAA,EAAAA,IAAuBC,EAAMmB,EAAeH,EAAQC,GAG/DG,GAAQ5F,EAAAA,EAAAA,KAAA6F,EAAAA,SAAA,IAERC,EAAoB,IAATP,EAAU,eAA6B,IAATA,EAAU,kBACnDQ,GAAc3F,EAAAA,EAAAA,MAAA,QAAAD,SAAA,EAClBH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAAC0F,QAAQ,OAAOzF,WAAU,iBAAAF,OAAmBmE,EAAOsB,EAAQ,SAASG,QAAQ,IAAQ,QAGvFC,GAAW9F,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC/DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,wCACJH,EAAAA,EAAAA,KAAA,OAAAG,SAAK,uFAEPH,EAAAA,EAAAA,KAAC3B,EAAAA,EAAa,CAACE,OAAM,IAAOC,OAAM,OAAUC,KAAMA,OAK9C0H,EAAQ,EACZnG,EAAAA,EAAAA,KAAA6F,EAAAA,SAAA,CAAA1F,UACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,qCAC8BH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,MAAS,eAAaiE,EAAK,SAAgB,IAATe,GAAanF,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,CAAE,QAAIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,YAA4B,IAAToF,GAAanF,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,CAAE,QAAIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,cAAoBH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eAAoB,+CAkDnN,MA7CY,QAARyC,EACFuD,EAAMtE,MACJ7B,EAAAA,EAAAA,KAAA6F,EAAAA,SAAA,CAAA1F,UACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,mDAC4CH,EAAAA,EAAAA,KAAA,UAAAG,SAASqE,IAASgB,EAAS,QAAU,SAAgB,QAAIxF,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,OAAAF,OAASmE,KAAW,SAAMA,IAASiB,EAAO,YAAcjB,IAASiB,EAAO,WAAa,aAAa,kEAG/NrF,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAAG,SAAK,kCAGLH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,6BAA4BC,SAAC,YAMhDgG,EAAMtE,MACJzB,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,mBACcqE,IAASiB,GAAOrF,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,CAAE,QAAIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,YAAmBqE,IAASgB,GAASpF,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,CAAE,QAAIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,cAAoBH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,eAAoB,QAAIH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,OAAAF,OAASmE,KAAU,QAE5LxE,EAAAA,EAAAA,KAAA,OAAAG,SAAK,8CAIPC,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,gFACyEH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,gBAAqB,0DAE3GC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,mBACYH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAW,MAAM,iBAAaP,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,OAAAF,OAASmE,KAAW,gDAA2CxE,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAYqC,IAAO,WAGlKxC,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAAG,SAAK,kCAGLH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,6BAA4BC,SACxCyC,QAMF,CAAEgD,QAAOM,WAAUtD,MAAKwD,KAvDlB,OAuDwBL,cAAaI,QAAO,EAQnDb,GA7LgBe,MACtB,MAAMT,GAAQ5F,EAAAA,EAAAA,KAAA6F,EAAAA,SAAA,IAGRrB,GAAO/C,EAAAA,EAAAA,KAAyB,EAAG,EAAG,CAAC,IAGvC6E,GAAU1C,EAAAA,EAAAA,IAAwBY,GAClC+B,GAAU3C,EAAAA,EAAAA,KAAwBnC,EAAAA,EAAAA,KAAyB,EAAG,EAAG,CAAC,KAClE+E,EAAoC,KAA1BlF,EAAAA,EAAAA,IAAgB,EAAG,IACjCsC,EAAAA,EAAAA,KAAwBnC,EAAAA,EAAAA,KAAyB,EAAG,EAAG,CAAC,KAAO,GAG3DgF,GAAYjE,EAAAA,EAAAA,IAAuB3B,EAAS,GAADR,OAAIiG,GAAOjG,OAAGkG,GAAOlG,OAAGmG,IAAWE,UAC9EC,EAAQ,IAAAtG,OAAOoG,EAAS,MAAApG,OAAKiG,GAC7BM,EAAU/F,EAAS8F,GAAU1B,QAAQF,WAAW,WAAY,IAG5DmB,GAAW9F,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC/DC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,oEACJH,EAAAA,EAAAA,KAAA,OAAAG,SAAK,yDAEPH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,UAAAF,OAAYuG,GAAWZ,QAAS,aAAc9G,SAAS,OAGpE2H,EAAOhC,EAAAA,GAAW,GAADxE,OAAIkG,GAAOlG,OAAGmG,IAC/BM,EAAKnG,GAAckG,EAAKE,SAAS,CAAEpG,MAInCqG,EAAQ,GACd,IAAK,IAAItG,EAAI8D,EAAO,EAAG9D,GAAK8D,EAAO,EAAG9D,IACpCsG,EAAMnF,KAAK,CAAElB,EAAGD,EAAGE,EAAG4D,IAAS9D,EAAI,MAAQS,KAAK8F,MAAMH,EAAEpG,MAI1D,MAAMwG,EAAQ,GACd,IAAK,IAAIxG,EAAI8D,EAAO,EAAG9D,GAAK8D,EAAO,EAAG9D,IAChCA,IAAM8D,EACR0C,EAAMrF,KAAK,CAAElB,EAAGD,EAAGE,EAAGO,KAAK8F,MAAMH,EAAEpG,OAEnCwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,GAAKE,EAAGsE,EAAY4B,EAAEpG,EAAI,IAAM,MACpDwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,IAAME,EAAGsE,EAAY4B,EAAEpG,EAAI,KAAO,OACtDwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,KAAOE,EAAGsE,EAAY4B,EAAEpG,EAAI,MAAQ,OACxDwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAGE,EAAG,QACtBsG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,KAAOE,EAAGsE,EAAY4B,EAAEpG,EAAI,MAAQ,OACxDwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,IAAME,EAAGsE,EAAY4B,EAAEpG,EAAI,KAAO,OACtDwG,EAAMrF,KAAK,CAAElB,EAAGD,EAAI,GAAKE,EAAGsE,EAAY4B,EAAEpG,EAAI,IAAM,OAIxD,MAAMyG,EAAU,CACdC,WAAWpH,EAAAA,EAAAA,KAAC3B,EAAAA,EAAa,CAACE,OAAM,IAAOC,OAAM,OAAUC,KAAMuI,IAC7DK,SAAS,GAGLC,EAAU,CACdF,WAAWpH,EAAAA,EAAAA,KAAC3B,EAAAA,EAAa,CAACE,OAAM,IAAOC,OAAM,OAAUC,KAAMyI,IAC7DG,SAAS,GAyBX,MAAO,CAAEzB,QAAOM,WAAUqB,OAtBZxG,EAAAA,EAAAA,IAAa,CAACoG,EAASG,IAsBJlB,KArBpB,KAqB0BD,MAnBzB,EACZ/F,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,aACMH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAU,OAAAF,OAASmE,KAAU,kFAA8ExE,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAW,MAAM,cAErJH,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,kDAC2CH,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACC,WAAW,MAAM,iBAG1EH,EAAAA,EAAAA,MAAAyF,EAAAA,SAAA,CAAA1F,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAAG,SAAK,2EAGLH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,6BAA4BC,SACxCmH,EAAQF,gBAK+B,EA2GxCf,GAGChB,CAAC,C","sources":["components/content-components/tables/FunctionTable.tsx","helpers/functions.ts","topics/01-limits/03-estimating-limits-using-tables/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates Table of a funcion. Makes table vertical if screen is not wide enough\r\n */\r\n\r\nimport { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\nimport Latex from \"../../latex/Latex\";\r\nimport React from \"react\";\r\nimport { TableValue } from \"../../../@types/TableValue\";\r\n\r\ninterface FunctionTableProps {\r\n  xTitle: string, // title of x values\r\n  yTitle: string, // title of y values\r\n  data: TableValue[] // data to put in table\r\n}\r\n\r\nexport const FunctionTable: React.FC<FunctionTableProps> = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);// ref for table\r\n  const [width, setWidth] = useState(0); // current width of table\r\n  const originalWidthRef = useRef(null); // horizontal table width\r\n  const windowWidth = useWindowSize()[0]; // window size\r\n  const [display, setDisplay] = useState(\"horizontal\"); // whether table should be horiz or vert\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  // changes table display to vertical if needed\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        {/* Headers */}\r\n        <tr>\r\n          <th><Latex expression={xTitle} /></th>\r\n          <th><Latex expression={yTitle} /></th>\r\n        </tr>\r\n        {/* Data */}\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import * as math from \"mathjs\"\r\nimport { FunctionValue } from \"../@types/FunctionValue\";\r\nimport { TableValue } from \"../@types/TableValue\";\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * Shuffles an array\r\n * @param {array} array array to be shuffled\r\n * @returns shuffled array\r\n */\r\nconst shuffleArray = (array: Array<any>): Array<any> => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1)); // Generate a random index from 0 to i\r\n\r\n    // Swap elements at i and j\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * generates a random number\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @returns random number in the range [min, max]\r\n */\r\nconst getRandomNumber = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * generates a random number with exclusions\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @param {array} exclusions numbers to be excluded from generation\r\n * @returns random number in the range [min, max] excluding exclusions\r\n */\r\nconst getRandomWithExclusions =\r\n  (min: number, max: number, exclusions: Array<number>): number => {\r\n    const validValues = [];\r\n    for (let i = min; i <= max; i++) {\r\n      if (!exclusions.includes(i)) {\r\n        validValues.push(i);\r\n      }\r\n    }\r\n\r\n    if (validValues.length === 0) {\r\n      return max;\r\n    }\r\n\r\n    const randomIndex = getRandomNumber(0, validValues.length - 1);\r\n    return validValues[randomIndex];\r\n  }\r\n\r\n/**\r\n * @param {Number} n number of values to generate\r\n * @param {boolean} increasing true if values should be increasing, false if decreasing\r\n * @returns array of n ordered numbers \r\n */\r\nconst generateOrderedValues =\r\n  (n: number, increasing: boolean, extreme: number = 10,\r\n    increment: number = 4): Array<number> => {\r\n    if (n <= 0) {\r\n      return [];\r\n    }\r\n\r\n    const values = [Math.floor(Math.random() * extreme) + 1]; // Initialize with a random value\r\n\r\n    while (values.length < n) {\r\n      // generate a value greater than the last one\r\n      const nextDiff = getRandomNumber(1, increment) * (increasing ? 1 : -1);\r\n      const nextValue = values[values.length - 1] + nextDiff;\r\n      values.push(nextValue);\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n/**\r\n * \r\n * @param {String} polynomial string with a polynomial\r\n * @returns polynomial sorted in order of degree\r\n */\r\nconst sortPolynomialByDegree = (polynomial: string): string => {\r\n  // get coefficients with nerdamer\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  let ans = \"\";\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(nerdamer(e).toString());\r\n  })\r\n\r\n  // build expression\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Returns polynomial expression given coefficients of polynomial\r\n * @param coeffs to use in building polynomial\r\n * @returns expression\r\n */\r\nconst buildPolynomialFromCoeffs = (coeffs: any[]): string => {\r\n  for (let i = 0; i < coeffs.length; i++) {\r\n    coeffs[i] = String(coeffs[i])\r\n  }\r\n\r\n  let ans = ''\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number.isNaN(Number(coeffs[i])) || Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Extracts coefficients of polynomial in increasing order of degree\r\n * @param polynomial string with polynomial expression\r\n * @returns Coefficients of polynomial in increasing order of degree\r\n */\r\nconst getCoeffsOfPolynomial = (polynomial: string): number[] => {\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(Number(nerdamer(e).toString()));\r\n  })\r\n\r\n  return coeffs\r\n}\r\n\r\n/**\r\n * Finds roots of given polynomial expression (works only with polynomials of degree 2)\r\n * @param polynomial string wth polynomial expression to find roots\r\n * @returns vector of roots of polynomial as decimals\r\n * if there is only 1 root, it will return a vector of length 2 with both values the same root\r\n */\r\nconst getRootsOfPolynomial = (polynomial: string): string[] => {\r\n  const roots = nerdamer(`roots(${polynomial})`)\r\n  const elements = roots.symbol.elements\r\n  const r1 = convertToDecimal(elements[0].toString())\r\n  const r2 = elements[1] === undefined ? r1 : convertToDecimal(elements[1].toString())\r\n  return [r1, r2]\r\n}\r\n\r\n/**\r\n * converts provided number (potentially a fraction) to a decimal\r\n * @param number string of number to convert to decimal\r\n * @returns decimal equivalent of number\r\n */\r\nconst convertToDecimal = (number: string): string => {\r\n  return nerdamer(number).text(`decimals`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} xval xvalue from which to create factor\r\n * @returns String in form (x - p), where p is the xval\r\n */\r\nconst getStringFactorFromXval = (xval: number): string => {\r\n  if (xval < 0) {\r\n    return `(x + ${Math.abs(xval)})`\r\n  } else if (xval > 0) {\r\n    return `(x - ${xval})`\r\n  } else {\r\n    return `(x)`\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array where each element is in the form {f: String, value: Number}\r\n * @returns object with keys as all the f Strings, values as the value of that String\r\n */\r\nconst convertArrayToObject = (array: Array<FunctionValue>): FunctionValue => {\r\n  const obj = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    const currentObj = array[i];\r\n    if (currentObj.hasOwnProperty('f')) {\r\n      const key = currentObj['f'];\r\n      obj[key] = currentObj['value'];\r\n    }\r\n  }\r\n  return obj as FunctionValue;\r\n}\r\n\r\n/**\r\n * @param {Number} a \r\n * @param {Number} b \r\n * @returns least common multiple of a and b\r\n */\r\nconst findLCM = (a: number, b: number): number => {\r\n  // Calculate the greatest common divisor (GCD) using Euclidean algorithm\r\n  function findGCD(x, y) {\r\n    if (y === 0) {\r\n      return x;\r\n    }\r\n    return findGCD(y, x % y);\r\n  }\r\n\r\n  // LCM is the product of the two numbers divided by their GCD\r\n  return (a * b) / findGCD(a, b);\r\n}\r\n\r\n/**\r\n * @param {Number} xVal at which table will \"zoom in\"\r\n * @param {Array} values to use as yvalues in table\r\n * @param {Number} start of xs in table\r\n * @param {Number} end of xs in table\r\n * @returns data array containing x, y pairs for points that could be used in a limit table\r\n */\r\nconst generateLimitTableData =\r\n  (xVal: number, values: Array<number>, start: number, end: number): { data: TableValue[] } => {\r\n    const increasing = values[1] - values[0] >= 0;\r\n    const data: TableValue[] = [];\r\n    // build table data\r\n    for (let i = start; i <= end; i++) {\r\n      const val = values[i - start];\r\n\r\n      // zooming in to the left of xVal\r\n      if (i === xVal && xVal !== start) {\r\n        data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n        data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n        data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n      }\r\n\r\n      data.push({ x: i, y: val });  // other xvalues\r\n\r\n      // zooming in to the right of xval\r\n      if (i === xVal && xVal !== end) {\r\n        data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n        data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n        data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n      }\r\n    }\r\n\r\n    return { data }\r\n  }\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with mathjs\r\n */\r\nconst formatPolynomialToLatex = (polynomial: string): string => {\r\n  const str: String = math.simplifyCore(polynomial).toTex()\r\n  return str.replaceAll('\\\\cdot', '').replaceAll('~', '');\r\n}\r\n\r\n/**\r\n * @param {String} expression to format\r\n * @returns formatted latex polynomial formatted with nerdamer\r\n */\r\nconst nerdamerFormatToLatex = (expression: string): string => {\r\n  return nerdamer(expression).toTeX().replaceAll('\\\\cdot', '').replaceAll('~', '')\r\n}\r\n\r\nexport { getRandomNumber, getRandomWithExclusions, generateOrderedValues, shuffleArray, sortPolynomialByDegree, getStringFactorFromXval, convertArrayToObject, findLCM, generateLimitTableData, formatPolynomialToLatex, nerdamerFormatToLatex, getCoeffsOfPolynomial, getRootsOfPolynomial, convertToDecimal, buildPolynomialFromCoeffs }","import { generateLimitTableData, generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../../helpers/functions\";\r\nimport { FunctionTable } from \"../../../components/content-components/tables/FunctionTable\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport * as math from 'mathjs'\r\nimport React from \"react\";\r\nimport { Question } from \"../../../@types/Question\";\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nconst functionToTable = (): Question => {\r\n  const title = <></>\r\n\r\n  // generate random function\r\n  const xVal = getRandomWithExclusions(-9, 9, [0]);\r\n\r\n  // get 2-3 factors on top\r\n  const factor1 = getStringFactorFromXval(xVal);\r\n  const factor2 = getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0]));\r\n  const factor3 = getRandomNumber(0, 1) === 0 ?\r\n    getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0])) : \"\";\r\n\r\n  // get expanded latex version of equation\r\n  const numerator = sortPolynomialByDegree(nerdamer(`${factor1}${factor2}${factor3}`).expand());\r\n  const equation = `(${numerator})/${factor1}`;\r\n  const latexEq = nerdamer(equation).toTeX().replaceAll(' \\\\cdot ', \"\")\r\n\r\n  // create question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Which table is best for estimating the limit of this function?</h2>\r\n      <div>Assume both tables have correct function values.</div>\r\n    </div>\r\n    <Latex expression={`g(x) = ${latexEq}`} classes={'large-font'} display={true} />\r\n  </div>\r\n\r\n  const node = math.parse(`${factor2}${factor3}`);\r\n  const f = (x: number) => node.evaluate({ x });\r\n\r\n  // create options\r\n  // first option\r\n  const data1 = [];\r\n  for (let i = xVal - 5; i <= xVal + 5; i++) {\r\n    data1.push({ x: i, y: xVal === i ? 'und' : Math.round(f(i)) });\r\n  }\r\n\r\n  // second option data\r\n  const data2 = [];\r\n  for (let i = xVal - 2; i <= xVal + 2; i++) {\r\n    if (i !== xVal) {\r\n      data2.push({ x: i, y: Math.round(f(i)) })\r\n    } else {\r\n      data2.push({ x: i - 0.1, y: fixRounding(f(i - 0.1), 10) });\r\n      data2.push({ x: i - 0.01, y: fixRounding(f(i - 0.01), 100) });\r\n      data2.push({ x: i - 0.001, y: fixRounding(f(i - 0.001), 1000) });\r\n      data2.push({ x: i, y: 'und' });\r\n      data2.push({ x: i + 0.001, y: fixRounding(f(i + 0.001), 1000) });\r\n      data2.push({ x: i + 0.01, y: fixRounding(f(i + 0.01), 100) });\r\n      data2.push({ x: i + 0.1, y: fixRounding(f(i + 0.1), 10) });\r\n    }\r\n  }\r\n\r\n  const option1 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data1} />,\r\n    correct: false\r\n  }\r\n\r\n  const option2 = {\r\n    component: <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data2} />,\r\n    correct: true\r\n  }\r\n\r\n  const input = shuffleArray([option1, option2])\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        Focus on <Latex expression={`x = ${xVal}`} /> in both tables. Recall that a limit is about getting infinitely close to the <Latex expression=\"x\" /> value.\r\n      </div>\r\n      <div>\r\n        This means we really need to \"zoom in\" on our <Latex expression=\"x\" /> value.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        Thus, looking at both tables, it is clear that the correct answer is:\r\n      </div>\r\n      <div className=\"hint-ans input correct ans\">\r\n        {option2.component}\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nconst tableToLimit = (): Question => {\r\n  const xVal = getRandomNumber(-9, 9); // xval at which to evaluate limit\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // domain for table\r\n  const startX = xVal - (getRandomNumber(0, 1) === 0 ? 3 : 0);\r\n  const endX = xVal + ((getRandomNumber(0, 1) === 0 || xVal === startX) ? 3 : 0);\r\n\r\n  const increasing = Boolean(getRandomNumber(0, 1)); // whether table values are increasing or decreasing\r\n  const orderedValues = generateOrderedValues(endX - startX + 1, increasing); // values in table\r\n\r\n  // evaluate answer\r\n  let ans = String(orderedValues[xVal === startX ? 0 : 3]); // default answer\r\n  if ((xVal === startX && sign === 0) ||\r\n    (xVal === endX && sign === 1) ||\r\n    ((xVal === endX || xVal === startX) && sign === 2)) {\r\n    ans = \"dne\";\r\n  }\r\n\r\n  const { data } = generateLimitTableData(xVal, orderedValues, startX, endX) // data for table\r\n\r\n  // other question components\r\n  const title = <></> // no title as title is included in question\r\n\r\n  const signText = sign === 0 ? `^\\\\textbf{-}` : sign === 1 ? `^\\\\textbf{+}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${xVal + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Estimate the limit from the table.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist or cannot be evaluated from the table.</div>\r\n    </div>\r\n    <FunctionTable xTitle={`x`} yTitle={`g(x)`} data={data} />\r\n  </div>\r\n\r\n  const type = 'math';\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        We want to evaluate the limit as <Latex expression={`x`} /> approaches {xVal} from {sign === 0 ? <>the <strong>left</strong></> : sign === 1 ? <>the <strong>right</strong></> : <strong>both sides</strong>}. What side(s) do we see in the table?\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  if (ans === \"dne\") {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          Looking at the table, we only have data to the <strong>{xVal === startX ? \"right\" : \"left\"}</strong> of <Latex expression={`x = ${xVal}`} />, not {xVal === endX ? \"the right\" : xVal === endX ? \"the left\" : \"both sides\"}. We don't have enough information to evaluate the limit.\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          dne\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    hints.push(\r\n      <>\r\n        <div>\r\n          We have data on {xVal === endX ? <>the <strong>left</strong></> : xVal === startX ? <>the <strong>right</strong></> : <strong>both sides</strong>} of <Latex expression={`x = ${xVal}`} />.\r\n        </div>\r\n        <div>\r\n          This means we can estimate the limit!\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Remember that when finding limits, we want to focus on what the function is <strong>approaching</strong>, not necessarily the function value at that point.\r\n        </div>\r\n        <div>\r\n          Looking at the <Latex expression=\"y\" /> values near <Latex expression={`x = ${xVal}`} />, it looks like the function is approaching <Latex expression={ans} />.\r\n        </div>\r\n      </>,\r\n      <>\r\n        <div>\r\n          Thus, the correct answer is:\r\n        </div>\r\n        <div className=\"hint-ans input correct ans\">\r\n          {ans}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return { title, question, ans, type, nextToInput, hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = tableToLimit();\r\n  } else {\r\n    q = functionToTable();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {Number} val value to round\r\n * @param {Number} degree of places to round to: ex. if you want to round to the tenths place, this should be 10\r\n * @returns rounded value\r\n */\r\nconst fixRounding = (val: number, degree: number): number => {\r\n  return Math.floor(val * degree * 10) / (degree * 10);\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["FunctionTable","_ref","xTitle","yTitle","data","tableRef","useRef","width","setWidth","useState","originalWidthRef","windowWidth","useWindowSize","display","setDisplay","useEffect","element","current","resizeObserver","ResizeObserver","entries","entry","target","contentRect","observe","unobserve","disconnect","_jsx","ref","className","children","_jsxs","concat","Latex","expression","map","d","i","x","y","nerdamer","require","shuffleArray","array","length","j","Math","floor","random","getRandomNumber","min","max","getRandomWithExclusions","exclusions","validValues","includes","push","generateOrderedValues","n","increasing","extreme","arguments","undefined","increment","values","nextDiff","nextValue","sortPolynomialByDegree","polynomial","coefficients","coeffs","ans","each","e","toString","Number","buildPolynomialFromCoeffs","String","isNaN","getCoeffsOfPolynomial","getRootsOfPolynomial","elements","symbol","r1","convertToDecimal","number","text","getStringFactorFromXval","xval","abs","convertArrayToObject","obj","currentObj","hasOwnProperty","findLCM","a","b","findGCD","generateLimitTableData","xVal","start","end","val","formatPolynomialToLatex","math","toTex","replaceAll","nerdamerFormatToLatex","toTeX","fixRounding","degree","generateRandomQuestion","q","tableToLimit","sign","startX","endX","Boolean","orderedValues","title","_Fragment","signText","nextToInput","classes","inline","question","hints","type","functionToTable","factor1","factor2","factor3","numerator","expand","equation","latexEq","node","f","evaluate","data1","round","data2","option1","component","correct","option2","input"],"sourceRoot":""}