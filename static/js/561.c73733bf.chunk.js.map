{"version":3,"file":"static/js/561.c73733bf.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/15-the-intermediate-value-theorem-(ivt)/generate-question.tsx"],"sourcesContent":["/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { formatPolynomialToLatex, getRandomNumber, getRandomWithExclusions, shuffleArray } from \"../../../helpers/functions\"\r\nimport { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\"\r\nimport { Option } from \"../../../@types/Option\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport React from \"react\"\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\"\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\"\r\nimport * as math from \"mathjs\"\r\n\r\nconst applyIVT = () => {\r\n  const x1 = getRandomNumber(-8, 3)\r\n  const x2 = getRandomNumber(x1 + 1, 8)\r\n  const y1 = getRandomNumber(-7, 7)\r\n  const y2 = getRandomWithExclusions(-7, 7, [y1 - 1, y1, y1 + 1])\r\n\r\n  const withinYVal = getRandomNumber(Math.min(y1, y2) + 1, Math.max(y1, y2) - 1)\r\n  const outsideYVal = Boolean(getRandomNumber(0, 1)) ?\r\n    getRandomNumber(-10, Math.min(y1, y2) - 1) :\r\n    getRandomNumber(Math.max(y1, y2) + 1, 10)\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${withinYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </>,\r\n      correct: true\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${withinYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${Math.min(y1, y2)}, ${Math.max(y1, y2)}]`} />.\r\n      </>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${outsideYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <>\r\n        <Latex expression={`f(c) = ${outsideYVal}`} /> for at least one <Latex expression=\"c\" /> in <Latex expression={`[${Math.min(y1, y2)}, ${Math.max(y1, y2)}]`} />.\r\n      </>,\r\n      correct: false\r\n    }\r\n  ]\r\n\r\n  const title = <></>\r\n  const question = <>\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        Let <Latex expression=\"f(x)\" /> be a continuous function over all real numbers.\r\n      </div>\r\n      <div>\r\n        Suppose that <Latex expression={`f(${x1}) = ${y1}`} /> and <Latex expression={`f(${x2}) = ${y2}`} />.\r\n      </div>\r\n      <strong>Which of the following is guaranteed by the IVT?</strong>\r\n    </div>\r\n  </>\r\n\r\n  const hints = [\r\n    <>\r\n      <div>\r\n        The IVT guarantees that for any <Latex expression=\"L\" /> between <Latex expression=\"f(a)\" /> and <Latex expression=\"f(b)\" />, there exists a number <Latex expression=\"c\" /> in <Latex expression=\"[a, b]\" /> for which <Latex expression=\"f(c) = L\" />.\r\n      </div>\r\n    </>,\r\n    <div>\r\n      Thus, the <Latex expression=\"c\" /> value should be in between the <Latex expression=\"x\" /> values and the <Latex expression=\"L\" /> value should be in between the <Latex expression=\"y\" /> values. \r\n    </div>,\r\n    <div>\r\n      Match these up in the options to find the correct answer!\r\n    </div>\r\n  ]\r\n\r\n  return { type: 'mc', input: shuffleArray(options), title, question, hints }\r\n}\r\n\r\nconst checkIfIVTApplies = () => {\r\n  const continuityCheck = getRandomNumber(0, 2) // 0: check left, 1: check middle, 2: check right\r\n  const isContinuous = Boolean(getRandomNumber(0, 1)) // whether function will be contiuous\r\n  let x1 = getRandomNumber(-8, 3)\r\n  let x2 = getRandomNumber(x1 + 2, 8)\r\n  const midX = getRandomNumber(x1 + 1, x2 - 1) // find x in the middle to potentially ask about\r\n\r\n  // determine ys based on whether function is continuous\r\n  const y1 = getRandomNumber(-7, 7)\r\n  const y2 = isContinuous ? y1 : getRandomWithExclusions(-7, 7, [y1 - 1, y1, y1 + 1])\r\n\r\n  // generate functions \r\n  const xToGenerate = continuityCheck === 0 ? x1 : continuityCheck === 1 ? midX : x2\r\n  const f1 = getPolynomialFunctionWithPoint(getRandomNumber(1, 2), xToGenerate, y1)\r\n  const f2 = getPolynomialFunctionWithPoint(getRandomNumber(1, 2), xToGenerate, y2)\r\n\r\n  // get y values at interval endpoints\r\n  let intervalY1 = Math.round(Number(math.evaluate(f1, { x: x1 }).toString()))\r\n  let intervalY2 = Math.round(Number(math.evaluate(f2, { x: x2 }).toString()))\r\n\r\n  // ensure that intervalY1 and intervalY2 are far enough apart that there can be a value in between them to ask about\r\n  while (Math.abs(intervalY1 - intervalY2) < 2) {\r\n    if (xToGenerate === x1) {\r\n      x2 = x2 + 1\r\n      intervalY2 = Math.round(Number(math.evaluate(f2, { x: x2 }).toString()))\r\n    } else {\r\n      x1 -= 1\r\n      intervalY1 = Math.round(Number(math.evaluate(f1, { x: x1 }).toString()))\r\n    }\r\n  }\r\n\r\n  // get yval within and outside f(x1) and f(x2)\r\n  const withinYVal = getRandomNumber(Math.min(intervalY1, intervalY2) + 1, Math.max(intervalY1, intervalY2) - 1)\r\n  const outsideYVal = Boolean(getRandomNumber(0, 1)) ?\r\n    getRandomNumber(Math.min(intervalY1, intervalY2) - 10, Math.min(intervalY1, intervalY2) - 1) :\r\n    getRandomNumber(Math.max(intervalY1, intervalY2) + 1, Math.max(intervalY1, intervalY2) + 10)\r\n\r\n  const yToAsk = Boolean(getRandomNumber(0, 1)) ? withinYVal : outsideYVal // which y to use\r\n  const piecewiseFunctions: PiecewiseFunction[] = [\r\n    {\r\n      f: formatPolynomialToLatex(f1),\r\n      domain: continuityCheck === 0 ? `x \\\\leq ${xToGenerate}` : `x < ${xToGenerate}`\r\n    },\r\n    {\r\n      f: formatPolynomialToLatex(f2),\r\n      domain: continuityCheck === 2 ? `x \\\\geq ${xToGenerate}` : `x > ${xToGenerate}`\r\n    }\r\n  ]\r\n\r\n  // all other question components\r\n  const title = <></>\r\n  const question = <>\r\n    Consider:\r\n    <Piecewise title=\"f(x)\" functions={piecewiseFunctions} />\r\n    <strong>\r\n      Does the IVT guarantee a <Latex expression=\"c\" /> on <Latex expression={`[${x1}, ${x2}]`} /> such that <Latex expression={`f(c) = ${yToAsk}`} />?\r\n    </strong>\r\n  </>\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} /> and <Latex expression={`${yToAsk}`} /> is in between <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>,\r\n      correct: isContinuous && yToAsk === withinYVal\r\n    },\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </div>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`[${x1}, ${x2}]`} />, but <Latex expression={`${yToAsk}`} /> is not in between <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>,\r\n      correct: isContinuous && yToAsk === outsideYVal\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression=\"f(x)\" /> is not continuous on <Latex expression={`[${x1}, ${x2}]`} />, so IVT does not apply.\r\n      </div>,\r\n      correct: !isContinuous\r\n    },\r\n  ]\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <div>\r\n        In order to apply the IVT, first we need to confirm that <Latex expression=\"f(x)\" /> is continuous over the interval <Latex expression={`[${x1}, ${x2}]`} />.\r\n      </div>\r\n      <Piecewise title=\"f(x)\" functions={piecewiseFunctions} display={true} />\r\n    </div>,\r\n    <div>\r\n      Remember, in order to confirm continuity over this interval, we need to check 3 things:\r\n      <ul className=\"text-start\">\r\n        <li>\r\n          <Latex expression=\"f(x)\" /> is continuous on <Latex expression={`(${x1}, ${x2})`} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x1}^{\\\\footnotesize\\\\texttt{+}}} = f(${x1})`} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`\\\\lim_{x \\\\to ${x2}^{\\\\footnotesize\\\\texttt{-}}} = f(${x2})`} />\r\n        </li>\r\n      </ul>\r\n    </div>,\r\n    <>\r\n      <div>\r\n        If you were not able to verify continuity, then IVT cannot be applied.\r\n      </div>\r\n    </>,\r\n    <>\r\n      <div>\r\n        However, if you were able to verify continuity, you can check the <Latex expression=\"y\" /> values for which IVT applies. Do this by finding <Latex expression={`f(${x1})`} /> and <Latex expression={`f(${x2})`} />.\r\n      </div>\r\n      <div>\r\n        If the <Latex expression=\"y\" /> value is in between these 2 values, we know IVT can be applied. Otherwise, it cannot be.\r\n      </div>\r\n    </>\r\n  ]\r\n\r\n  return { title, type: 'mc', question, input: shuffleArray(options), hints }\r\n}\r\n\r\nconst generateRandomQuestion = () => {\r\n  const rand = getRandomNumber(0, 9)\r\n  if (rand <= 9) {\r\n    return checkIfIVTApplies()\r\n  } else {\r\n    return applyIVT()\r\n  }\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","expression","setExpression","useState","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","generateRandomQuestion","getRandomNumber","checkIfIVTApplies","continuityCheck","isContinuous","Boolean","x1","x2","midX","y1","y2","getRandomWithExclusions","xToGenerate","f1","getPolynomialFunctionWithPoint","f2","intervalY1","Math","round","Number","math","x","toString","intervalY2","abs","withinYVal","min","max","outsideYVal","yToAsk","piecewiseFunctions","formatPolynomialToLatex","question","_jsxs","options","component","correct","hints","className","type","input","shuffleArray","applyIVT"],"sourceRoot":""}