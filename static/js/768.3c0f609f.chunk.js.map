{"version":3,"file":"static/js/768.3c0f609f.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","components/latex/Latex.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/08-determining-limits-using-the-squeeze-theorem/Sections.js","topics/01-limits/08-determining-limits-using-the-squeeze-theorem/learn-content.js"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[],\r\n  size: number,\r\n  minx?: number,\r\n  maxx?: number,\r\n  miny?: number,\r\n  maxy?: number\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny])\r\n  \r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","/**\r\n * Latex component that uses katex to render math in latex font\r\n * Parameters: \r\n *  - classes: custom classes to be added to returned html\r\n *  - expression: math to be rendered as latex\r\n *  - inline: boolean value indicating whether latex should be rendered inline or block mode\r\n */\r\n\r\nimport 'katex/dist/katex.min.css';  // Import KaTeX styles\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\nimport React from 'react';\r\n\r\ninterface LatexProps {\r\n  classes? : string,\r\n  expression: string,\r\n  display?: string | boolean,\r\n  inline?: any\r\n}\r\nconst Latex: React.FC<LatexProps> = ({classes, expression, display}) => {\r\n  return (\r\n    <span className={classes}>\r\n      {!display ? \r\n      <InlineMath math={expression} /> :\r\n      <BlockMath math={expression} /> }\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Latex","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine }\r\n","import FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\nimport '../../../styles/graph.css'\r\nimport * as math from 'mathjs'\r\n\r\nconst n1 = math.parse('x^2* sin(1/x)');\r\nconst n2 = math.parse('x^2');\r\nconst n3 = math.parse('-x^2');\r\nconst functions = [\r\n  {\r\n    f: x => n2.evaluate({ x }),\r\n    min: -0.5,\r\n    max: 0.5,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c3',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n  },\r\n  {\r\n    f: x => n3.evaluate({ x }),\r\n    min: -0.5,\r\n    max: 0.5,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c1',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n  },\r\n  {\r\n    f: x => n1.evaluate({ x }),\r\n    min: -0.5,\r\n    max: 0,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: 'c2',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    dataGap: 0.001\r\n  },\r\n  {\r\n    f: x => n1.evaluate({ x }),\r\n    min: 0,\r\n    max: 0.5,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: 'c2',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    dataGap: 0.001\r\n  },\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    When calculating limits, one theorem that is useful is the <strong>Squeeze Theorem</strong>.\r\n  </div>\r\n  <div>\r\n    This theorem says that <strong>if</strong> <Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} /> <strong>near</strong> <Latex expression={`x = a`} /> (but not necessarily <strong><em>at</em></strong> <Latex expression={`x = a`} />),\r\n  </div>\r\n  <div>\r\n    and <Latex classes={'c1'} expression={`\\\\lim_{x \\\\to a} f(x)`} /> <Latex expression={`=`} /> <Latex classes={'c3'} expression={`\\\\lim_{x \\\\to a} h(x)`} /> <Latex classes={'c4'} expression={'=L'} />, then <Latex classes={'c2'} expression={`\\\\lim_{x \\\\to a} g(x)`} /> <Latex classes={'c4'} expression={'=L'} />.\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    To understand this, let's look at an example graph with <Latex classes={'c1'} expression={`f(x) = -x^2`} />, <Latex classes={'c2'} expression={`g(x) = x^2 \\\\sin(\\\\frac{1}{x})`} />, <Latex classes={'c3'} expression={`h(x) = x^2`} />\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Sample Graph</h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} minx={-0.3} maxx={0.3} miny={-0.3} maxy={0.3} />\r\n  </div>\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    We want to evaluate <Latex expression={`\\\\lim_{x \\\\to 0}`} /> <Latex classes={'c2'} expression={`g(x)`} />. However, using direct substition, we get: <Latex expression={`\\\\lim_{x \\\\to 0} g(x) = \\\\lim_{x \\\\to 0} x^2 \\\\sin(\\\\frac{1}{x}) = (0)^2 \\\\sin(\\\\frac{1}{0})`} display={true} />\r\n  </div>\r\n  <div>\r\n    Graphically, it is clear that this limit is <Latex expression={`0`} />. But how can we evaluate this limit analytically?\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    We can use the Squeeze Theorem! In this example, we see that <Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} />\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    We can focus on the limits of the top and bottom functions:\r\n    <Latex classes={'c1'} expression={`\\\\lim_{x \\\\to 0} f(x)= \\\\lim_{x \\\\to 0} -x^2 = 0`} display={true} />\r\n    <Latex classes={'c3'} expression={`\\\\lim_{x \\\\to 0} h(x)= \\\\lim_{x \\\\to 0} x^2 = 0`} display={true} />\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Since <Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} /> near <Latex expression={`x = 0`} />, and <Latex classes={'c1'} expression={`\\\\lim_{x \\\\to 0} f(x)=0`} />, and <Latex classes={'c3'} expression={`\\\\lim_{x \\\\to 0} h(x)=0`} />,\r\n  </div>\r\n  <div>\r\n    by the Squeeze Theorem, <Latex classes={'c2'} expression={`\\\\lim_{x \\\\to 0} g(x)=0`} />\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    However, how could we have known that <Latex classes={'c1'} expression={`-x^2`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`x^2 \\\\sin(\\\\frac{1}{x})`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`x^2`} /> without looking at the graph?\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    Since we want to find <Latex classes={'c2'} expression={`\\\\lim_{x \\\\to 0} x^2 \\\\sin(\\\\frac{1}{x})`} />, first we can focus on just <Latex expression={`\\\\sin(\\\\frac{1}{x})`} />.\r\n  </div>\r\n  <div>\r\n    Since this is a <Latex expression={`\\\\sin`} /> function, we know that <Latex expression={`-1 \\\\leq \\\\sin(\\\\frac{1}{x}) \\\\leq 1`} />\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    Now, multiplying the whole inequality by <Latex expression={`x^2`} />, we get <Latex expression={`-x^2 \\\\leq x^2\\\\sin(\\\\frac{1}{x}) \\\\leq x^2`} />, which is exactly what we want!\r\n  </div>\r\n</>\r\n\r\nconst Section10 = <>\r\n  <div>\r\n    Lastly, we just take <Latex expression={`\\\\lim_{x \\\\to 0}`} /> of all 3 expressions, which gives us:\r\n    <Latex expression={`\\\\lim_{x \\\\to 0}-x^2 \\\\leq \\\\lim_{x \\\\to 0}x^2\\\\sin(\\\\frac{1}{x}) \\\\leq \\\\lim_{x \\\\to 0} x^2`} display={true} />\r\n    <Latex expression={`0 \\\\leq \\\\lim_{x \\\\to 0}x^2\\\\sin(\\\\frac{1}{x}) \\\\leq 0`} display={true} />\r\n    <Latex expression={`\\\\lim_{x \\\\to 0}x^2\\\\sin(\\\\frac{1}{x}) = 0`} display={true} />\r\n  </div>\r\n  <div>\r\n    This is the same as the result from before!\r\n  </div>\r\n</>\r\n\r\n\r\nconst Section11 = <>\r\n  <div>\r\n    Let's look at another example: <Latex expression={`\\\\lim_{x \\\\to 0} -x^2 \\\\sin(\\\\frac{1}{x}) + 1`} />. Similar to before, we can start with the inequality <Latex expression={`-1 \\\\leq \\\\sin(\\\\frac{1}{x}) \\\\leq 1`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section12 = <>\r\n  <div>\r\n    The next logical step is to multiply both sides by <Latex expression={`-x^2`} />. However, we have to be careful here - since <Latex expression={`-x^2`} /> is always negative, we have to also flip the inequalities to get: <Latex expression={`x^2 \\\\geq -x^2\\\\sin(\\\\frac{1}{x}) \\\\geq -x^2`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section13 = <>\r\n  <div>\r\n    Rewriting this inequality from least to greatest, we get <Latex expression={`-x^2 \\\\leq -x^2\\\\sin(\\\\frac{1}{x}) \\\\leq x^2`} />\r\n  </div>\r\n  <div>\r\n    Next, we can add 1 to all sides of the inequality to get <Latex expression={`-x^2 + 1 \\\\leq -x^2\\\\sin(\\\\frac{1}{x}) + 1 \\\\leq x^2 + 1`} />\r\n  </div>\r\n</>\r\n\r\nconst Section14 = <>\r\n  <div>\r\n    Finally, taking <Latex expression={`\\\\lim_{x \\\\to 0}`} /> of all 3 expressions in the inequality, we get\r\n    <Latex expression={`\\\\lim_{x \\\\to 0} -x^2 + 1 \\\\leq \\\\lim_{x \\\\to 0} -x^2\\\\sin(\\\\frac{1}{x}) + 1 \\\\leq \\\\lim_{x \\\\to 0} x^2 + 1`} display={true} />\r\n    <Latex expression={`1 \\\\leq \\\\lim_{x \\\\to 0} -x^2\\\\sin(\\\\frac{1}{x}) + 1 \\\\leq 1`} display={true} />\r\n  </div>\r\n  <div>\r\n    Therefore: <Latex expression={`\\\\lim_{x \\\\to 0} -x^2\\\\sin(\\\\frac{1}{x}) + 1 = 1`} display={true} />\r\n  </div>\r\n</>\r\n// const Section11 = <>\r\n//   <div>\r\n//     The Squeeze Theorem can also be used to show that <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 1`} /> and <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{1 - \\\\cos x}{x} = 0`} />\r\n//   </div>\r\n//   <div>\r\n//     These can be used to evaluate limits very easily!\r\n//   </div>\r\n// </>\r\n\r\n// const Section12 = <>\r\n//   <div>\r\n//     For example, what is <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin(7x)}{x}`} />?\r\n//   </div>\r\n// </>\r\n\r\n// const Section13 = <>\r\n//   <div>\r\n//     Multiplying the fraction by <Latex expression={`\\\\frac{7}{7}`} />, <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin(7x)}{x} = \\\\lim_{x \\\\to 0} \\\\frac{7\\\\sin(7x)}{7x} = 7 \\\\lim_{x \\\\to 0} \\\\frac{\\\\sin(7x)}{7x}`} display={true} />\r\n//   </div>\r\n// </>\r\n\r\n// const Section14 = <>\r\n//   <div>\r\n//     Now, we can apply the rule that <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin x}{x} = 0`} /> to say that <Latex expression={`\\\\lim_{x \\\\to 0} \\\\frac{\\\\sin(7x)}{7x} = 1`} />\r\n//   </div>\r\n//   <div>\r\n//     Notice how it is not necessary that we have <Latex expression={`\\\\frac{\\\\sin(x)}{x}`} /> - as long as we have the same expression for both <Latex expression={`x`} /> in <Latex expression={`\\\\frac{\\\\sin(x)}{x}`} />, we can use this property.\r\n//   </div>\r\n// </>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12, Section13, Section14 }","import { Section1, Section10, Section11, Section12, Section13, Section14, \r\n  Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\"\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9,\r\n  Section10,\r\n  Section11,\r\n  Section12,\r\n  Section13,\r\n  Section14\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","minx","maxx","miny","maxy","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","_jsx","ref","classes","expression","display","className","children","BlockMath","math","InlineMath","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","f","min","max","dataGap","arguments","length","undefined","data","i","x","y","push","createFunctionGraph","color","leftArrow","rightArrow","type","filter","d","Math","invert","findIntersections","unshift","line","name","concat","uuidv4","createArrowMarker","id","append","datum","attr","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","style","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","points","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","n1","n2","n3","evaluate","_jsxs","_Fragment","Latex","FunctionGraph"],"sourceRoot":""}