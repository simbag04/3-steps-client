{"version":3,"file":"static/js/520.95f11fba.chunk.js","mappings":"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","sources":["components/latex/Piecewise.tsx","topics/01-limits/10-defining-continuity-at-a-point/generate-question.tsx"],"sourcesContent":["/**\r\n * Renders Piecewise Function in Latex\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Latex from \"./Latex\";\r\nimport { PiecewiseFunction } from \"../../@types/PiecewiseFunction\";\r\n\r\ninterface PiecewiseProps {\r\n  title: string, // name of function\r\n  functions: PiecewiseFunction[], // functions to show\r\n  display?: string | boolean, // whether it should be display mode\r\n  classes?: string // classes to apply\r\n}\r\n\r\nexport const Piecewise: React.FC<PiecewiseProps> = ({ title, functions, display, classes }) => {\r\n  const [expression, setExpression] = useState(``);\r\n  useEffect(() => {\r\n    if (functions) {\r\n      let e = `\\\\begin{cases}`;\r\n      for (let i = 0; i < functions.length; i++) {\r\n        e = e + functions[i].f + \"&\";\r\n        e = e + functions[i].domain;\r\n        if (i !== functions.length - 1) {\r\n          e = e + \"\\\\\\\\\\\\\\\\\"\r\n        }\r\n      }\r\n      e = e + \"\\\\end{cases}\"\r\n      setExpression(e)\r\n    }\r\n  },[functions])\r\n  \r\n  return (\r\n    <>\r\n      <Latex classes={classes ? classes : \"\"} expression={`${title ? `${title} = ` : ''} ${expression}`} display={display} />\r\n    </>\r\n  )\r\n}","import { Question } from \"../../../@types/Question\";\r\nimport React from \"react\";\r\nimport { PiecewiseFunction } from \"../../../@types/PiecewiseFunction\";\r\nimport { generateOrderedValues, getRandomNumber, getRandomWithExclusions } from \"../../../helpers/functions\";\r\nimport * as math from 'mathjs'\r\nimport { getPolynomialFunctionWithPoint } from \"../../../helpers/expression-generators\";\r\nimport { Piecewise } from \"../../../components/latex/Piecewise\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport { Option } from \"../../../@types/Option\";\r\n\r\nconst piecewiseToLimit = (): Question => {\r\n  const functions: PiecewiseFunction[] = []; // array for piecewise\r\n  const mathFs = []; // array of mathjs functions\r\n  const numFunctions = getRandomNumber(0, 10) <= 6 ? 1 : 2\r\n  const xValues = generateOrderedValues(numFunctions, true, -3, 2); // random xvalues\r\n\r\n  let yValues = []; // array for random y values\r\n\r\n  const xIndex = getRandomNumber(0, xValues.length - 1); // index of x val to ask about \r\n  const x = xValues[xIndex] // actual x val to ask about\r\n\r\n  // generate y values\r\n  for (let i = 0; i < numFunctions; i++) {\r\n    yValues.push(getRandomNumber(-7, 7))\r\n  }\r\n\r\n  // whether there is a separate value at the function\r\n  const separateFunctionVal = (numFunctions === 1) ? getRandomNumber(0, 10) <= 6 : false\r\n  // 0: continuous at x, 1: limits not equal, 2: limits equal but f value diff\r\n  const continuous = separateFunctionVal ? getRandomNumber(0, 2) : getRandomNumber(0, 1)\r\n  let includes = xIndex === 0 && separateFunctionVal ? 0 : getRandomNumber(0, 1); // whether current xval is included in domain - don't include if there is a separate function value\r\n\r\n  // generate functions\r\n  for (let i = 0; i <= xValues.length; i++) {\r\n    // figure out domain of values and functions\r\n    let domain: string; // latex domain\r\n    let f: string; // function for domain\r\n    let xVal: number; // xval to have point at\r\n    let yVal: number; // yval to have point at\r\n\r\n    // add number at function\r\n    if (i - 1 === xIndex && separateFunctionVal) {\r\n      functions.push({ f: continuous !== 2 ? String(yValues[xIndex]) : String(getRandomWithExclusions(-7, 7, [yValues[xIndex]])), domain: `x = ${x}` })\r\n      includes = 1 // don't include xval in next function\r\n    }\r\n\r\n    if (i === 0) {\r\n      domain = `x ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n      xVal = xValues[i];\r\n      yVal = yValues[i];\r\n    } else if (i === xValues.length) {\r\n      domain = `x ${includes ? \">\" : \"\\\\geq\"} ${xValues[i - 1]}`\r\n      xVal = xValues[i - 1];\r\n      yVal = (continuous === 1 && xIndex === i - 1) ? getRandomWithExclusions(-7, 7, [yValues[i - 1]]) : yValues[i - 1] // decide whether yVal will be different or the same for continuity\r\n    } else {\r\n      // 2-sided domain\r\n      domain = `${xValues[i - 1]} ${includes ? \"<\" : \"\\\\leq\"} x`;\r\n      includes = xIndex === i && separateFunctionVal ? 0 : getRandomNumber(0, 1);\r\n      domain = domain + ` ${includes ? \"\\\\leq\" : \"<\"} ${xValues[i]}`\r\n\r\n      xVal = xValues[xIndex];\r\n\r\n      // decide whether yVal will be different or the same for continuity\r\n      yVal = continuous === 1 ? getRandomWithExclusions(-7, 7, [yValues[xIndex]]) : yValues[xIndex];\r\n    }\r\n\r\n    // generate function\r\n    let degree = Math.abs(xVal) > 2 ? 1 : getRandomNumber(1, 2); // only do degree 2 for small x\r\n    f = getPolynomialFunctionWithPoint(degree, xVal, yVal);\r\n\r\n    // store function to evaluate f\r\n    const node = math.parse(f);\r\n    mathFs.push((x: number) => node.evaluate({ x }));\r\n\r\n    // format f\r\n    f = math.simplifyCore(f).toTex({ parenthesis: 'auto' }).replaceAll('\\\\cdot', \"\");\r\n    functions.push({ f, domain });\r\n  }\r\n\r\n  const question =<div className=\"flex vertical center medium-gap\">\r\n    <h3>Is the function continuous at <Latex expression={`x = ${x}`} />?</h3>\r\n    <Piecewise functions={functions} title={`f(x)`} />\r\n  </div>\r\n\r\n  // find answer\r\n  const title: React.JSX.Element = <></>\r\n\r\n  const options: Option[] = [\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression={`\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{+}}} f(x) = \\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{-}}} f(x)`} /> and <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x) = f(${x})`} />\r\n      </div>,\r\n      correct: continuous === 0\r\n    },\r\n    {\r\n      component: <div>\r\n        Yes, because <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x)`} /> exists.\r\n      </div>,\r\n      correct: false\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x) `} /> does not exist.\r\n      </div>,\r\n      correct: continuous === 1\r\n    },\r\n    {\r\n      component: <div>\r\n        No, because <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x) `} /> exists, but <Latex expression={`\\\\lim_{x \\\\to ${x}} f(x) \\\\neq f(${x})`} />.\r\n      </div>,\r\n      correct: continuous === 2\r\n    },\r\n  ]\r\n  \r\n  const hints = [\r\n    <div>\r\n      <div className=\"flex vertical center medium-gap\">\r\n        Remember, we have 2 conditions to check for continuity for this function:\r\n        <Piecewise functions={functions} title={`f(x)`} display={true} />\r\n      </div>\r\n      <div>\r\n        <ul className=\"text-start\">\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x)`} /> must <strong>exist</strong>\r\n          </li>\r\n          <li>\r\n            <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to a} f(x) = f(a)`} display={true} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>,\r\n    <div>\r\n      How can we determine if <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}} f(x)`} /> <strong>exists</strong>?\r\n    </div>,\r\n    <div>\r\n      Since <Latex expression=\"f(x)\" /> is a piecewise function, in order for the limit to exist, we can first check that <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{-}}} f(x) = \\\\lim_{x \\\\to ${x}^{\\\\footnotesize\\\\texttt{+}}} f(x)`} />. Start by confirming that this is true.\r\n    </div>,\r\n\r\n  ]\r\n\r\n  if (continuous === 1) {\r\n    hints.push(<div>\r\n      If these limits did not equal each other, then we automatically know the function isn't continuous!\r\n    </div>)\r\n  } else {\r\n    hints.push(<div>\r\n      Once you have confirmed that these limits do equal each other, we can move on to the second condition: does <Latex classes=\"bold\" expression={`\\\\lim_{x \\\\to ${x}} f(x) = f(${x})`} />?\r\n    </div>)\r\n    hints.push(<div>\r\n      If yes, we know the function is continuous at <Latex expression={`x = ${x}`} /> as both conditions have been satisfied. If not, the function isn't continuous as the second condition isn't satisfied.\r\n    </div>)\r\n  }\r\n\r\n  return { title, question, input: options, type: 'mc', hints }\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  return piecewiseToLimit()\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["Piecewise","_ref","title","functions","display","classes","expression","setExpression","useState","useEffect","e","i","length","f","domain","_jsx","_Fragment","children","Latex","concat","generateRandomQuestion","piecewiseToLimit","mathFs","numFunctions","getRandomNumber","xValues","generateOrderedValues","yValues","xIndex","x","push","separateFunctionVal","continuous","includes","xVal","yVal","String","getRandomWithExclusions","degree","Math","abs","getPolynomialFunctionWithPoint","node","math","evaluate","toTex","parenthesis","replaceAll","question","_jsxs","className","options","component","correct","hints","input","type"],"sourceRoot":""}