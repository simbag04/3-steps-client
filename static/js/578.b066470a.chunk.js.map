{"version":3,"file":"static/js/578.b066470a.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","helpers/constants.tsx","helpers/functions.ts","helpers/graph-helpers.js","topics/01-limits/08-determining-limits-using-the-squeeze-theorem/generate-question.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[],\r\n  size: number,\r\n  minx?: number,\r\n  maxx?: number,\r\n  miny?: number,\r\n  maxy?: number,\r\n  points?: GraphPoint[]\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as math from \"mathjs\"\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * Shuffles an array\r\n * @param {array} array array to be shuffled\r\n * @returns shuffled array\r\n */\r\nconst shuffleArray =  (array: Array<any>): Array<any> => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1)); // Generate a random index from 0 to i\r\n\r\n    // Swap elements at i and j\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * generates a random number\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @returns random number in the range [min, max]\r\n */\r\nconst getRandomNumber = (min: number, max: number): number => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * generates a random number with exclusions\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @param {array} exclusions numbers to be excluded from generation\r\n * @returns random number in the range [min, max] excluding exclusions\r\n */\r\nconst getRandomWithExclusions = \r\n  (min: number, max: number, exclusions: Array<number>): number => {\r\n  const validValues = [];\r\n  for (let i = min; i <= max; i++) {\r\n    if (!exclusions.includes(i)) {\r\n      validValues.push(i);\r\n    }\r\n  }\r\n\r\n  if (validValues.length === 0) {\r\n    return max;\r\n  }\r\n\r\n  const randomIndex = getRandomNumber(0, validValues.length - 1);\r\n  return validValues[randomIndex];\r\n}\r\n\r\n/**\r\n * @param {Number} n number of values to generate\r\n * @param {boolean} increasing true if values should be increasing, false if decreasing\r\n * @returns array of n ordered numbers \r\n */\r\nconst generateOrderedValues = \r\n  (n: number, increasing: boolean, extreme: number = 10, \r\n    increment: number = 4): Array<number> => {\r\n  if (n <= 0) {\r\n    return [];\r\n  }\r\n\r\n  const values = [Math.floor(Math.random() * extreme) + 1]; // Initialize with a random value\r\n\r\n  while (values.length < n) {\r\n    // generate a value greater than the last one\r\n    const nextDiff = getRandomNumber(1, increment) * (increasing ? 1 : -1);\r\n    const nextValue = values[values.length - 1] + nextDiff;\r\n    values.push(nextValue);\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} polynomial string with a polynomial\r\n * @returns polynomial sorted in order of degree\r\n */\r\nconst sortPolynomialByDegree = (polynomial: string): string => {\r\n  // get coefficients with nerdamer\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  let ans = \"\";\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(nerdamer(e).toString());\r\n  })\r\n\r\n  // build expression\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Returns polynomial expression given coefficients of polynomial\r\n * @param coeffs to use in building polynomial\r\n * @returns expression\r\n */\r\nconst buildPolynomialFromCoeffs = (coeffs: any[]): string => {\r\n  for (let i = 0; i < coeffs.length; i++) {\r\n    coeffs[i] = String(coeffs[i])\r\n  }\r\n  \r\n  let ans = ''\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number.isNaN(Number(coeffs[i])) || Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Extracts coefficients of polynomial in increasing order of degree\r\n * @param polynomial string with polynomial expression\r\n * @returns Coefficients of polynomial in increasing order of degree\r\n */\r\nconst getCoeffsOfPolynomial = (polynomial: string): number[] => {\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(Number(nerdamer(e).toString()));\r\n  })\r\n\r\n  return coeffs\r\n}\r\n\r\n/**\r\n * Finds roots of given polynomial expression (works only with polynomials of degree 2)\r\n * @param polynomial string wth polynomial expression to find roots\r\n * @returns vector of roots of polynomial as decimals\r\n * if there is only 1 root, it will return a vector of length 2 with both values the same root\r\n */\r\nconst getRootsOfPolynomial = (polynomial: string): string[] => {\r\n  const roots = nerdamer(`roots(${polynomial})`)\r\n  const elements = roots.symbol.elements\r\n  const r1 = convertToDecimal(elements[0].toString())\r\n  const r2 = elements[1] === undefined ? r1 : convertToDecimal(elements[1].toString())\r\n  return [r1, r2]\r\n}\r\n\r\n/**\r\n * converts provided number (potentially a fraction) to a decimal\r\n * @param number string of number to convert to decimal\r\n * @returns decimal equivalent of number\r\n */\r\nconst convertToDecimal = (number: string): string => {\r\n  return nerdamer(number).text(`decimals`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} xval xvalue from which to create factor\r\n * @returns String in form (x - p), where p is the xval\r\n */\r\nconst getStringFactorFromXval = (xval: number): string => {\r\n  if (xval < 0) {\r\n    return `(x + ${Math.abs(xval)})`\r\n  } else if (xval > 0) {\r\n    return `(x - ${xval})`\r\n  } else {\r\n    return `(x)`\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array where each element is in the form {f: String, value: Number}\r\n * @returns object with keys as all the f Strings, values as the value of that String\r\n */\r\nconst convertArrayToObject = (array: Array<any>): any => {\r\n  const obj = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    const currentObj = array[i];\r\n    if (currentObj.hasOwnProperty('f')) {\r\n      const key = currentObj['f'];\r\n      obj[key] = currentObj['value'];\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * @param {Number} a \r\n * @param {Number} b \r\n * @returns least common multiple of a and b\r\n */\r\nconst findLCM = (a: number, b: number): number => {\r\n  // Calculate the greatest common divisor (GCD) using Euclidean algorithm\r\n  function findGCD(x, y) {\r\n    if (y === 0) {\r\n      return x;\r\n    }\r\n    return findGCD(y, x % y);\r\n  }\r\n\r\n  // LCM is the product of the two numbers divided by their GCD\r\n  return (a * b) / findGCD(a, b);\r\n}\r\n\r\n/**\r\n * @param {Number} xVal at which table will \"zoom in\"\r\n * @param {Array} values to use as yvalues in table\r\n * @param {Number} start of xs in table\r\n * @param {Number} end of xs in table\r\n * @returns data array containing x, y pairs for points that could be used in a limit table\r\n */\r\nconst generateLimitTableData = \r\n  (xVal: number, values: Array<number>, start: number, end: number): any => {\r\n  const increasing = values[1] - values[0] >= 0;\r\n  const data = [];\r\n  // build table data\r\n  for (let i = start; i <= end; i++) {\r\n    const val = values[i - start];\r\n\r\n    // zooming in to the left of xVal\r\n    if (i === xVal && xVal !== start) {\r\n      data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n      data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n    }\r\n\r\n    data.push({ x: i, y: val });  // other xvalues\r\n\r\n    // zooming in to the right of xval\r\n    if (i === xVal && xVal !== end) {\r\n      data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n      data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n    }\r\n  }\r\n\r\n  return {data}\r\n}\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with mathjs\r\n */\r\nconst formatPolynomialToLatex = (polynomial: string): any => {\r\n  const str: String = math.simplifyCore(polynomial).toTex()\r\n  return str.replaceAll('\\\\cdot', '').replaceAll('~', '');\r\n}\r\n\r\n/**\r\n * @param {String} expression to format\r\n * @returns formatted latex polynomial formatted with nerdamer\r\n */\r\nconst nerdamerFormatToLatex = (expression: string): string => {\r\n  return nerdamer(expression).toTeX().replaceAll('\\\\cdot', '').replaceAll('~', '')\r\n}\r\n\r\nexport { getRandomNumber, getRandomWithExclusions, generateOrderedValues, shuffleArray, sortPolynomialByDegree, getStringFactorFromXval, convertArrayToObject, findLCM, generateLimitTableData, formatPolynomialToLatex, nerdamerFormatToLatex, getCoeffsOfPolynomial, getRootsOfPolynomial, convertToDecimal, buildPolynomialFromCoeffs }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import { getRandomNumber, shuffleArray } from \"../../../helpers/functions\";\r\nimport { Option } from \"../../../types/Option\";\r\nimport { Question } from \"../../../types/Question\";\r\nimport Latex from '../../../components/latex/Latex'\r\nimport React from \"react\";\r\nimport * as math from \"mathjs\"\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\n\r\nconst optionsForLimitSteps = (): Question => {\r\n  const trig = `${getRandomNumber(0, 1) === 0 ? `\\\\sin` : `\\\\cos`}`\r\n  const trigFunction = `${trig}\\\\left(\\\\frac{${getRandomNumber(1, 7)}}{x}\\\\right)`\r\n  const toAdd = getRandomNumber(0, 7);\r\n  const finalFunction = `${trigFunction}${toAdd === 0 ? `` : `+ ${toAdd}`}`\r\n  const multiplyByNegative = Boolean(getRandomNumber(0, 1))\r\n\r\n\r\n  const o1: Option = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <div className=\"flex vertical\">\r\n        Known fact:\r\n        <Latex expression={`-1 \\\\leq ${trigFunction} \\\\leq 1`} display={true}></Latex>\r\n      </div>\r\n      <div className=\"flex vertical\">\r\n        <div>\r\n          Multiply inequality by <Latex expression={`${multiplyByNegative ? \"-\" : \"\"}x^2:`}></Latex>\r\n        </div>\r\n\r\n        <Latex expression={`${multiplyByNegative ? `x^2 \\\\geq -x^2${trigFunction} \\\\geq -x^2` : `-x^2 \\\\leq x^2${trigFunction} \\\\leq x^2`}`} display={true}></Latex>\r\n      </div>\r\n      {toAdd === 0 ? null :\r\n        <div className=\"flex vertical\">\r\n          <div>\r\n            Add {toAdd} to all 3 sides of the inequality:\r\n          </div>\r\n          <Latex expression={`${multiplyByNegative ? `x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\geq -x^2${finalFunction} \\\\geq -x^2 ${toAdd === 0 ? `` : `+${toAdd}`}` : `-x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\leq x^2${finalFunction} \\\\leq x^2 ${toAdd === 0 ? `` : `+${toAdd}`}`}`} display={true}></Latex>\r\n        </div>}\r\n      <div className=\"flex vertical\">\r\n        {multiplyByNegative ? `Flip and t` : `T`}ake limit on all 3 sides:\r\n        <Latex expression={`\\\\lim_{x \\\\to 0} -x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\leq \\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} \\\\leq \\\\lim_{x \\\\to 0} x^2 ${toAdd === 0 ? `` : `+${toAdd}`}`} display=\"display\"></Latex>\r\n        <Latex expression={`${toAdd} \\\\leq \\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} \\\\leq ${toAdd}`} display=\"display\"></Latex>\r\n      </div>\r\n      <div className=\"flex vertical\">\r\n        Answer: <Latex expression={`\\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} = ${toAdd}`} display=\"display\"></Latex>\r\n      </div>\r\n    </div>,\r\n    correct: true\r\n  }\r\n\r\n  const o2: Option = {\r\n    component: <div className=\"flex vertical center medium-gap\">\r\n      <div className=\"flex vertical\">\r\n        Known fact:\r\n        <Latex expression={`-1 \\\\leq ${trigFunction} \\\\leq 1`} display={true}></Latex>\r\n      </div>\r\n      <div className=\"flex vertical\">\r\n        <div>\r\n          Multiply inequality by <Latex expression={`${multiplyByNegative ? \"-\" : \"\"}x^2:`}></Latex>\r\n        </div>\r\n\r\n        <Latex expression={`${!multiplyByNegative ? `-x^2 \\\\geq -x^2${trigFunction} \\\\geq x^2` : `x^2 \\\\leq x^2${trigFunction} \\\\leq -x^2`}`} display={true}></Latex>\r\n      </div>\r\n      {toAdd === 0 ? null :\r\n        <div className=\"flex vertical\">\r\n          <div>\r\n            Add {toAdd} to all 3 sides of the inequality:\r\n          </div>\r\n          <Latex expression={`${!multiplyByNegative ? `-x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\geq -x^2${finalFunction} \\\\geq x^2  ${toAdd === 0 ? `` : `+${toAdd}`}` : `x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\leq x^2${finalFunction} \\\\leq -x^2 ${toAdd === 0 ? `` : `+${toAdd}`}`}`} display={true}></Latex>\r\n        </div>}\r\n      <div className=\"flex vertical\">\r\n        {!multiplyByNegative ? `Flip and t` : `T`}ake limit on all 3 sides:\r\n        <Latex expression={`\\\\lim_{x \\\\to 0} x^2 ${toAdd === 0 ? `` : `+${toAdd}`} \\\\leq \\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} \\\\leq \\\\lim_{x \\\\to 0} -x^2 ${toAdd === 0 ? `` : `+${toAdd}`}`} display=\"display\"></Latex>\r\n        <Latex expression={`${toAdd} \\\\leq \\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2 ${toAdd === 0 ? `` : `+${toAdd}`}` : `x^2 ${toAdd === 0 ? `` : `+${toAdd}`}`}${finalFunction} \\\\leq ${toAdd}`} display=\"display\"></Latex>\r\n      </div>\r\n      <div className=\"flex vertical\">\r\n        Answer: <Latex expression={`\\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} = ${toAdd}`} display=\"display\"></Latex>\r\n      </div>\r\n    </div>,\r\n    correct: false\r\n  }\r\n\r\n  const title = <></>\r\n  const question = <div className=\"flex vertical center small-gap\">\r\n    <h3>Select the option which correctly uses the Squeeze Theorem to evaluate:</h3>\r\n    <Latex expression={`\\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction}`} display={true}></Latex>\r\n      </div>\r\n  const hints: JSX.Element[] = []\r\n  hints.push(<div>\r\n    Focus on the step where the inequality is multiplied. When we multiply by a {multiplyByNegative ? \"negative\" : \"positive\"} quantity, do we flip the inequality?\r\n  </div>)\r\n  return { type: 'mc', title, question, input: shuffleArray([o1, o2]), hints }\r\n}\r\n\r\nconst evaluateLimit = (): Question => {\r\n  const trig = `${getRandomNumber(0, 1) === 0 ? `\\\\sin` : `\\\\cos`}`\r\n  const trigFunction = `${trig}\\\\left(\\\\frac{${getRandomNumber(1, 7)}}{x}\\\\right)`\r\n  const toAdd = getRandomNumber(0, 7);\r\n  const finalFunction = `${trigFunction}${toAdd === 0 ? `` : `+ ${toAdd}`}`\r\n  const multiplyByNegative = Boolean(getRandomNumber(0, 1))\r\n\r\n  const title = <></>\r\n  const question = <div className=\"flex vertical center\">\r\n    <h2>Evaluate the limit.</h2>\r\n    <div>Hint: Use the Squeeze Theorem.</div>\r\n  </div>\r\n  const nextToInput = <Latex expression={`\\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction} =`}></Latex>\r\n  const hints: JSX.Element[] = []\r\n  hints.push(<div>\r\n    We need to solve <Latex expression={`\\\\lim_{x \\\\to 0} ${multiplyByNegative ? `-x^2` : `x^2`}${finalFunction}`}></Latex>. Here, we see a <Latex expression={trig}/> function. What do we know about the bounds of this function?\r\n  </div>)\r\n\r\n  hints.push(<div>\r\n    Using these bounds, what can you multiply all 3 sides of the inequality by to make the middle of the inequality closer to the limit?\r\n  </div>)\r\n\r\n  if (toAdd !== 0) {\r\n    hints.push(<div>\r\n      You should be getting closer to the actual limit function now! What can you add to all sides of the inequality to make the middle inequality exactly the same as the limit function?\r\n    </div>)\r\n  }\r\n\r\n  hints.push(<div>\r\n    Now, the middle inequality should be exactly like the limit function. The next step is to take the limit of all 3 sides of the inequality.\r\n  </div>)\r\n\r\n  hints.push(<div>\r\n    Now, you can directly apply the Squeeze Theorem to find the limit!\r\n  </div>)\r\n\r\n  return { type: 'math', title, question, ans: toAdd, hints, nextToInput }\r\n\r\n}\r\n\r\nconst checkTheoremApplication = (): Question => {\r\n  const incorrectBorderFunctions = Boolean(getRandomNumber(0, 1))\r\n  const constant1 = getRandomNumber(-4, 4) / 20;\r\n  const constant2 = (incorrectBorderFunctions || getRandomNumber(0, 5) < 1) ? 0 : getRandomNumber(0, 4) / 20;\r\n  const n1 = math.parse(`x^2* sin(1/x) + ${getRandomNumber(0, 1) === 0 ? constant1 : constant1 - constant2}`);\r\n  const n2 = math.parse(`${incorrectBorderFunctions ? `x` : `x^2`} + ${constant1}`);\r\n  const n3 = math.parse(`${incorrectBorderFunctions ? `-x` : `-x^2`} + ${constant1 - constant2}`);\r\n  const functions = [\r\n    {\r\n      f: (x: number) => n2.evaluate({ x }),\r\n      min: -0.5,\r\n      max: 0.5,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'c3',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n    },\r\n    {\r\n      f: (x: number) => n3.evaluate({ x }),\r\n      min: -0.5,\r\n      max: 0.5,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: true,\r\n      classes: 'c1',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n    },\r\n    {\r\n      f: (x: number) => n1.evaluate({ x }),\r\n      min: -0.5,\r\n      max: 0,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: true,\r\n      rightArrow: false,\r\n      classes: 'c2',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      dataGap: 0.001\r\n    },\r\n    {\r\n      f: (x: number) => n1.evaluate({ x }),\r\n      min: 0,\r\n      max: 0.5,\r\n      includeLeft: false,\r\n      includeRight: false,\r\n      leftArrow: false,\r\n      rightArrow: true,\r\n      classes: 'c2',\r\n      leftCircle: false,\r\n      rightCircle: false,\r\n      dataGap: 0.001\r\n    },\r\n  ]\r\n\r\n  const title = <></>\r\n  const question = <div className=\"flex vertical center small-gap\">\r\n    <h3>Can the squeeze theorem be applied to find <Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"g(x)\" classes=\"c2\" />?</h3>\r\n    <div className=\"flex vertical center medium-gap\">\r\n      <h3>Graph of <Latex expression=\"f(x)\" classes=\"c1\" />, <Latex expression=\"g(x)\" classes=\"c2\" />, <Latex expression=\"h(x)\" classes=\"c3\" /></h3>\r\n      <FunctionGraph functions={functions} size={GRAPH_SIZE} minx={-0.3} maxx={0.3} miny={-0.3} maxy={0.3} />\r\n    </div>\r\n  </div>\r\n\r\n  const o1: Option = {\r\n    component: <div>\r\n      Yes, because <Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} /> near <Latex expression={`x = 0`} /> and <Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"f(x)\" classes=\"c1\" /><Latex expression={`=`} /><Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"h(x)\" classes=\"c3\" />\r\n    </div>,\r\n    correct: !incorrectBorderFunctions && constant2 === 0\r\n  }\r\n\r\n  const o2: Option = {\r\n    component: <div>\r\n      Yes, because {!incorrectBorderFunctions ? <><Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} /> near <Latex expression={`x = 0`} /></> : <><Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"f(x)\" classes=\"c1\" /><Latex expression={`=`} /><Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"h(x)\" classes=\"c3\" /></>}\r\n    </div>,\r\n    correct: false\r\n  }\r\n\r\n  const o3: Option = {\r\n    component: <div>\r\n      No, because it is not true that <><Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} /> near <Latex expression={`x = 0`} /></>\r\n    </div>,\r\n    correct: incorrectBorderFunctions\r\n  }\r\n\r\n  const o4: Option = {\r\n    component: <div>\r\n      No, because it is not true that <> <Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"f(x)\" classes=\"c1\" /><Latex expression={`=`} /><Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"h(x)\" classes=\"c3\" />\r\n      </>\r\n    </div>,\r\n    correct: constant2 !== 0\r\n  }\r\n\r\n  const hints: JSX.Element[] = []\r\n  hints.push(<div className=\"flex vertical center\">\r\n    <div>\r\n      Recall that there are two conditions that need to be satisified to apply the Squeeze Theorem for a function <Latex classes={'c2'} expression={`g(x)`} />:\r\n    </div>\r\n    <div>\r\n      <ul className=\"text-start\">\r\n        <li>\r\n          <Latex classes={'c1'} expression={`f(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c2'} expression={`g(x)`} /> <Latex expression={`\\\\leq`} /> <Latex classes={'c3'} expression={`h(x)`} />\r\n        </li>\r\n        <li>\r\n          <Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"f(x)\" classes=\"c1\" /><Latex expression={`=`} /><Latex expression={`\\\\lim_{x \\\\to 0}`} /><Latex expression=\"h(x)\" classes=\"c3\" />\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>)\r\n\r\n  hints.push(<div className=\"flex vertical center medium-gap\">\r\n    <div>\r\n      Are both of these conditions satisfied in the graph?\r\n    </div>\r\n    <div>\r\n      <h3>Graph of <Latex expression=\"f(x)\" classes=\"c1\" />, <Latex expression=\"g(x)\" classes=\"c2\" />, <Latex expression=\"h(x)\" classes=\"c3\" /></h3>\r\n      <FunctionGraph functions={functions} size={GRAPH_SIZE} minx={-0.3} maxx={0.3} miny={-0.3} maxy={0.3} />\r\n    </div>\r\n  </div>)\r\n\r\n  return { type: 'mc', title, question, input: [o1, o2, o3, o4], hints }\r\n\r\n}\r\n\r\nconst generateRandomQuestion = (): Question => {\r\n  const rand = getRandomNumber(1, 10);\r\n  let q: Question = null;\r\n  if (rand <= 2) {\r\n    q = optionsForLimitSteps();\r\n  } else if (rand <= 6) {\r\n    q = evaluateLimit();\r\n  } else {\r\n    q = checkTheoremApplication();\r\n  }\r\n  return q;\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","nerdamer","require","shuffleArray","array","i","length","j","Math","floor","random","getRandomNumber","min","max","getRandomWithExclusions","exclusions","validValues","includes","push","generateOrderedValues","n","increasing","extreme","arguments","undefined","increment","values","nextDiff","nextValue","sortPolynomialByDegree","polynomial","coefficients","coeffs","ans","each","e","toString","Number","concat","buildPolynomialFromCoeffs","String","isNaN","getCoeffsOfPolynomial","getRootsOfPolynomial","elements","symbol","r1","convertToDecimal","number","text","getStringFactorFromXval","xval","abs","convertArrayToObject","obj","currentObj","hasOwnProperty","findLCM","a","b","findGCD","x","y","generateLimitTableData","xVal","start","end","data","val","formatPolynomialToLatex","math","toTex","replaceAll","nerdamerFormatToLatex","expression","toTeX","generateFunctionData","f","dataGap","createFunctionGraph","color","classes","leftArrow","rightArrow","type","filter","d","invert","findIntersections","unshift","line","name","uuidv4","createArrowMarker","id","append","datum","attr","func","xMin","xMax","tolerance","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","style","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","rand","trig","trigFunction","toAdd","finalFunction","multiplyByNegative","Boolean","o1","component","_jsxs","className","children","Latex","display","correct","o2","title","_Fragment","question","hints","input","optionsForLimitSteps","nextToInput","evaluateLimit","incorrectBorderFunctions","constant1","constant2","n1","n2","n3","evaluate","FunctionGraph","o3","o4","checkTheoremApplication"],"sourceRoot":""}