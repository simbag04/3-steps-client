{"version":3,"file":"static/js/186.b200ce9d.chunk.js","mappings":"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","sources":["components/latex/Latex.js","helpers/constants.js","helpers/expression-generators.js","helpers/functions.js","helpers/graph-helpers.js"],"sourcesContent":["/**\r\n * Latex component that uses katex to render math in latex font\r\n * Parameters: \r\n *  - classes: custom classes to be added to returned html\r\n *  - expression: math to be rendered as latex\r\n *  - inline: boolean value indicating whether latex should be rendered inline or block mode\r\n */\r\n\r\nimport 'katex/dist/katex.min.css';  // Import KaTeX styles\r\nimport { BlockMath, InlineMath } from 'react-katex';\r\n\r\nconst Latex = ({classes, expression, display}) => {\r\n  return (\r\n    <span className={classes}>\r\n      {!display ? \r\n      <InlineMath math={expression} /> :\r\n      <BlockMath math={expression} /> }\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default Latex","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as math from 'mathjs'\r\nimport { generateFunctionData } from './graph-helpers';\r\nimport { getRandomWithExclusions, getRandomNumber, convertArrayToObject, findLCM } from './functions';\r\n\r\n/**\r\n * Compresses polynomial so it fits on 10 by 10 graph\r\n * @param {string} expression polynomial to compress\r\n * @param {number} max max (and min) value of local min/max\r\n * @param {array} values other values that should be within [-max, max]\r\n * @returns math.js node representing scaled polynomial\r\n */\r\nfunction compressPolynomial(expression, max, values) {\r\n  const node = math.parse(expression);\r\n\r\n  /// Makes all values within expression fit in graph range\r\n  // find most extreme value\r\n  let maxabs = Math.max(max, ...values);\r\n  for (let i = -11; i < 11; i += 0.01) {\r\n    maxabs = Math.max(Math.abs(node.evaluate({ x: i })), maxabs);\r\n  }\r\n\r\n  // scale to make graph fit\r\n  const scale = Math.ceil(maxabs / max);\r\n  const scaledNode = math.parse(`(1/${scale})(${expression})`);\r\n  return scaledNode;\r\n}\r\n\r\n/**\r\n * modifies expression to have whole number at a point\r\n * @param {node} node math.js node with current function\r\n * @returns modified node, x: modified math.js node that has a whole number value at x\r\n */\r\nfunction modifyForWholeNumber(node) {\r\n  const f = (x) => node.evaluate({ x });\r\n  let data = generateFunctionData(f, -11, 11);\r\n\r\n  // filter out values where y is > 7 or < -7, x is > 8 or < -8\r\n  data = data.filter(d => Math.abs(d.y) < 7 && Math.abs(d.x) < 8);\r\n\r\n  // random x value in domain\r\n  const minx = Math.ceil(data[0].x);\r\n  const maxx = Math.floor(data[data.length - 1].x);\r\n\r\n  const x = getRandomWithExclusions(minx, maxx, [-1, 0, 1]);\r\n  const y = f(x);\r\n\r\n  // find constant by which to move graph up or down to get integer y\r\n  let move;\r\n  if (Math.round(y) < 0) {\r\n    move = Math.min(-2, Math.round(y)) - y; // y must be <= -2\r\n  } else {\r\n    move = Math.max(2, Math.round(y)) - y; // int y must be >= 2\r\n  }\r\n\r\n  let expression = `(${node.toString()} + ${move})`\r\n  const modifiedNode = math.parse(expression);\r\n  return { node: modifiedNode, x };\r\n}\r\n\r\n/**\r\n * Generates ready to graph random polynomial function\r\n * @param {number} degree degree of polynomial to be generated\r\n * @returns ready to graph polynomial function with integer point at x\r\n */\r\nfunction generateRandomPolynomial(degree) {\r\n  const expression = getPolynomialFunction(degree);\r\n  const scaledNode = compressPolynomial(expression, 9, []);\r\n  return modifyForWholeNumber(scaledNode);\r\n}\r\n\r\n/**\r\n * generates random polynomial function with random whole number coefficients \r\n * @param {number} degree degree of polynomial to generate\r\n * @param {boolean} skipConstant boolean whether to not generate constant \r\n * @returns random polynomial function with random coefficients\r\n */\r\nfunction getPolynomialFunction(degree, skipConstant = false) {\r\n  const coefficients = [];\r\n  for (let i = 0; i <= degree; i++) {\r\n    coefficients.push(getRandomNumber(-5, 5));\r\n  }\r\n\r\n  let terms = coefficients.map((coef, exp) => {\r\n    if (exp === 0) {\r\n      if (skipConstant || coef === 0) return \"\";\r\n      return coef < 0 ? `${coef}` : `+${coef}`;\r\n    } else if (exp === 1) {\r\n      if (coef === 0) return \"\";\r\n      let t = `${Math.abs(coef) === 1 ? \"\" : `${Math.abs(coef)}*`}x`\r\n      return coef < 0 ? `-${t}` : `+${t}`;\r\n    } else {\r\n      if (coef === 0) return \"\";\r\n      let t = `${coef === 1 ? \"\" : coef === -1 ? \"-\" : `${Math.abs(coef)}*`}x^${exp}`\r\n      return (coef < 0 || exp === coefficients.length - 1) ? `-${t}` : `+${t}`;\r\n    }\r\n  });\r\n\r\n  terms = terms.filter(t => t !== \"\");\r\n\r\n  const expression = terms.reverse().join('').replace(/\\s+/g, '');\r\n  if (expression.length < 2) return '(2*x)';\r\n  return expression;\r\n}\r\n\r\n/**\r\n * generates polynomial with point (not necessarily for a graph)\r\n * @param {Number} degree of polynomial\r\n * @param {Number} x value of point\r\n * @param {Number} y value of point\r\n * @returns string expression of polynomial\r\n */\r\nfunction getPolynomialFunctionWithPoint(degree, x, y) {\r\n  let expression = getPolynomialFunction(degree, true);\r\n\r\n  // add constant to function to make (x, y) on graph\r\n  let currVal = math.evaluate(expression, {x});\r\n  const diff = y - Math.round(currVal);\r\n  expression = `${expression} ${diff < 0 ? diff : diff > 0 ? `+ ${diff}` : ''}`;\r\n  return expression;\r\n}\r\n\r\n/**\r\n * Generates a random polynomial that passes through a point and fits on 10 by 10 graph\r\n * @param {number} degree degree of polynomial to generate\r\n * @param {number} x x value of point\r\n * @param {number} y y value of point\r\n * @returns math.js node representing polynomial expression\r\n */\r\nfunction generateRandomPolynomialWithPoint(degree, x, y) {\r\n  // generate polynomial\r\n  let expression = getPolynomialFunction(degree);\r\n  let node = math.parse(expression);\r\n\r\n  // initialize variables\r\n  let max = 9;\r\n  node = compressPolynomial(node.toString(), max, []);\r\n  let yval = node.evaluate({ x });\r\n  let move = y - yval;\r\n\r\n  // compress polynomial enough that constant by which graph moves up or down is still within [-10, 10]\r\n  while (Math.abs(move) > 10 - max) {\r\n    max--;\r\n    node = compressPolynomial(node.toString(), max, [Math.abs(yval)]);\r\n    yval = node.evaluate({ x });\r\n    move = y - yval;\r\n  }\r\n  expression = `(${node.toString()} + ${move})`\r\n  const modifiedNode = math.parse(expression);\r\n  return modifiedNode;\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {Array} points array of 3 points ({x, y}) to fit quadratic to\r\n * @returns math.js node representing polynomial expression\r\n */\r\nfunction fitPointsToQuadratic(points) {\r\n  // Ensure we have at least 3 points\r\n  if (points.length < 3) {\r\n    console.error('At least 3 points are required for quadratic regression.');\r\n    return null;\r\n  }\r\n\r\n  // get points\r\n  const x1 = points[0].x;\r\n  const y1 = points[0].y;\r\n  const x2 = points[1].x;\r\n  const y2 = points[1].y;\r\n  const x3 = points[2].x;\r\n  const y3 = points[2].y;\r\n\r\n  // formula\r\n  const det = (x1 - x2) * (x1 - x3) * (x2 - x3);\r\n  const a = ((x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / det);\r\n  const b = ((x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / det);\r\n  const c = ((x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / det);\r\n\r\n  // Return math.js node\r\n  return math.parse(`${a === 0 ? `` : `${a}x^2`} + ${b === 0 ? `` : `${b}x`} + ${c}`)\r\n}\r\n\r\n/**\r\n * @param {Array} functions: array of variables with their corresponding values to be used in term\r\n * @param {Array} operators: possible operators, such as '+', '-', etc.\r\n * @param {Number} depth of equation, i.e. how many levels of nesting in terms\r\n * @returns random term that uses functions variables and operators\r\n */\r\nfunction generateLimitPropertyTerm(functions, operators, depth = 2) {\r\n  if (depth === 0) {\r\n    // base case\r\n    const coefficient = getRandomNumber(2, 3); // coefficient of variable\r\n    const f = functions[getRandomNumber(0, functions.length - 1)].f // variable\r\n    return `(${coefficient}${f})`;\r\n  } else {\r\n    // recursive case\r\n    const operator = operators[getRandomNumber(0, operators.length - 1)]; // random operator\r\n    let leftOperand = generateLimitPropertyTerm(functions, operators, depth - 1);\r\n    let rightOperand = generateLimitPropertyTerm(functions, operators, depth - 1);\r\n\r\n    if (operator === \"^\") {\r\n      // exponent operator\r\n      const numerator = getRandomNumber(0, 1); // whether this will be a fractional exponent\r\n      if (numerator) {\r\n        // fractional exponent\r\n        // make sure result is whole number\r\n        const val = math.evaluate(leftOperand, convertArrayToObject(functions)); // evaluate\r\n        const root = val < 0 ? 3 : getRandomNumber(2, 3); // odd root if val < 0\r\n        const int = Math.round(math.evaluate(`nthRoot(${val}, ${root})`)); // evaluate what root should be\r\n\r\n        // constant to add to make whole number result\r\n        let add = math.evaluate(`${val} - ${int}^${root}`);\r\n        add = add > 0 ? ` - ${add}` : `+ ${Math.abs(add)}`;\r\n        return `nthRoot(${leftOperand}${add}, ${root})`\r\n      }\r\n\r\n      // normal power case\r\n      let rightOperand = `${getRandomNumber(2, 3)}`;\r\n      return `(${leftOperand}${operator}${rightOperand})`\r\n\r\n    } else if (operator === \"/\") {\r\n      // ensure whole number result \r\n      // evaluate operands\r\n      let left = math.evaluate(leftOperand, convertArrayToObject(functions))\r\n      let right = math.evaluate(rightOperand, convertArrayToObject(functions))\r\n\r\n      // ensure operands aren't 0. this is to make sure no issues with finding lcm\r\n      if (right === 0) {\r\n        rightOperand = `(${rightOperand} + 1)`; // add 1 if 0\r\n        right = math.evaluate(rightOperand, convertArrayToObject(functions));\r\n      }\r\n      if (left === 0) {\r\n        leftOperand = `(${leftOperand} + 1)`; // add 1 if 0\r\n        left = math.evaluate(leftOperand, convertArrayToObject(functions));\r\n      }\r\n\r\n      // find lcm and simplify node\r\n      const lcm = findLCM(left, right);\r\n      const l = math.simplify(`${Math.round(lcm / left)}*${leftOperand}`).toString().replaceAll(\" * \", \"\")\r\n\r\n      return `((${l})${operator}${rightOperand})`\r\n    } else {\r\n      // normal operand\r\n      return `(${leftOperand}${operator}${rightOperand})`\r\n    }\r\n  }\r\n}\r\n\r\nexport { generateRandomPolynomial, generateRandomPolynomialWithPoint, fitPointsToQuadratic, generateLimitPropertyTerm, getPolynomialFunctionWithPoint, getPolynomialFunction }","import * as math from \"mathjs\"\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\n/**\r\n * Shuffles an array\r\n * @param {array} array array to be shuffled\r\n * @returns shuffled array\r\n */\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1)); // Generate a random index from 0 to i\r\n\r\n    // Swap elements at i and j\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * generates a random number\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @returns random number in the range [min, max]\r\n */\r\nfunction getRandomNumber(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * generates a random number with exclusions\r\n * @param {number} min minimum value of random number\r\n * @param {number} max maximum value of random number\r\n * @param {array} exclusions numbers to be excluded from generation\r\n * @returns random number in the range [min, max] excluding exclusions\r\n */\r\nfunction getRandomWithExclusions(min, max, exclusions) {\r\n  const validValues = [];\r\n  for (let i = min; i <= max; i++) {\r\n    if (!exclusions.includes(i)) {\r\n      validValues.push(i);\r\n    }\r\n  }\r\n\r\n  if (validValues.length === 0) {\r\n    return max;\r\n  }\r\n\r\n  const randomIndex = getRandomNumber(0, validValues.length - 1);\r\n  return validValues[randomIndex];\r\n}\r\n\r\n/**\r\n * @param {Number} n number of values to generate\r\n * @param {boolean} increasing true if values should be increasing, false if decreasing\r\n * @returns array of n ordered numbers \r\n */\r\nfunction generateOrderedValues(n, increasing, extreme = 10, increment = 4) {\r\n  if (n <= 0) {\r\n    return [];\r\n  }\r\n\r\n  const values = [Math.floor(Math.random() * extreme) + 1]; // Initialize with a random value\r\n\r\n  while (values.length < n) {\r\n    // generate a value greater than the last one\r\n    const nextDiff = getRandomNumber(1, increment) * (increasing ? 1 : -1);\r\n    const nextValue = values[values.length - 1] + nextDiff;\r\n    values.push(nextValue);\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} polynomial string with a polynomial\r\n * @returns polynomial sorted in order of degree\r\n */\r\nfunction sortPolynomialByDegree(polynomial) {\r\n  // get coefficients with nerdamer\r\n  const coefficients = nerdamer.coeffs(polynomial, 'x');\r\n  let ans = \"\";\r\n  const coeffs = [];\r\n  coefficients.each(function (e) {\r\n    coeffs.push(nerdamer(e).toString());\r\n  })\r\n\r\n  // build expression\r\n  for (let i = coeffs.length - 1; i >= 0; i--) {\r\n    if (coeffs[i] === \"0\") continue; // skip 0 terms\r\n\r\n    // add \"+\" before positive coefficient terms\r\n    if (i !== coeffs.length - 1) {\r\n      if (Number(coeffs[i]) > 0) {\r\n        ans += \"+\"\r\n      }\r\n    }\r\n\r\n    if (coeffs[i] !== \"1\" || (coeffs[i] === \"1\" && i === 0)) {\r\n      ans += coeffs[i] === \"-1\" ? i === 0 ? \"-1\" : \"-\" : coeffs[i];\r\n    }\r\n\r\n    if (i > 1) {\r\n      ans += `x^${i}`;\r\n    } else if (i === 1) {\r\n      ans += 'x';\r\n    }\r\n  }\r\n  return ans;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} xval xvalue from which to create factor\r\n * @returns String in form (x - p), where p is the xval\r\n */\r\nfunction getStringFactorFromXval(xval) {\r\n  const x = Number(xval);\r\n  if (x < 0) {\r\n    return `(x + ${Math.abs(x)})`\r\n  } else if (x > 0) {\r\n    return `(x - ${x})`\r\n  } else {\r\n    return `(x)`\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array where each element is in the form {f: String, value: Number}\r\n * @returns object with keys as all the f Strings, values as the value of that String\r\n */\r\nfunction convertArrayToObject(array) {\r\n  const obj = {};\r\n  for (let i = 0; i < array.length; i++) {\r\n    const currentObj = array[i];\r\n    if (currentObj.hasOwnProperty('f')) {\r\n      const key = currentObj['f'];\r\n      obj[key] = currentObj['value'];\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * @param {Number} a \r\n * @param {Number} b \r\n * @returns least common multiple of a and b\r\n */\r\nfunction findLCM(a, b) {\r\n  // Calculate the greatest common divisor (GCD) using Euclidean algorithm\r\n  function findGCD(x, y) {\r\n    if (y === 0) {\r\n      return x;\r\n    }\r\n    return findGCD(y, x % y);\r\n  }\r\n\r\n  // LCM is the product of the two numbers divided by their GCD\r\n  return (a * b) / findGCD(a, b);\r\n}\r\n\r\n/**\r\n * @param {Number} xVal at which table will \"zoom in\"\r\n * @param {Array} values to use as yvalues in table\r\n * @param {Number} start of xs in table\r\n * @param {Number} end of xs in table\r\n * @returns data array containing x, y pairs for points that could be used in a limit table\r\n */\r\nfunction generateLimitTableData(xVal, values, start, end) {\r\n  const increasing = values[1] - values[0] >= 0;\r\n  const data = [];\r\n  // build table data\r\n  for (let i = start; i <= end; i++) {\r\n    const val = values[i - start];\r\n\r\n    // zooming in to the left of xVal\r\n    if (i === xVal && xVal !== start) {\r\n      data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n      data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n    }\r\n\r\n    data.push({ x: i, y: val });  // other xvalues\r\n\r\n    // zooming in to the right of xval\r\n    if (i === xVal && xVal !== end) {\r\n      data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n      data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n    }\r\n  }\r\n\r\n  return {data}\r\n}\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with mathjs\r\n */\r\nfunction formatPolynomialToLatex(polynomial) {\r\n  return math.simplifyCore(polynomial).toTex().replaceAll('\\\\cdot', '').replaceAll('~', '');\r\n}\r\n\r\n/**\r\n * @param {String} polynomial to format\r\n * @returns formatted latex polynomial formatted with nerdamer\r\n */\r\nfunction nerdamerFormatToLatex(expression) {\r\n  return nerdamer(expression).toTeX().replaceAll('\\\\cdot', '').replaceAll('~', '')\r\n}\r\n\r\nexport { getRandomNumber, getRandomWithExclusions, generateOrderedValues, shuffleArray, sortPolynomialByDegree, getStringFactorFromXval, convertArrayToObject, findLCM, generateLimitTableData, formatPolynomialToLatex, nerdamerFormatToLatex }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += 0.01) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type) => {\r\n  let data = generateFunctionData(f, min, max); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({x: d, y: f(d)}); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({x: d, y: f(d)}); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = 'function-arrow'\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n  \r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n    \r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n    \r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * creates -10 by 10 blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([-1 * numCells / 2, numCells / 2])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([-1 * numCells / 2, numCells / 2])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build grid lines\r\n  svg\r\n    .selectAll(\".x-grid-line\")\r\n    .data(d3.range(-1 * numCells / 2, numCells / 2 + 1))\r\n    .enter().append(\"line\")\r\n    .attr(\"class\", \"x-grid-line\")\r\n    .attr(\"x1\", d => xScale(d))\r\n    .attr(\"x2\", d => xScale(d))\r\n    .attr(\"y1\", 0)\r\n    .attr(\"y2\", height)\r\n    .attr(\"stroke\", \"lightgray\");\r\n\r\n  svg\r\n    .selectAll(\".y-grid-line\")\r\n    .data(d3.range(-1 * numCells / 2, numCells / 2 + 1))\r\n    .enter().append(\"line\")\r\n    .attr(\"class\", \"y-grid-line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", d => yScale(d))\r\n    .attr(\"y2\", d => yScale(d))\r\n    .attr(\"stroke\", \"lightgray\");\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  // add marks and text to xaxis\r\n  xScale.ticks().forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(tick)\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  yScale.ticks().forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(tick)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine }\r\n"],"names":["_ref","classes","expression","display","_jsx","className","children","BlockMath","math","InlineMath","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","compressPolynomial","max","values","node","maxabs","Math","apply","concat","_toConsumableArray","i","abs","evaluate","x","scale","ceil","generateRandomPolynomial","degree","f","data","generateFunctionData","filter","d","y","move","minx","maxx","floor","length","getRandomWithExclusions","round","min","toString","modifyForWholeNumber","getPolynomialFunction","skipConstant","arguments","undefined","coefficients","push","getRandomNumber","terms","map","coef","exp","t","reverse","join","replace","getPolynomialFunctionWithPoint","currVal","diff","generateRandomPolynomialWithPoint","yval","fitPointsToQuadratic","points","console","error","x1","y1","x2","y2","x3","y3","det","a","b","c","generateLimitPropertyTerm","functions","operators","depth","coefficient","operator","leftOperand","rightOperand","val","convertArrayToObject","root","int","add","left","right","lcm","findLCM","l","replaceAll","nerdamer","require","shuffleArray","array","j","random","exclusions","validValues","includes","generateOrderedValues","n","increasing","extreme","increment","nextDiff","nextValue","sortPolynomialByDegree","polynomial","coeffs","ans","each","e","Number","getStringFactorFromXval","xval","obj","currentObj","hasOwnProperty","findGCD","generateLimitTableData","xVal","start","end","formatPolynomialToLatex","toTex","nerdamerFormatToLatex","toTeX","createFunctionGraph","svg","width","height","color","xScale","yScale","leftArrow","rightArrow","type","invert","findIntersections","unshift","line","d3","name","createArrowMarker","id","uuidv4","append","datum","attr","select","raise","func","xMin","xMax","tolerance","xMid","yMid","createMultipleFunctionsGraph","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","createBlankCanvas","svgRef","textSize","numCells","half","current","selectAll","remove","domain","range","enter","tickMarks","tickText","ticks","forEach","tick","style","text","size","createLimitLine","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","createFunctionLimitLine","functionLine","pathLength","fColor","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN"],"sourceRoot":""}