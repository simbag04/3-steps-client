{"version":3,"file":"static/js/775.5742fac2.chunk.js","mappings":"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","sources":["components/content-components/tables/FunctionTable.js","topics/evaluating-limits-using-tables/generate-question.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\"\r\nimport { useWindowSize } from \"../../../helpers/useWindowSize\";\r\nimport '../../../styles/table.css'\r\n\r\nexport const FunctionTable = ({ xTitle, yTitle, data }) => {\r\n  const tableRef = useRef(null);\r\n  const [width, setWidth] = useState(0);\r\n  const originalWidthRef = useRef(null);\r\n  const windowWidth = useWindowSize()[0];\r\n  const [display, setDisplay] = useState(\"horizontal\");\r\n\r\n  // gets width of table\r\n  useEffect(() => {\r\n    const element = tableRef.current;\r\n    if (!element) return;\r\n\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      for (const entry of entries) {\r\n        if (entry.target === element) {\r\n          if (display === \"horizontal\") {\r\n            originalWidthRef.current = entry.contentRect.width;\r\n          }\r\n          setWidth(entry.contentRect.width);\r\n        }\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(element);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(element);\r\n      resizeObserver.disconnect();\r\n    };\r\n  }, [tableRef, windowWidth, display]);\r\n\r\n  useEffect(() => {\r\n    if (width > 0.8 * windowWidth) {\r\n      setDisplay(\"vertical\")\r\n    } else if (originalWidthRef && originalWidthRef.current && originalWidthRef.current < 0.8 * windowWidth) {\r\n      setDisplay(\"horizontal\")\r\n    }\r\n  }, [width, windowWidth])\r\n\r\n  return (\r\n    <table ref={tableRef} className={`function-table`}>\r\n      <tbody className={`flex ${display}`}>\r\n        <tr>\r\n          <th>{xTitle}</th>\r\n          <th>{yTitle}</th>\r\n        </tr>\r\n        {data.map((d, i) => {\r\n          return (\r\n            <tr key={i} className={i % 2 === 0 ? \"table-color-1\" : \"table-color-2\"}>\r\n              <td>{d.x}</td>\r\n              <td>{d.y}</td>\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import { generateOrderedValues, getRandomNumber, getRandomWithExclusions, getStringFactorFromXval, shuffleArray, sortPolynomialByDegree } from \"../../helpers/functions\";\r\nimport { FunctionTable } from \"../../components/content-components/tables/FunctionTable\";\r\nimport Latex from \"../../helpers/Latex\";\r\nimport * as math from 'mathjs'\r\n\r\nconst nerdamer = require(\"nerdamer/all.min\")\r\n\r\nfunction functionToTable() {\r\n  const title = <></>\r\n\r\n  // generate random function\r\n  const xVal = getRandomWithExclusions(-9, 9, [0]);\r\n\r\n  // get 2-3 factors on top\r\n  const factor1 = getStringFactorFromXval(xVal);\r\n  const factor2 = getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0]));\r\n  const factor3 = getRandomNumber(0, 1) === 0 ?\r\n    getStringFactorFromXval(getRandomWithExclusions(-9, 9, [0])) : \"\";\r\n\r\n  // get expanded latex version of equation\r\n  const numerator = sortPolynomialByDegree(nerdamer(`${factor1}${factor2}${factor3}`).expand());\r\n  const equation = `(${numerator})/${factor1}`;\r\n  const latexEq = nerdamer(equation).toTeX().replaceAll(' \\\\cdot ', \"\")\r\n\r\n  // create question\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Which table is best for estimating the limit of this function?</h2>\r\n      <div>Assume both tables have correct function values.</div>\r\n    </div>\r\n    <Latex expression={`g(x) = ${latexEq}`} classes={'large-font'} display={true} />\r\n  </div>\r\n\r\n  const node = math.parse(`${factor2}${factor3}`);\r\n  const f = (x) => node.evaluate({ x });\r\n\r\n  // create options\r\n  // first option\r\n  const data1 = [];\r\n  for (let i = xVal - 5; i <= xVal + 5; i++) {\r\n    data1.push({ x: i, y: xVal === i ? 'und' : Math.round(f(i)) });\r\n  }\r\n\r\n  // second option data\r\n  const data2 = [];\r\n  for (let i = xVal - 2; i <= xVal + 2; i++) {\r\n    if (i !== xVal) {\r\n      data2.push({ x: i, y: Math.round(f(i)) })\r\n    } else {\r\n      data2.push({ x: i - 0.1, y: fixRounding(f(i - 0.1), 10) });\r\n      data2.push({ x: i - 0.01, y: fixRounding(f(i - 0.01), 100) });\r\n      data2.push({ x: i - 0.001, y: fixRounding(f(i - 0.001), 1000) });\r\n      data2.push({ x: i, y: 'und' });\r\n      data2.push({ x: i + 0.001, y: fixRounding(f(i + 0.001), 1000) });\r\n      data2.push({ x: i + 0.01, y: fixRounding(f(i + 0.01), 100) });\r\n      data2.push({ x: i + 0.1, y: fixRounding(f(i + 0.1), 10) });\r\n    }\r\n  }\r\n\r\n  const option1 = {\r\n    component: <FunctionTable xTitle={<Latex expression={`x`} />} yTitle={<Latex expression={`g(x)`} />} data={data1} />,\r\n    correct: false\r\n  }\r\n\r\n  const option2 = {\r\n    component: <FunctionTable xTitle={<Latex expression={`x`} />} yTitle={<Latex expression={`g(x)`} />} data={data2} />,\r\n    correct: true\r\n  }\r\n\r\n  const input = shuffleArray([option1, option2])\r\n  const type = 'mc'\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>Focus on <Latex expression={`x = ${xVal}`} />. Recall that a limit is about getting infinitely close to the xvalue.</div>\r\n      <div className=\"flex vertical center small-gap\">\r\n        {option1.component}\r\n        {option2.component}\r\n      </div>\r\n    </div>,\r\n    <>\r\n      <div>When using a table, we really need to \"zoom in\" near the x-value. Which table does that?</div>\r\n    </>\r\n  ]\r\n\r\n  return { title, question, input, type, hints }\r\n}\r\n\r\nfunction tableToLimit() {\r\n  const data = []; // data for table\r\n  const xVal = getRandomNumber(-9, 9); // xval at which to evaluate limit\r\n\r\n  // 0: left, 1: right, 2: 2-sided\r\n  const sign = getRandomNumber(0, 2);\r\n\r\n  // domain for table\r\n  const startX = xVal - (getRandomNumber(0, 1) === 0 ? 3 : 0);\r\n  const endX = xVal + ((getRandomNumber(0, 1) === 0 || xVal === startX) ? 3 : 0);\r\n\r\n  const increasing = getRandomNumber(0, 1); // whether table values are increasing or decreasing\r\n  const orderedValues = generateOrderedValues(endX - startX + 1, increasing); // values in table\r\n  let ans = String(orderedValues[xVal === startX ? 0 : 3]); // default answer\r\n\r\n  // build table data\r\n  for (let i = startX; i <= endX; i++) {\r\n    const val = orderedValues[i - startX];\r\n\r\n    // evaluate answer\r\n    if (i === xVal && (i === startX || i === endX)) {\r\n      if ((i === startX && sign === 0) || (i === endX && sign === 1) || sign === 2) {\r\n        ans = \"dne\";\r\n      }\r\n    }\r\n\r\n    // zooming in to the left of xVal\r\n    if (i === xVal && xVal !== startX) {\r\n      data.push({ x: i - 0.1, y: val - (increasing ? 0.1 : -0.1) })\r\n      data.push({ x: i - 0.01, y: val - (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i - 0.001, y: val - (increasing ? 0.001 : -0.001) })\r\n    }\r\n\r\n    data.push({ x: i, y: val });  // other xvalues\r\n\r\n    // zooming in to the right of xval\r\n    if (i === xVal && xVal !== endX) {\r\n      data.push({ x: i + 0.001, y: val + (increasing ? 0.001 : -0.001) })\r\n      data.push({ x: i + 0.01, y: val + (increasing ? 0.01 : -0.01) })\r\n      data.push({ x: i + 0.1, y: val + (increasing ? 0.1 : -0.1) })\r\n    }\r\n  }\r\n\r\n  // other question components\r\n  const title = <></> // no title as title is included in question\r\n\r\n  const signText = sign === 0 ? `^\\\\textbf{-}` : sign === 1 ? `^\\\\textbf{+}` : ``;\r\n  const nextToInput = <span>\r\n    <Latex expression={`\\\\lim_{x \\\\to ${xVal + signText}}g(x)`} inline={true} /> =\r\n  </span>\r\n\r\n  const question = <div className=\"flex vertical center medium-gap\">\r\n    <div className=\"flex vertical center small-gap\">\r\n      <h2>Estimate the limit from the table.</h2>\r\n      <div>Enter \"dne\" if the limit doesn't exist or cannot be evaluated from the table</div>\r\n    </div>\r\n    <FunctionTable xTitle={<Latex expression={`x`} />} yTitle={<Latex expression={`g(x)`} />} data={data} />\r\n  </div>\r\n\r\n  const type = 'frq';\r\n\r\n  const hints = [\r\n    <div className=\"flex vertical center small-gap\">\r\n      <div>We are focused on evaluating the limit as <Latex expression={`x`} /> approaches {xVal} from {sign === 0 ? \"the left\" : sign === 1 ? \"the right\" : \"both sides\"}. What side(s) do we see in the table?</div>\r\n      <FunctionTable xTitle={<Latex expression={`x`} />} yTitle={<Latex expression={`g(x)`} />} data={data} />\r\n    </div>,\r\n    <>\r\n      {ans === \"dne\" ?\r\n        <div>\r\n          Does the table show the sides that we need?\r\n        </div> :\r\n        <div>\r\n          Look closely at the values in the table near <Latex expression={`x = ${xVal}`} />. What do they seem to be approaching?\r\n        </div>}\r\n    </>\r\n  ]\r\n\r\n  return { title, question, ans, type, nextToInput, hints }\r\n}\r\n\r\nfunction generateRandomQuestion() {\r\n  // determine type of question to generate\r\n  const rand = getRandomNumber(1, 10)\r\n  let q = null;\r\n  if (rand <= 7) {\r\n    q = tableToLimit();\r\n  } else {\r\n    q = functionToTable();\r\n  }\r\n\r\n  return q;\r\n}\r\n\r\n/**\r\n * @param {Number} val value to round\r\n * @param {Number} degree of places to round to: ex. if you want to round to the tenths place, this should be 10\r\n * @returns rounded value\r\n */\r\nfunction fixRounding(val, degree) {\r\n  console.log(val)\r\n  return Math.floor(val * degree * 10) / (degree * 10);\r\n}\r\n\r\nexport default generateRandomQuestion"],"names":["FunctionTable","_ref","xTitle","yTitle","data","tableRef","useRef","_useState","useState","_useState2","_slicedToArray","width","setWidth","originalWidthRef","windowWidth","useWindowSize","_useState3","_useState4","display","setDisplay","useEffect","element","current","resizeObserver","ResizeObserver","entries","_step","_iterator","_createForOfIteratorHelper","s","n","done","entry","value","target","contentRect","err","e","f","observe","unobserve","disconnect","_jsx","ref","className","children","_jsxs","concat","map","d","i","x","y","nerdamer","require","fixRounding","val","degree","console","log","Math","floor","getRandomNumber","xVal","sign","startX","endX","increasing","orderedValues","generateOrderedValues","ans","String","push","title","_Fragment","signText","nextToInput","Latex","expression","inline","question","type","hints","tableToLimit","getRandomWithExclusions","factor1","getStringFactorFromXval","factor2","factor3","numerator","sortPolynomialByDegree","expand","equation","latexEq","toTeX","replaceAll","classes","node","math","evaluate","data1","round","data2","option1","component","correct","option2","input","shuffleArray","functionToTable"],"sourceRoot":""}