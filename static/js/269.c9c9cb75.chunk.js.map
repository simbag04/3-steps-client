{"version":3,"file":"static/js/269.c9c9cb75.chunk.js","mappings":"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","sources":["components/content-components/graphs/AsymptoticGraph.js","components/content-components/graphs/FunctionGraph.tsx","helpers/constants.tsx","helpers/graph-helpers.js","topics/01-limits/09-exploring-types-of-discontinuities/Sections.tsx","topics/01-limits/09-exploring-types-of-discontinuities/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates asymptotic graph with dashed lines at asymptotes\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n *  - x: array of x values of asymptotes\r\n *  - y: array of y values of asymptotes\r\n */\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\n\r\nconst AsymptoticGraph = ({ functions, size, x, y }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      svg.select(\".tick-text\").raise();\r\n\r\n      // dashed lines on asymptotes\r\n      const line = d3.line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n\r\n      for (let i = 0; i < y.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: xScale.invert(0), y: y[i] }, { x: xScale.invert(width), y: y[i] }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n\r\n      for (let i = 0; i < x.length; i++) {\r\n        svg.append('path')\r\n          .datum([{ x: x[i], y: yScale.invert(0) }, { x: x[i], y: yScale.invert(height) }])\r\n          .attr('class', 'stroke ')\r\n          .attr('stroke-width', 1)\r\n          .style('stroke-dasharray', 2)\r\n          .attr('d', line)\r\n      }\r\n    }\r\n  }, [functions, size, x, y])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default AsymptoticGraph","/**\r\n * Creates graph of multiple functions\r\n * Parameters:\r\n *  - functions: functions to graph\r\n *  - size: size of graph\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[],\r\n  size: number,\r\n  minx?: number,\r\n  maxx?: number,\r\n  miny?: number,\r\n  maxy?: number,\r\n  points?: GraphPoint[]\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f, min, max, dataGap = 0.01) => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg, f, width, height, color, xScale, yScale, classes, min, max, leftArrow, rightArrow, type, dataGap) => {\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns \r\n */\r\nfunction findIntersections(func, y, xMin, xMax, tolerance) {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg, functions, width, height, xScale, yScale) => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg, points, xScale, yScale) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n    .append('circle')\r\n    .attr('class', 'fill stroke ' + points[i].classes)\r\n    .attr('cx', xScale(points[i].x))\r\n    .attr('cy', yScale(points[i].y))\r\n    .attr('r', 3)\r\n  } \r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width, height, svgRef, textSize, minx = -10, maxx = 10, miny = -10, maxy = 10) => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n  \r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nfunction createArrowMarker(name, svg, size, color, classes) {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nfunction createLimitLine(svg, line, x1, x2, y1, y2, name, classes) {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nfunction findHypotenusefromSlope(x, y) {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nfunction convertScale(far, close, xScale, yScale) {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nfunction findSlope(points) {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nfunction findOffsets(points, axisOffset) {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nfunction createFunctionLimitLine(svg, functionLine, pathLength, xScale, yScale, line, fColor, right, markerName) {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\";\r\nimport { GraphFunction } from \"../../../types/GraphFunction\";\r\nimport * as math from \"mathjs\"\r\nimport { GraphPoint } from \"../../../types/GraphPoint\";\r\nimport Latex from \"../../../components/latex/Latex\";\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\";\r\nimport AsymptoticGraph from \"../../../components/content-components/graphs/AsymptoticGraph\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\";\r\n\r\nconst f1 = math.parse(\"x^2\")\r\nconst f2 = math.parse(\"x\")\r\nconst f3 = math.parse(\"-1/(x - 1) + 1\")\r\nconst f4 = math.parse(\"x + 2\")\r\n\r\nconst removableFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c1\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c1\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst removablePoints: GraphPoint[] = [\r\n  {\r\n    x: 2,\r\n    y: 1,\r\n    classes: \"c1\"\r\n  }\r\n]\r\n\r\nconst jumpFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c2\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f2.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c2\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst asymptoticFunctions = [\r\n  {\r\n    f: (x: number) => f3.evaluate({ x }),\r\n    min: -11,\r\n    max: 1,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c3',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  },\r\n  {\r\n    f: (x: number) => f3.evaluate({ x }),\r\n    min: 1,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: 'c3',\r\n    leftCircle: false,\r\n    rightCircle: false,\r\n    type: \"asymptotic\"\r\n  }\r\n]\r\n\r\nconst continuousFunctions: GraphFunction[] = [\r\n  {\r\n    f: (x: number) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 2,\r\n    includeLeft: false,\r\n    includeRight: true,\r\n    leftArrow: true,\r\n    rightArrow: false,\r\n    classes: \"c4\",\r\n    leftCircle: false,\r\n    rightCircle: true\r\n  },\r\n  {\r\n    f: (x: number) => f4.evaluate({ x }),\r\n    min: 2,\r\n    max: 11,\r\n    includeLeft: true,\r\n    includeRight: false,\r\n    leftArrow: false,\r\n    rightArrow: true,\r\n    classes: \"c4\",\r\n    leftCircle: true,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    Now that we are comfortable evaluating limits, we can discuss what it means for a graph to be <strong>continuous</strong>.\r\n  </div>\r\n  <div>\r\n    In order to better understand continuous graphs, let's first explore some discontinuous graphs.\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    Let's consider this graph that has a <strong>removable</strong> discontinuity:\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph with Removable Discontinuity </h3>\r\n    <FunctionGraph functions={removableFunctions} size={GRAPH_SIZE} points={removablePoints} ></FunctionGraph>\r\n  </div>\r\n\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    We call this discontinuity removable because we just need to fix the value of the function at <Latex expression=\"x = 2\" /> to make the function continuous again.\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    Let's look at another type of discontinuity: a <strong>jump</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph with Jump Discontinuity </h3>\r\n    <FunctionGraph functions={jumpFunctions} size={GRAPH_SIZE}></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    This is a jump discontinuity as there is a jump between two sections of the graph, causing the graph to be discontinuous.\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    Lastly, let's look at a graph with an <strong>infinite</strong> discontinuity.\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph with Infinite Discontinuity </h3>\r\n    <AsymptoticGraph functions={asymptoticFunctions} size={GRAPH_SIZE} x={[1]} y={[1]}></AsymptoticGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    This is an infinite discontinuity as the graph seems to be going to <Latex expression={`\\\\infty`} /> or <Latex expression={`-\\\\infty`} /> at <Latex expression=\"x = 1\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    If a graph doesn't fall into one of these categories, it is continuous. Now that we've looked at so many discontinuous graphs, let's look at a continuous one too:\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Continuous Graph</h3>\r\n    <FunctionGraph functions={continuousFunctions} size={GRAPH_SIZE}></FunctionGraph>\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    This graph is continuous even though it is a piecewise graph, because there are no removable, jump, or infinite discontinuities.\r\n  </div>\r\n  <div>\r\n    We will explore how to more formally define continuity in the next section!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 }","import { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\";\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9\r\n\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","x","y","svgRef","useRef","useEffect","current","_createBlankCanvas","createBlankCanvas","height","width","xScale","yScale","svg","d3","createMultipleFunctionsGraph","select","raise","line","d","i","length","append","datum","invert","attr","style","_jsx","ref","minx","maxx","miny","maxy","points","addPointsToGraph","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","generateFunctionData","f","min","max","dataGap","arguments","undefined","data","push","createFunctionGraph","color","classes","leftArrow","rightArrow","type","filter","Math","findIntersections","unshift","name","concat","uuidv4","createArrowMarker","id","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","_createFunctionGraph","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","sqrt","pow","findHypotenusefromSlope","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","math","f2","f3","f4","removableFunctions","evaluate","jumpFunctions","asymptoticFunctions","continuousFunctions","_jsxs","_Fragment","children","className","FunctionGraph","Latex","expression","AsymptoticGraph"],"sourceRoot":""}