{"version":3,"file":"static/js/586.a322a829.chunk.js","mappings":"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","sources":["components/content-components/graphs/FunctionGraph.tsx","helpers/constants.ts","helpers/graph-helpers.ts","topics/01-limits/15-the-intermediate-value-theorem-(ivt)/Sections.tsx","topics/01-limits/15-the-intermediate-value-theorem-(ivt)/learn-content.tsx"],"sourcesContent":["/**\r\n * Creates graph of multiple functions\r\n */\r\n\r\nimport { useEffect, useRef } from \"react\"\r\nimport { createBlankCanvas, createMultipleFunctionsGraph, addPointsToGraph } from \"../../../helpers/graph-helpers\";\r\nimport '../../../styles/graph.css'\r\nimport * as d3 from 'd3';\r\nimport React from \"react\";\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\";\r\nimport { GraphPoint } from \"../../../@types/GraphPoint\";\r\n\r\ninterface FunctionGraphProps {\r\n  functions: GraphFunction[], // functions to graph\r\n  size: number, // size of graph\r\n  minx?: number, // minimum x value of graph (default: -11)\r\n  maxx?: number, // maximum x value of graph (default: 11)\r\n  miny?: number, // minimum y value of graph (default: -11)\r\n  maxy?: number, // maximum y value of graph (default: -11)\r\n  points?: GraphPoint[] // additional full circle points to graph\r\n}\r\n\r\nconst FunctionGraph: React.FC<FunctionGraphProps> = ({ functions, size, minx, maxx, miny, maxy, points}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const { height, width, xScale, yScale } =\r\n        createBlankCanvas(size, size, svgRef, 12, minx, maxx, miny, maxy);\r\n      const svg = d3.select(svgRef.current)\r\n\r\n      createMultipleFunctionsGraph(svg, functions, width, height, xScale, yScale)\r\n      if (points) addPointsToGraph(svg, points, xScale, yScale)\r\n      \r\n      svg.select(\".tick-text\").raise();\r\n    }\r\n  }, [functions, size, minx, maxx, maxy, miny, points])\r\n\r\n  return (\r\n    <svg ref={svgRef} />\r\n  )\r\n}\r\n\r\nexport default FunctionGraph","const FAR_DIST = window.outerWidth < 800 ? 1.3 : 1;\r\nconst CLOSE_DIST = window.outerWidth < 800 ? 0.5 : 0.3;\r\nconst AXIS_OFFSET = window.outerWidth < 800 ? 0.4 : 0.3;\r\nconst GRAPH_SIZE = window.outerWidth < 800 ? 250 : 400;\r\nconst COLORS = ['red', 'green', 'blue', 'orange', 'purple'];\r\nconst LEFT_LIMIT = `^{\\\\footnotesize\\\\texttt{-}}`\r\nconst RIGHT_LIMIT = `^{\\\\footnotesize\\\\texttt{+}}`\r\n\r\nexport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET, GRAPH_SIZE, COLORS, LEFT_LIMIT, RIGHT_LIMIT }","import * as d3 from 'd3';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FAR_DIST, CLOSE_DIST, AXIS_OFFSET } from \"./constants\";\r\nimport { GraphFunction } from '../@types/GraphFunction';\r\nimport { DataPoint } from '../@types/DataPoint';\r\nimport { GraphFunctionData } from '../@types/GraphFunctionData';\r\nimport { GraphPoint } from '../@types/GraphPoint';\r\nimport { LimitPoints } from '../@types/LimitPoints';\r\n\r\n/**\r\n * generates graphing data for mathematical function\r\n * @param {function} f function for which to generate data\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {number} dataGap how close to generate function data\r\n * @returns array of data with generated values\r\n */\r\nconst generateFunctionData = (f: Function, min: number, max: number, dataGap: number = 0.01): DataPoint[] => {\r\n  let data = [];\r\n\r\n  for (let i = min; i <= max; i += dataGap) {\r\n    const x = i;\r\n    const y = f(i)\r\n    data.push({ x, y });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * appends graph of a mathematical function on an svg\r\n * @param {svg} svg element on which to draw function graph\r\n * @param {function} f function to graph \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {color} color color of graph\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @param {string} classes custom string of classes to include in function path/arrows\r\n * @param {int} min domain minimum value\r\n * @param {int} max domain maximum value\r\n * @param {boolean} leftArrow whether there should be an arrow on the left of the graph\r\n * @param {boolean} rightArrow whether there should be an arrow on the right of the graph\r\n * @param {String} type can be \"asymptotic\"\r\n * @param {number} dataGap how close to generate function data\r\n * @returns data that was used to graph function, id of svg path of function\r\n */\r\nconst createFunctionGraph = (svg: any, f: Function, width: number, height: number,\r\n  color: string, xScale: any, yScale: any, classes: string, min: number,\r\n  max: number, leftArrow: boolean, rightArrow: boolean, type?: string, dataGap?: number): GraphFunctionData => {\r\n\r\n  let data = generateFunctionData(f, min, max, dataGap); // generate data\r\n\r\n  // filter data\r\n  data = data.filter((d) => d.x > Math.min(xScale.invert(0), max) &&\r\n    d.x < Math.max(xScale.invert(width), min) &&\r\n    d.y > yScale.invert(height) &&\r\n    d.y < yScale.invert(0))\r\n\r\n  if (type === \"asymptotic\") {\r\n    // make left part of graph go to edge\r\n    if (min > xScale.invert(0)) {\r\n      // get data point of intersection with top/bottom of graph\r\n      const y = data[0].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, min + 0.00001, data[0].x, 0.01);\r\n      if (d) data.unshift({ x: d, y: f(d) }); // add point to beginning of data\r\n    }\r\n\r\n    // make right part of graph go to edge\r\n    if (max < xScale.invert(width)) {\r\n      // data point of intersection with top/bottom\r\n      const y = data[data.length - 1].y > 0 ? yScale.invert(0) : yScale.invert(height)\r\n      let d = findIntersections(f, y, data[data.length - 1].x, max - 0.00001, 0.01);\r\n      if (d) data.push({ x: d, y: f(d) }); // add point to end of data\r\n    }\r\n  }\r\n\r\n  const line = d3.line()\r\n    .x(d => xScale(d.x))\r\n    .y(d => yScale(d.y))\r\n\r\n  // arrow markers for graph\r\n  const markerSize = 5;\r\n  const name = `${uuidv4()}function-arrow`\r\n  createArrowMarker(name, svg, markerSize, color, classes)\r\n\r\n  // create graph\r\n  const id = uuidv4();\r\n  svg.append('path')\r\n    .datum(data)\r\n    .attr('data-uuid', id)\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', color)\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-end', rightArrow ? `url(#${name})` : null)\r\n    .attr('marker-start', leftArrow ? `url(#${name})` : null)\r\n    .attr('d', line);\r\n\r\n  svg.select(\".tick-text\").raise(); // raise tickmarks on top\r\n  svg.select(\".tick-marks\").raise(); // raise tickmarks on top\r\n\r\n  return { data, id };\r\n}\r\n\r\n/**\r\n * \r\n * @param {function} func for which to find intersections\r\n * @param {number} y of intersection point\r\n * @param {number} xMin of domain\r\n * @param {number} xMax of domain\r\n * @param {number} tolerance for how far away ans can be from y\r\n * @returns xvalue at which there is intersection\r\n */\r\nconst findIntersections = (func: Function, y: number, xMin: number, xMax: number, tolerance: number): number => {\r\n  var a = xMin;\r\n  var b = xMax;\r\n\r\n  // binary search\r\n  while (b - a > 0.00001) {\r\n    var xMid = (a + b) / 2;\r\n    var yMid = func(xMid);\r\n\r\n    if (y > 0 && yMid <= y && y - yMid < tolerance) {\r\n      return xMid;\r\n    }\r\n    if (y < 0 && yMid >= y && yMid - y < tolerance) {\r\n      return xMid;\r\n    }\r\n\r\n    // update based on graph behavior\r\n    if (func(xMin) < func(xMax) && yMid < y) {\r\n      // increasing graph, y too low\r\n      a = xMid;\r\n    } else if (func(xMin) < func(xMax)) {\r\n      // increasing graph, y too high\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax) && yMid < y) {\r\n      // decreasing graph, y too low\r\n      b = xMid;\r\n    } else if (func(xMin) > func(xMax)) {\r\n      // decreasing graph, y too high\r\n      a = xMid;\r\n    }\r\n  }\r\n\r\n  return (a + b) / 2; // nothing found so get midpoint\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg on which to draw function graph\r\n * @param {Array} functions to graph, each has the f, min/max domain, and includesLeft/includesRight, which indicates whether min/max are included or not\r\n * @param {int} width of svg\r\n * @param {int} height of svg\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @returns {Array} array of all data and ids of function graphs\r\n */\r\nconst createMultipleFunctionsGraph = (svg: any, functions: GraphFunction[], width: number, height: number, xScale: any, yScale: any): { dataArray: GraphFunctionData[] } => {\r\n  const dataArray = [];\r\n\r\n  for (let i = 0; i < functions.length; i++) {\r\n    // add graph for each function\r\n    const func = functions[i];\r\n    const { data, id } = createFunctionGraph(svg, func.f, width, height, null, xScale, yScale, func.classes, func.min, func.max, func.leftArrow, func.rightArrow, func.type, func.dataGap);\r\n\r\n    dataArray[dataArray.length] = { data, id }; // save return values\r\n\r\n    // append circles as holes/points if needed\r\n    if (func.leftCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeLeft ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.min))\r\n        .attr('cy', yScale(func.f(func.min)))\r\n        .attr('r', 3)\r\n    }\r\n\r\n    if (func.rightCircle) {\r\n      svg\r\n        .append('circle')\r\n        .attr('class', 'fill stroke ' + (func.includeRight ? '' : 'hole ') + func.classes)\r\n        .attr('cx', xScale(func.max))\r\n        .attr('cy', yScale(func.f(func.max)))\r\n        .attr('r', 3)\r\n    }\r\n  }\r\n\r\n  return { dataArray }\r\n}\r\n\r\n/**\r\n * Adds points to svg \r\n * @param {svg} svg svg on which to add points\r\n * @param {Array} points to add\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n */\r\nconst addPointsToGraph = (svg: any, points: GraphPoint[], xScale: any, yScale: any) => {\r\n  for (let i = 0; i < points.length; i++) {\r\n    svg\r\n      .append('circle')\r\n      .attr('class', 'fill stroke ' + points[i].classes)\r\n      .attr('cx', xScale(points[i].x))\r\n      .attr('cy', yScale(points[i].y))\r\n      .attr('r', 3)\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * creates -10 by 10 (default, diff dimensions can be specified) blank canvas on top of which graphs can be drawn \r\n * @param {number} width width of graph\r\n * @param {number} height height of graph\r\n * @param {Ref} svgRef reference to svg where graph should be drawn\r\n * @param {number} textSize size of text of graph labels\r\n * @param {number} minx minimum domain value\r\n * @param {number} maxx maximum domain value\r\n * @param {number} miny minimum range value\r\n * @param {number} maxy maximum range value\r\n * @returns width, height, xscale, and yscale of graph\r\n */\r\nconst createBlankCanvas = (width: number, height: number, svgRef: React.RefObject<HTMLCanvasElement>, textSize: number, minx: number = -10, maxx: number = 10, miny: number = -10, maxy: number = 10): { width: number, height: number, xScale: any, yScale: any } => {\r\n  const numCells = 20;\r\n  const half = (width / 2) / numCells;\r\n  const color = \"#707070\"\r\n  const size = 5;\r\n\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove();\r\n\r\n  svg\r\n    .attr('width', width)\r\n    .attr('height', height)\r\n\r\n  // scales\r\n  const xScale = d3.scaleLinear()\r\n    .domain([minx, maxx])\r\n    .range([half, width - half]);\r\n\r\n  const yScale = d3.scaleLinear()\r\n    .domain([miny, maxy])\r\n    .range([-1 * half + height, half]);\r\n\r\n  // build tick marks on axes\r\n  const tickMarks = svg.append('g')\r\n    .attr('class', 'tick-marks');\r\n\r\n  const tickText = svg.append('g')\r\n    .attr('class', 'tick-text')\r\n\r\n  const xGrid = svg.append('g')\r\n    .attr('class', 'x-grid-line')\r\n\r\n  const yGrid = svg.append('g')\r\n    .attr('class', 'y-grid-line')\r\n\r\n\r\n  const tickCount = 20;\r\n  const tickCount2 = tickCount / 2;\r\n\r\n  const ticks = d3.range(tickCount + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount)));\r\n  const ticks2 = d3.range(tickCount2 + 1).map((d, i) => minx + (i * ((maxx - minx) / tickCount2)));\r\n\r\n  ticks.forEach(tick => {\r\n    xGrid.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", 0)\r\n      .attr(\"y2\", height)\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to xaxis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(tick))\r\n      .attr(\"x2\", xScale(tick))\r\n      .attr(\"y1\", yScale(0) - 4)\r\n      .attr(\"y2\", yScale(0) + 4)\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(tick) + (tick < 0 ? 1.5 : -1.5))\r\n      .attr(\"y\", yScale(0) + 3)\r\n      .attr('alignment-baseline', 'hanging')\r\n      .attr('text-anchor', tick < 0 ? 'start' : 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  ticks.forEach(tick => {\r\n    yGrid.append(\"line\")\r\n      .attr(\"class\", \"y-grid-line\")\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", width)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", \"lightgray\");\r\n  })\r\n\r\n  // add marks and text to y axis\r\n  ticks2.forEach(tick => {\r\n    tickMarks.append(\"line\")\r\n      .attr(\"x1\", xScale(0) - 4)\r\n      .attr(\"x2\", xScale(0) + 4)\r\n      .attr(\"y1\", yScale(tick))\r\n      .attr(\"y2\", yScale(tick))\r\n      .attr(\"stroke\", tick === 0 ? \"none\" : color)\r\n      .attr(\"stroke-width\", 1)\r\n\r\n    tickText.append(\"text\")\r\n      .attr(\"x\", xScale(0) - 3)\r\n      .attr(\"y\", yScale(tick) + (tick < 0 ? -1.5 : 1.5))\r\n      .attr('alignment-baseline', tick < 0 ? 'baseline' : 'hanging')\r\n      .attr('text-anchor', 'end')\r\n      .style('color', 'black')\r\n      .style('font-size', tick === 0 ? 0 : textSize - 4)\r\n      .attr('font-weight', 'bold')\r\n      .text(Math.round(tick * 100) / 100)\r\n  })\r\n\r\n  // draw actual x and y axes\r\n  const name = \"axes-arrow\"\r\n  createArrowMarker(name, svg, size, color);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", 0)\r\n    .attr(\"x2\", width)\r\n    .attr(\"y1\", yScale(0))\r\n    .attr(\"y2\", yScale(0))\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  svg.append(\"line\")\r\n    .attr(\"x1\", xScale(0))\r\n    .attr(\"x2\", xScale(0))\r\n    .attr(\"y1\", height)\r\n    .attr(\"y2\", 0)\r\n    .attr(\"stroke\", color)\r\n    .attr(\"stroke-width\", 2)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('marker-start', `url(#${name})`);\r\n\r\n  return { width, height, xScale, yScale }\r\n};\r\n\r\n/**\r\n * generates custom arrow marker to be used in graphs of functions\r\n * @param {string} name identifier name of arrow marker being generated\r\n * @param {svg} svg svg where marker should be appended\r\n * @param {number} size size of marker\r\n * @param {string} color color of marker\r\n * @param {string} classes custom classes to be added to marker\r\n */\r\nconst createArrowMarker = (name: string, svg: any, size: number, color: string, classes?: string) => {\r\n  svg.append(\"defs\").append(\"marker\")\r\n    .attr(\"id\", name)\r\n    .attr('class', 'fill ' + classes)\r\n    .attr(\"refX\", size)\r\n    .attr(\"refY\", size / 2)\r\n    .attr(\"markerWidth\", size)\r\n    .attr(\"markerHeight\", size)\r\n    .attr(\"orient\", \"auto-start-reverse\")\r\n    .attr('fill', color)\r\n    .append(\"path\")\r\n    .attr(\"d\", `M0,0 V${size} Q${size * 2},${size / 2} 0,0`)\r\n}\r\n\r\n/**\r\n * \r\n * @param {svg} svg svg in which to append limit line\r\n * @param {function} line function for 'd' attribute of path\r\n * @param {number} x1 x1 of line\r\n * @param {number} x2 x2 of line\r\n * @param {number} y1 y1 of line\r\n * @param {number} y2 y2 of line\r\n * @param {string} name of arrow markers on line\r\n * @param {string} classes custom classes o add to generated arrow\r\n */\r\nconst createLimitLine = (svg: any, line: Function, x1: number, x2: number, y1: number, y2: number, name: string, classes: string) => {\r\n  // check if arrow marker exists\r\n  if (d3.select(`#${name}`).empty()) {\r\n    createArrowMarker(name, svg, 4, null, classes)\r\n  }\r\n\r\n  // add limit line\r\n  svg.append('path')\r\n    .datum([{ x: x1, y: y1 }, { x: x2, y: y2 }])\r\n    .attr('class', 'stroke ' + classes)\r\n    .attr('stroke-width', 1)\r\n    .attr('marker-end', `url(#${name})`)\r\n    .attr('d', line)\r\n}\r\n\r\n/**\r\n * finds hypotenuse frm width/height of triangle\r\n * @param {number} x width\r\n * @param {number} y height\r\n * @returns hypotenuse of triangle formed with width/height\r\n */\r\nconst findHypotenusefromSlope = (x: number, y: number): number => {\r\n  return Math.sqrt(((x) ** 2) + ((y) ** 2))\r\n}\r\n\r\n/**\r\n * converts points from svg scale to normal -10 to 10 x/y\r\n * @param {object} far far point\r\n * @param {object} close close point\r\n * @param {scale} xScale xscale of graph\r\n * @param {scale} yScale yscale of graph\r\n * @returns points object with converted x/y values\r\n */\r\nconst convertScale = (far: DataPoint, close: DataPoint, xScale: any, yScale: any): LimitPoints => {\r\n  const farx = xScale.invert(far.x)\r\n  const closex = xScale.invert(close.x)\r\n  const fary = yScale.invert(far.y)\r\n  const closey = yScale.invert(close.y)\r\n  return { farx, closex, fary, closey }\r\n}\r\n\r\n/**\r\n * perpendicular slope from points\r\n * @param {object} points object representing points from which to compute slope\r\n * @returns perpendicular slope from points\r\n */\r\nconst findSlope = (points: LimitPoints): number => {\r\n  let ans = (-1 * (points.farx - points.closex)) / (points.fary - points.closey)\r\n  return ans;\r\n}\r\n\r\n/**\r\n * Finds offsets of lines/text from function line\r\n * @param {object} points object representing points from which line needs to be offset\r\n * @param {number} axisOffset how much line should be offset\r\n * @returns x, y representing by how much lines need to move in each direction\r\n */\r\nconst findOffsets = (points: LimitPoints, axisOffset: number): DataPoint => {\r\n  let slope = findSlope(points)\r\n  const hyp = findHypotenusefromSlope(1, slope);\r\n  let scale = -1 * axisOffset / hyp;\r\n  if (slope > 0) scale *= -1\r\n  const x = scale;\r\n  const y = (scale) * slope;\r\n\r\n  return { x, y }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {svg} svg on which to append lines\r\n * @param {Element} functionLine line for function\r\n * @param {int} pathLength length of path up till point\r\n * @param {scale} xScale of svg\r\n * @param {scale} yScale of svg\r\n * @param {function} line function that creates 'd' attribute in svg path\r\n * @param {String} fColor color of function\r\n * @param {boolean} right true if the limit line to be drawn should be from the right, false if left\r\n * @param {String} markerName custom name of arrow marker\r\n * @returns points of the line in svg scale\r\n */\r\n\r\nconst createFunctionLimitLine = (svg: any, functionLine: any, pathLength: number, xScale: any, yScale: any, line: Function, fColor: string, right: boolean, markerName?: string): { closePoint: DataPoint, farPoint: DataPoint } => {\r\n\r\n  // modify lengths based on if the arrow is from the left or the right\r\n  let farDistLength = xScale(FAR_DIST) - xScale(0);\r\n  farDistLength = right ? farDistLength : (-1 * farDistLength);\r\n  let closeDistLength = xScale(CLOSE_DIST) - xScale(0);\r\n  closeDistLength = right ? closeDistLength : (-1 * closeDistLength)\r\n\r\n  // arrow from the left\r\n  const farPoint = functionLine.getPointAtLength(pathLength + farDistLength)\r\n  const closePoint = functionLine.getPointAtLength(pathLength + closeDistLength)\r\n  const pointsOne = convertScale(farPoint, closePoint, xScale, yScale)\r\n  const offsetsOne = findOffsets(pointsOne, AXIS_OFFSET);\r\n\r\n  if (isNaN(offsetsOne.y)) offsetsOne.y = AXIS_OFFSET;\r\n\r\n  createLimitLine(svg, line,\r\n    pointsOne.farx + offsetsOne.x,\r\n    pointsOne.closex + offsetsOne.x,\r\n    pointsOne.fary + offsetsOne.y,\r\n    pointsOne.closey + offsetsOne.y,\r\n    markerName ? markerName : 'f-limits', fColor)\r\n\r\n  return { closePoint, farPoint }\r\n}\r\n\r\nexport { createFunctionGraph, createBlankCanvas, createArrowMarker, generateFunctionData, createLimitLine, findHypotenusefromSlope, convertScale, findSlope, findOffsets, createMultipleFunctionsGraph, createFunctionLimitLine, addPointsToGraph }\r\n","import React from \"react\"\r\nimport Latex from \"../../../components/latex/Latex\"\r\nimport { GraphFunction } from \"../../../@types/GraphFunction\"\r\nimport FunctionGraph from \"../../../components/content-components/graphs/FunctionGraph\"\r\nimport * as math from \"mathjs\"\r\nimport { GRAPH_SIZE } from \"../../../helpers/constants\"\r\n\r\nconst f1 = math.parse(\"x^2\")\r\nconst functions: GraphFunction[] = [\r\n  {\r\n    f: (x) => f1.evaluate({ x }),\r\n    min: -11,\r\n    max: 11,\r\n    includeLeft: false,\r\n    includeRight: false,\r\n    leftArrow: true,\r\n    rightArrow: true,\r\n    classes: \"c1\",\r\n    leftCircle: false,\r\n    rightCircle: false\r\n  }\r\n]\r\n\r\nconst Section1 = <>\r\n  <div>\r\n    Suppose that we have a graph of <Latex expression=\"f(x) = x^2\" />.\r\n  </div>\r\n  <div className=\"flex vertical center medium-gap\">\r\n    <h3>Graph of <Latex expression=\"f(x)\" /></h3>\r\n    <FunctionGraph functions={functions} size={GRAPH_SIZE} />\r\n  </div>\r\n  <div>\r\n    Here, we can see that <Latex expression=\"f(0) = 0\" /> and <Latex expression=\"f(3) = 9\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section2 = <>\r\n  <div>\r\n    We can also see from the graph that between <Latex expression=\"x = 0\" /> and <Latex expression=\"x = 3\" />, every single <Latex expression=\"y\" /> from <Latex expression=\"f(0) = 0\" /> to <Latex expression=\"f(3) = 9\" /> is hit.\r\n  </div>\r\n</>\r\n\r\nconst Section3 = <>\r\n  <div>\r\n    This brings us to the <strong>Intermediate Value Theorem</strong>, which says that:\r\n  </div>\r\n  <div>\r\n    Suppose there is a function <Latex expression=\"f(x)\" /> that is continuous on <Latex expression=\"[a, b]\" />. Then, 2 things are guaranteed:\r\n\r\n  </div>\r\n  <div className=\"flex vertical center\">\r\n    <ul className=\"text-start\">\r\n      <li>\r\n        <Latex expression=\"f(x)\" /> will take on every value between <Latex expression=\"f(a)\" /> and <Latex expression=\"f(b)\" /> over the interval.\r\n      </li>\r\n      <li>\r\n        For any <Latex expression=\"L\" /> between <Latex expression=\"f(a)\" /> and <Latex expression=\"f(b)\" />, there exists a number <Latex expression=\"c\" /> in <Latex expression=\"[a, b]\" /> for which <Latex expression=\"f(c) = L\" />.\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</>\r\n\r\nconst Section4 = <>\r\n  <div>\r\n    In order to better understand this theorem, let's apply it to our graph of <Latex expression=\"f(x) = x^2\" /> on the interval <Latex expression=\"[0, 3]\" />.\r\n  </div>\r\n  <div>\r\n    First, to apply this theorem, we need to confirm that <Latex expression=\"f(x)\" /> is continuous on <Latex expression=\"[0, 3]\" />, which we know it is.\r\n  </div>\r\n</>\r\n\r\nconst Section5 = <>\r\n  <div>\r\n    The theorem tells us that <Latex expression=\"f(x)\" /> will take on every value between <Latex expression=\"f(0) = 0\" /> and <Latex expression=\"f(3) = 9\" /> over the interval <Latex expression=\"[0, 3]\" />.\r\n  </div>\r\n  <div>\r\n    This basically means what we noticed above - every single <Latex expression=\"y\" /> value between <Latex expression=\"f(0) = 0\" /> and <Latex expression=\"f(3) = 9\" /> is hit on <Latex expression=\"[0, 3]\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section6 = <>\r\n  <div>\r\n    The theorem also tells us that for any <Latex expression=\"L\" /> between <Latex expression=\"f(0) = 0\" /> and <Latex expression=\"f(3) = 9\" />, there is some <Latex expression=\"c\" /> in <Latex expression=\"[0, 3]\" /> such that <Latex expression=\"f(c) = L\" />.\r\n  </div>\r\n  <div>\r\n    Basically, we can pick any number between <Latex expression=\"f(0) = 0\" /> and <Latex expression=\"f(3) = 9\" /> - for example, we can pick <Latex expression=\"4\" />. This is going to be our <Latex expression=\"L\" /> value.\r\n  </div>\r\n  <div>\r\n    By the IVT, it is guaranteed that there is some <Latex expression=\"c\" /> in <Latex expression=\"[0, 3]\" /> such that <Latex expression=\"f(c) = 4\" />.\r\n  </div>\r\n  <div>\r\n    Looking at the graph in this case, we can see that this <Latex expression=\"c\" /> value is <Latex classes=\"bold\" expression=\"2\" />. This satisfies the theorem since <Latex expression=\"c = 2\" /> is in the interval <Latex expression=\"[0, 3]\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section7 = <>\r\n  <div>\r\n    It is not necessary to have a function expression to use IVT. For example, consider this question:\r\n  </div>\r\n  <div>\r\n    Suppose <Latex expression=\"f(x)\" /> is continuous over all real numbers. Let <Latex expression=\"f(-3) = 6\" /> and <Latex expression=\"f(4) = 0\" />. Is it guaranteed that there is a value <Latex expression=\"c\" /> on <Latex expression=\"[-3, 4]\" /> such that <Latex expression=\"f(c) = 3\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section8 = <>\r\n  <div>\r\n    Here, we can use the IVT to say that the answer is <strong>yes</strong>, because <Latex expression=\"f(x)\" /> is continuous on <Latex expression=\"[-3, 4]\" /> and <Latex expression=\"3\" /> is in between <Latex expression=\"f(-3) = 6\" /> and <Latex expression=\"f(4) = 0\" />.\r\n  </div>\r\n  <div>\r\n    What if we were asked if it is guaranteed that there is a value <Latex expression=\"c\" /> on <Latex expression=\"[-3, 4]\" /> such that <Latex expression=\"f(c) = 9\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section9 = <>\r\n  <div>\r\n    In that case, the IVT does <strong>not</strong> guarantee a value <Latex expression=\"c\" /> on <Latex expression=\"[-3, 4]\" /> such that <Latex expression=\"f(c) = 9\" />, because even though <Latex expression=\"f(x)\" /> is continuous on <Latex expression=\"[-3, 4]\" />, <Latex expression=\"9\" /> is <strong>not</strong> in between <Latex expression=\"f(-3) = 6\" /> and <Latex expression=\"f(4) = 0\" />.\r\n  </div>\r\n</>\r\n\r\nconst Section10 = <>\r\n  <div>\r\n    Instead of directly being given function values, you may be asked to find the function value using tables or equations. It is also your job to ensure the function is continuous on the interval.\r\n  </div>\r\n  <div>\r\n    For example, consider the function <Latex expression={`g(x) = \\\\frac{1}{x}`} />.\r\n  </div>\r\n  <div>\r\n    Does the IVT guarantee a value <Latex expression=\"c\" /> on <Latex expression=\"[-2, 2]\" /> such that <Latex expression=\"g(c) = 0\" />?\r\n  </div>\r\n</>\r\n\r\nconst Section11 = <>\r\n  <div>\r\n    We know that <Latex expression=\"g(x)\" /> is not continuous at <Latex expression=\"x = 0\" /> - therefore it is not continuous on <Latex expression=\"[-2, 2]\" />. Thus, the IVT cannot be applied to this function on this interval.\r\n  </div>\r\n  <div>\r\n    How about if we wanted to know if the IVT guarantees a value <Latex expression=\"c\" /> on <Latex expression=\"[1, 5]\" /> such that <Latex expression={`g(c) = \\\\frac{1}{2}`} />?\r\n  </div>\r\n</>\r\n\r\nconst Section12 = <>\r\n  <div>\r\n    In this case, <Latex expression=\"g(x)\" /> is continuous on <Latex expression=\"[1, 5]\" />, so the IVT can be applied.\r\n  </div>\r\n  <div>\r\n    Next, we evaluate <Latex expression=\"g(1) = 1\" /> and <Latex expression={`g(5) = \\\\frac{1}{5}`} />.\r\n  </div>\r\n  <div>\r\n    Since <Latex expression={`\\\\frac{1}{2}`} /> is in between <Latex expression=\"g(1) = 1\" /> and <Latex expression={`g(5) = \\\\frac{1}{5}`} />, the IVT does guarantee that there is some <Latex expression=\"c\" /> on <Latex expression=\"[1, 5]\" /> such that <Latex expression={`g(c) = \\\\frac{1}{2}`} />.\r\n  </div>\r\n</>\r\n\r\nconst Section13 = <>\r\n  <div>\r\n    That's it for IVT and the Limits Unit! Remember to practice problems for the IVT and review from time to time to ensure you understand the content!\r\n  </div>\r\n</>\r\n\r\nexport { Section1, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9, Section10, Section11, Section12, Section13 }","import { Section1, Section10, Section11, Section12, Section13, Section2, Section3, Section4, Section5, Section6, Section7, Section8, Section9 } from \"./Sections\"\r\n\r\nconst learnContent = [\r\n  Section1,\r\n  Section2,\r\n  Section3,\r\n  Section4,\r\n  Section5,\r\n  Section6,\r\n  Section7,\r\n  Section8,\r\n  Section9,\r\n  Section10,\r\n  Section11,\r\n  Section12,\r\n  Section13\r\n]\r\n\r\nexport default learnContent"],"names":["_ref","functions","size","minx","maxx","miny","maxy","points","svgRef","useRef","useEffect","current","height","width","xScale","yScale","createBlankCanvas","svg","d3","createMultipleFunctionsGraph","addPointsToGraph","select","raise","_jsx","ref","FAR_DIST","window","outerWidth","CLOSE_DIST","AXIS_OFFSET","GRAPH_SIZE","COLORS","LEFT_LIMIT","RIGHT_LIMIT","generateFunctionData","f","min","max","dataGap","arguments","length","undefined","data","i","x","y","push","createFunctionGraph","color","classes","leftArrow","rightArrow","type","filter","d","Math","invert","findIntersections","unshift","line","name","concat","uuidv4","createArrowMarker","id","append","datum","attr","func","xMin","xMax","tolerance","a","b","xMid","yMid","dataArray","leftCircle","includeLeft","rightCircle","includeRight","textSize","half","selectAll","remove","domain","range","tickMarks","tickText","xGrid","yGrid","ticks","tickCount","map","ticks2","tickCount2","forEach","tick","style","text","round","createLimitLine","x1","x2","y1","y2","empty","convertScale","far","close","farx","closex","fary","closey","findOffsets","axisOffset","slope","findSlope","hyp","findHypotenusefromSlope","sqrt","scale","createFunctionLimitLine","functionLine","pathLength","fColor","right","markerName","farDistLength","closeDistLength","farPoint","getPointAtLength","closePoint","pointsOne","offsetsOne","isNaN","f1","math","evaluate","_jsxs","_Fragment","children","Latex","expression","className","FunctionGraph"],"sourceRoot":""}